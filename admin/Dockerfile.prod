# syntax=docker/dockerfile:1.7

# Production Dockerfile for HaloBuzz Admin Dashboard
# Optimized for Northflank deployment

# ---- Dependencies stage ----
FROM node:20-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    linux-headers \
    libc6-compat \
    curl \
    && ln -sf python3 /usr/bin/python

# Copy package files
COPY package*.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,id=npm-cache,target=/root/.npm \
    npm ci --only=production

# ---- Build stage ----
FROM node:20-alpine AS build
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    linux-headers \
    libc6-compat

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./

# Copy source code and config files
COPY tsconfig*.json ./
COPY next.config.js ./
COPY tailwind.config.js ./
COPY pages ./pages
COPY components ./components
COPY context ./context
COPY lib ./lib
COPY styles ./styles
COPY middleware.ts ./

# Build Next.js application
RUN npm run build

# ---- Runtime stage ----
FROM node:20-alpine AS runtime
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    libc6-compat

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs admin

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN --mount=type=cache,id=npm-cache,target=/root/.npm \
    npm ci --only=production

# Copy built application
COPY --from=build /app/.next ./.next
COPY --from=build /app/public ./public
COPY --from=build /app/package*.json ./

# Create logs directory
RUN mkdir -p logs && chown -R admin:nodejs logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0

# Switch to non-root user
USER admin

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
  CMD curl -f --max-time 5 --connect-timeout 5 http://127.0.0.1:${PORT}/api/health || exit 1

# Start the application
CMD ["npm", "start"]