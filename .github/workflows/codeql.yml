name: CodeQL Security Analysis

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          ai-engine/package-lock.json
          admin/package-lock.json

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../ai-engine && npm ci
        cd ../admin && npm ci

    - name: Build backend
      run: |
        cd backend && npm run build

    - name: Build AI engine
      run: |
        cd ai-engine && npm run build

    - name: Build admin
      run: |
        cd admin && npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Audit backend dependencies
      run: |
        cd backend
        npm audit --audit-level=high --production
      continue-on-error: true

    - name: Audit AI engine dependencies
      run: |
        cd ai-engine
        npm audit --audit-level=high --production
      continue-on-error: true

    - name: Audit admin dependencies
      run: |
        cd admin
        npm audit --audit-level=high --production
      continue-on-error: true

    - name: Check for critical vulnerabilities
      run: |
        cd backend
        npm audit --audit-level=critical --production
        cd ../ai-engine
        npm audit --audit-level=critical --production
        cd ../admin
        npm audit --audit-level=critical --production

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'