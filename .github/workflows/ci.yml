name: HaloBuzz CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ===========================================
  # CODE QUALITY & TESTING
  # ===========================================
  
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint backend
        run: cd backend && pnpm run lint

      - name: Lint AI engine
        run: cd ai-engine && pnpm run lint

      - name: Type check backend
        run: cd backend && pnpm run typecheck

      - name: Type check AI engine
        run: cd ai-engine && pnpm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run backend tests
        run: cd backend && pnpm run test:coverage
        env:
          MONGODB_URI: mongodb://localhost:27017/halobuzz-test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          NODE_ENV: test

      - name: Run AI engine tests
        run: cd ai-engine && pnpm run test:coverage
        env:
          MONGODB_URI: mongodb://localhost:27017/halobuzz-test
          REDIS_URL: redis://localhost:6379
          OPENAI_API_KEY: test-openai-key
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./ai-engine/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level moderate
          cd ../ai-engine && npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ===========================================
  # BUILD & DEPLOYMENT
  # ===========================================

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend
        run: cd backend && pnpm run build

      - name: Build AI engine
        run: cd ai-engine && pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            ai-engine/dist/

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: |
            halobuzz/backend:latest
            halobuzz/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push AI engine image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-engine
          file: ./ai-engine/Dockerfile.prod
          push: true
          tags: |
            halobuzz/ai-engine:latest
            halobuzz/ai-engine:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # DEPLOYMENT
  # ===========================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here
          # Example: kubectl apply -f k8s/production/

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check commands here

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ===========================================
  # MOBILE APP BUILD
  # ===========================================

  # ===========================================
  # MOBILE E2E TESTS
  # ===========================================

  mobile-e2e-android:
    name: Mobile E2E Tests (Android)
    runs-on: macos-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: cd apps/halobuzz-mobile && pnpm install

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Build app for testing
        run: cd apps/halobuzz-mobile && detox build --configuration android.emu.debug

      - name: Run Detox tests
        run: cd apps/halobuzz-mobile && detox test --configuration android.emu.debug --record-logs all

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: detox-artifacts-android
          path: apps/halobuzz-mobile/e2e/artifacts

  mobile-e2e-ios:
    name: Mobile E2E Tests (iOS)
    runs-on: macos-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: cd apps/halobuzz-mobile && pnpm install

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Install applesimutils
        run: brew tap wix/brew && brew install applesimutils

      - name: Build app for testing
        run: cd apps/halobuzz-mobile && detox build --configuration ios.sim.debug

      - name: Run Detox tests
        run: cd apps/halobuzz-mobile && detox test --configuration ios.sim.debug --record-logs all

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: detox-artifacts-ios
          path: apps/halobuzz-mobile/e2e/artifacts

  mobile-build:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [mobile-e2e-android, mobile-e2e-ios]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: cd apps/halobuzz-mobile && pnpm install

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android Production
        run: cd apps/halobuzz-mobile && npx eas build -p android --profile production --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build iOS Production
        run: cd apps/halobuzz-mobile && npx eas build -p ios --profile production --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to Google Play (Internal Track)
        run: cd apps/halobuzz-mobile && npx eas submit -p android --latest --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to TestFlight
        run: cd apps/halobuzz-mobile && npx eas submit -p ios --latest --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # ===========================================
  # PERFORMANCE TESTING
  # ===========================================

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          echo "Running performance tests..."
          # Add performance test commands here
          # Example: k6 run performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance/results/

  # ===========================================
  # NOTIFICATIONS
  # ===========================================

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, mobile-build]
    if: always()
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: needs.deploy-production.result == 'success'

      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: needs.deploy-production.result == 'failure'
