name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ develop, main ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io

jobs:
  # Linting Job
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run ESLint
        run: |
          cd backend
          npm run lint

      - name: Check TypeScript
        run: |
          cd backend
          npm run typecheck

  # Unit Tests Job
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run unit tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/halobuzz_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_min_32_characters
          JWT_REFRESH_SECRET: test_refresh_secret_min_32_chars
        run: |
          cd backend
          npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Smoke Tests Job
  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start services with docker-compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run smoke tests
        run: |
          # Health check
          curl -f http://localhost:4000/healthz || exit 1
          curl -f http://localhost:4000/readyz || exit 1
          
          # Test key endpoints
          node backend/test-mvp.js

      - name: Stop services
        if: always()
        run: docker-compose down

  # Security Scan Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd backend
          npm audit --audit-level=moderate

  # Docker Build Job
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Mobile Build Job (React Native)
  mobile:
    name: Mobile Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/halobuzz-mobile
          npm ci

      - name: Lint mobile code
        run: |
          cd apps/halobuzz-mobile
          npm run lint || true  # Don't fail on lint errors for now

      - name: Build Android APK (debug)
        run: |
          cd apps/halobuzz-mobile
          # For Expo projects
          npx expo build:android --type apk || true
          # For bare React Native
          # cd android && ./gradlew assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: android-apk
          path: apps/halobuzz-mobile/android/app/build/outputs/apk/debug/*.apk

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, smoke]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.halobuzz.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # kubectl set image deployment/backend backend=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/backend:develop

      - name: Run post-deployment tests
        run: |
          sleep 30
          curl -f https://staging.halobuzz.com/healthz || exit 1

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, smoke, docker]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CI Pipeline failed for ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: '#ci-alerts'