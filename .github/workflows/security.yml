name: Security Scanning

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [backend, ai-engine, admin, mobile]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.workspace }}
      run: npm ci

    - name: Run npm audit
      working-directory: ${{ matrix.workspace }}
      run: |
        npm audit --audit-level=high --production
        npm audit --audit-level=critical --production

    - name: Check for known vulnerabilities with audit-ci
      working-directory: ${{ matrix.workspace }}
      run: |
        npx audit-ci --config audit-ci.json || true
      continue-on-error: true

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dockerfile: 
          - backend/Dockerfile
          - ai-engine/Dockerfile
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -f ${{ matrix.dockerfile }} -t security-test:latest .
      working-directory: ${{ dirname(matrix.dockerfile) }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-test:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint-security:
    name: ESLint Security Rules
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [backend, ai-engine, admin]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.workspace }}
      run: npm ci

    - name: Install security linting plugins
      working-directory: ${{ matrix.workspace }}
      run: |
        npm install --save-dev eslint-plugin-security eslint-plugin-node-security

    - name: Run ESLint with security rules
      working-directory: ${{ matrix.workspace }}
      run: |
        npx eslint . --ext .ts,.js --config .eslintrc.security.js
      continue-on-error: true

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  security-headers:
    name: Security Headers Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install -g newman
        npm install -g @postman/newman-reporter-htmlextra

    - name: Start test servers
      run: |
        cd backend && npm ci && npm run build && npm start &
        cd ai-engine && npm ci && npm run build && npm start &
        sleep 30

    - name: Test security headers
      run: |
        curl -I http://localhost:3000/healthz
        curl -I http://localhost:4000/health
        # Add more specific security header tests

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: [backend, ai-engine, admin]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.workspace }}
      run: npm ci

    - name: Type checking
      working-directory: ${{ matrix.workspace }}
      run: npx tsc --noEmit

    - name: Run tests
      working-directory: ${{ matrix.workspace }}
      run: npm test
      env:
        NODE_ENV: test

    - name: Build project
      working-directory: ${{ matrix.workspace }}
      run: npm run build

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, docker-security, lint-security, semgrep]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ESLint Security | ${{ needs.lint-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.codeql.result }}" == "failure" || "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.secret-scan.result }}" == "failure" ]]; then
          echo "❌ Security scan failures detected!"
          exit 1
        else
          echo "✅ All security scans passed!"
        fi
