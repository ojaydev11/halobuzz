name: Hosted Smoke Tests
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Backend to Railway", "Deploy AI Engine to Railway"]
    types: [completed]

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl
      
      - name: Initialize smoke results
        run: |
          echo "# HaloBuzz Hosted Smoke Test Results" > SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          echo "**Test Date:** $(date -u)" >> SMOKE_RESULTS.md
          echo "**Backend URL:** ${{ secrets.BACKEND_URL }}" >> SMOKE_RESULTS.md
          echo "**AI URL:** ${{ secrets.AI_URL }}" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          echo "## Test Results" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
      
      - name: Backend health check with security headers
        run: |
          echo "### 1. Backend Health Check" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          # Check health endpoint
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}\n%{header_json}" "${{ secrets.BACKEND_URL }}/healthz" || echo "FAILED")
          HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n 2 | head -n 1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ **Backend Health:** PASSED (HTTP $HTTP_CODE)" >> SMOKE_RESULTS.md
          else
            echo "❌ **Backend Health:** FAILED (HTTP $HTTP_CODE)" >> SMOKE_RESULTS.md
          fi
          
          # Check security headers
          SECURITY_HEADERS=$(curl -s -I "${{ secrets.BACKEND_URL }}/healthz" | grep -i "strict-transport-security\|content-security-policy\|x-frame-options" || echo "No security headers found")
          echo "**Security Headers:**" >> SMOKE_RESULTS.md
          echo "\`\`\`" >> SMOKE_RESULTS.md
          echo "$SECURITY_HEADERS" >> SMOKE_RESULTS.md
          echo "\`\`\`" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
      
      - name: AI Engine health check
        run: |
          echo "### 2. AI Engine Health Check" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          AI_HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" "${{ secrets.AI_URL }}/healthz" || echo "FAILED")
          AI_HTTP_CODE=$(echo "$AI_HEALTH_RESPONSE" | tail -n 1)
          
          if [ "$AI_HTTP_CODE" = "200" ]; then
            echo "✅ **AI Engine Health:** PASSED (HTTP $AI_HTTP_CODE)" >> SMOKE_RESULTS.md
            echo "**Response:**" >> SMOKE_RESULTS.md
            echo "\`\`\`json" >> SMOKE_RESULTS.md
            echo "$AI_HEALTH_RESPONSE" | head -n -1 >> SMOKE_RESULTS.md
            echo "\`\`\`" >> SMOKE_RESULTS.md
          else
            echo "❌ **AI Engine Health:** FAILED (HTTP $AI_HTTP_CODE)" >> SMOKE_RESULTS.md
          fi
          echo "" >> SMOKE_RESULTS.md
      
      - name: Authentication flow
        id: auth
        run: |
          echo "### 3. Authentication Flow" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          # Try to register first (idempotent)
          REGISTER_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.BACKEND_URL }}/auth/register" \
            -H 'Content-Type: application/json' \
            -d '{"email":"test@hb.com","password":"StrongP@ss1","username":"smoketest"}' || echo "FAILED")
          REGISTER_CODE=$(echo "$REGISTER_RESPONSE" | tail -n 1)
          echo "**Register Response:** HTTP $REGISTER_CODE" >> SMOKE_RESULTS.md
          
          # Login
          LOGIN_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.BACKEND_URL }}/auth/login" \
            -H 'Content-Type: application/json' \
            -d '{"email":"test@hb.com","password":"StrongP@ss1"}' || echo "FAILED")
          LOGIN_CODE=$(echo "$LOGIN_RESPONSE" | tail -n 1)
          TOKEN=$(echo "$LOGIN_RESPONSE" | head -n -1 | jq -r '.accessToken // empty')
          
          if [ "$LOGIN_CODE" = "200" ] && [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
            echo "✅ **Login:** PASSED (HTTP $LOGIN_CODE)" >> SMOKE_RESULTS.md
            echo "token=$TOKEN" >> $GITHUB_OUTPUT
          else
            echo "❌ **Login:** FAILED (HTTP $LOGIN_CODE)" >> SMOKE_RESULTS.md
            echo "token=" >> $GITHUB_OUTPUT
          fi
          echo "" >> SMOKE_RESULTS.md
      
      - name: Core API tests
        run: |
          echo "### 4. Core API Tests" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          TOKEN="${{ steps.auth.outputs.token }}"
          if [ -z "$TOKEN" ]; then
            echo "❌ **Core API Tests:** SKIPPED (no auth token)" >> SMOKE_RESULTS.md
            echo "" >> SMOKE_RESULTS.md
            return
          fi
          
          # OG Tiers
          OG_RESPONSE=$(curl -s -w "\n%{http_code}" "${{ secrets.BACKEND_URL }}/og/tiers" || echo "FAILED")
          OG_CODE=$(echo "$OG_RESPONSE" | tail -n 1)
          if [ "$OG_CODE" = "200" ]; then
            echo "✅ **OG Tiers:** PASSED (HTTP $OG_CODE)" >> SMOKE_RESULTS.md
            OG_COUNT=$(echo "$OG_RESPONSE" | head -n -1 | jq '. | length' 2>/dev/null || echo "unknown")
            echo "**Tiers Count:** $OG_COUNT" >> SMOKE_RESULTS.md
          else
            echo "❌ **OG Tiers:** FAILED (HTTP $OG_CODE)" >> SMOKE_RESULTS.md
          fi
          
          # Dev Credit
          CREDIT_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.BACKEND_URL }}/wallet/dev/credit" \
            -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d '{"coins":10000}' || echo "FAILED")
          CREDIT_CODE=$(echo "$CREDIT_RESPONSE" | tail -n 1)
          if [ "$CREDIT_CODE" = "200" ]; then
            echo "✅ **Dev Credit:** PASSED (HTTP $CREDIT_CODE)" >> SMOKE_RESULTS.md
          else
            echo "❌ **Dev Credit:** FAILED (HTTP $CREDIT_CODE)" >> SMOKE_RESULTS.md
          fi
          echo "" >> SMOKE_RESULTS.md
      
      - name: Stream and gift flow
        id: stream_flow
        run: |
          echo "### 5. Stream and Gift Flow" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          TOKEN="${{ steps.auth.outputs.token }}"
          if [ -z "$TOKEN" ]; then
            echo "❌ **Stream Flow:** SKIPPED (no auth token)" >> SMOKE_RESULTS.md
            echo "" >> SMOKE_RESULTS.md
            return
          fi
          
          # Create stream
          STREAM_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.BACKEND_URL }}/streams" \
            -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d '{"mode":"video","title":"Smoke Test Stream","isAnonymous":false}' || echo "FAILED")
          STREAM_CODE=$(echo "$STREAM_RESPONSE" | tail -n 1)
          STREAM_ID=$(echo "$STREAM_RESPONSE" | head -n -1 | jq -r '._id // .id // .data.stream.id // empty')
          
          if [ "$STREAM_CODE" = "200" ] && [ -n "$STREAM_ID" ]; then
            echo "✅ **Create Stream:** PASSED (HTTP $STREAM_CODE)" >> SMOKE_RESULTS.md
            echo "**Stream ID:** $STREAM_ID" >> SMOKE_RESULTS.md
            echo "stream=$STREAM_ID" >> $GITHUB_OUTPUT
          else
            echo "❌ **Create Stream:** FAILED (HTTP $STREAM_CODE)" >> SMOKE_RESULTS.md
            echo "stream=" >> $GITHUB_OUTPUT
            return
          fi
          
          # Get gifts
          GIFTS_RESPONSE=$(curl -s -w "\n%{http_code}" "${{ secrets.BACKEND_URL }}/gifts?active=true" || echo "FAILED")
          GIFTS_CODE=$(echo "$GIFTS_RESPONSE" | tail -n 1)
          GIFT_ID=$(echo "$GIFTS_RESPONSE" | head -n -1 | jq -r '.[0]._id // .[0].id // empty')
          
          if [ "$GIFTS_CODE" = "200" ] && [ -n "$GIFT_ID" ]; then
            echo "✅ **Get Gifts:** PASSED (HTTP $GIFTS_CODE)" >> SMOKE_RESULTS.md
            
            # Send gift
            GIFT_SEND_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.BACKEND_URL }}/streams/$STREAM_ID/gift" \
              -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
              -d "{\"giftId\":\"$GIFT_ID\",\"qty\":1}" || echo "FAILED")
            GIFT_SEND_CODE=$(echo "$GIFT_SEND_RESPONSE" | tail -n 1)
            
            if [ "$GIFT_SEND_CODE" = "200" ]; then
              echo "✅ **Send Gift:** PASSED (HTTP $GIFT_SEND_CODE)" >> SMOKE_RESULTS.md
            else
              echo "❌ **Send Gift:** FAILED (HTTP $GIFT_SEND_CODE)" >> SMOKE_RESULTS.md
            fi
          else
            echo "❌ **Get Gifts:** FAILED (HTTP $GIFTS_CODE)" >> SMOKE_RESULTS.md
          fi
          echo "" >> SMOKE_RESULTS.md
      
      - name: AI Engine security tests
        run: |
          echo "### 6. AI Engine Security Tests" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          
          STREAM_ID="${{ steps.stream_flow.outputs.stream }}"
          if [ -z "$STREAM_ID" ]; then
            echo "❌ **AI Security Tests:** SKIPPED (no stream ID)" >> SMOKE_RESULTS.md
            echo "" >> SMOKE_RESULTS.md
            return
          fi
          
          # Test without x-ai-secret (should fail)
          AI_NO_SECRET_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.AI_URL }}/internal/engagement/battle-boost" \
            -H "Content-Type: application/json" \
            -d "{\"streamId\":\"$STREAM_ID\",\"multiplier\":2,\"durationSec\":60}" || echo "FAILED")
          AI_NO_SECRET_CODE=$(echo "$AI_NO_SECRET_RESPONSE" | tail -n 1)
          
          if [ "$AI_NO_SECRET_CODE" = "401" ] || [ "$AI_NO_SECRET_CODE" = "403" ]; then
            echo "✅ **AI No Secret Test:** PASSED (HTTP $AI_NO_SECRET_CODE - correctly rejected)" >> SMOKE_RESULTS.md
          else
            echo "❌ **AI No Secret Test:** FAILED (HTTP $AI_NO_SECRET_CODE - should be 401/403)" >> SMOKE_RESULTS.md
          fi
          
          # Test with x-ai-secret (should succeed)
          AI_WITH_SECRET_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.AI_URL }}/internal/engagement/battle-boost" \
            -H "x-ai-secret: ${{ secrets.AI_ENGINE_SECRET }}" \
            -H "Content-Type: application/json" \
            -d "{\"streamId\":\"$STREAM_ID\",\"multiplier\":2,\"durationSec\":60}" || echo "FAILED")
          AI_WITH_SECRET_CODE=$(echo "$AI_WITH_SECRET_RESPONSE" | tail -n 1)
          
          if [ "$AI_WITH_SECRET_CODE" = "200" ]; then
            echo "✅ **AI With Secret Test:** PASSED (HTTP $AI_WITH_SECRET_CODE)" >> SMOKE_RESULTS.md
          else
            echo "❌ **AI With Secret Test:** FAILED (HTTP $AI_WITH_SECRET_CODE)" >> SMOKE_RESULTS.md
          fi
          echo "" >> SMOKE_RESULTS.md
      
      - name: Finalize results
        run: |
          echo "## Summary" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          echo "**Test completed at:** $(date -u)" >> SMOKE_RESULTS.md
          echo "" >> SMOKE_RESULTS.md
          echo "Check individual test results above for detailed status." >> SMOKE_RESULTS.md
      
      - name: Upload smoke results
        uses: actions/upload-artifact@v4
        with:
          name: smoke-results
          path: SMOKE_RESULTS.md
          retention-days: 30
