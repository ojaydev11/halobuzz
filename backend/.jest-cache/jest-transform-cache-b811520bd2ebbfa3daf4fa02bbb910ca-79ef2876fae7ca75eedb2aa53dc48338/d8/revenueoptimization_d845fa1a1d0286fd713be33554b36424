fc7d7b2beac4b8a1fc20d210244700df
"use strict";

/* istanbul ignore next */
function cov_1r72roh0ev() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\revenue-optimization.ts";
  var hash = "66789b0059210574417cc5fa09426f6f361f41bf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\revenue-optimization.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 37
        },
        end: {
          line: 4,
          column: 85
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "9": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "11": {
        start: {
          line: 19,
          column: 41
        },
        end: {
          line: 19,
          column: 49
        }
      },
      "12": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "14": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 25,
          column: 15
        }
      },
      "15": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 146
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 31,
          column: 11
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 75
        }
      },
      "18": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "19": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 64,
          column: 3
        }
      },
      "20": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "21": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 39
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "23": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "24": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 133
        }
      },
      "25": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "26": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 82
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "28": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 88,
          column: 3
        }
      },
      "29": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "30": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 39
        }
      },
      "31": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "32": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "33": {
        start: {
          line: 75,
          column: 23
        },
        end: {
          line: 75,
          column: 119
        }
      },
      "34": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 75
        }
      },
      "36": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "37": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "38": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "39": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 109
        }
      },
      "40": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "41": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 73
        }
      },
      "42": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "43": {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 128,
          column: 3
        }
      },
      "44": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "45": {
        start: {
          line: 109,
          column: 58
        },
        end: {
          line: 109,
          column: 66
        }
      },
      "46": {
        start: {
          line: 110,
          column: 23
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "47": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "48": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 65
        }
      },
      "49": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "50": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 147,
          column: 3
        }
      },
      "51": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "52": {
        start: {
          line: 132,
          column: 31
        },
        end: {
          line: 132,
          column: 41
        }
      },
      "53": {
        start: {
          line: 133,
          column: 31
        },
        end: {
          line: 133,
          column: 39
        }
      },
      "54": {
        start: {
          line: 134,
          column: 23
        },
        end: {
          line: 134,
          column: 126
        }
      },
      "55": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "56": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 69
        }
      },
      "57": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "58": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 164,
          column: 3
        }
      },
      "59": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 163,
          column: 5
        }
      },
      "60": {
        start: {
          line: 151,
          column: 22
        },
        end: {
          line: 151,
          column: 101
        }
      },
      "61": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "62": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 69
        }
      },
      "63": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "64": {
        start: {
          line: 166,
          column: 0
        },
        end: {
          line: 182,
          column: 3
        }
      },
      "65": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "66": {
        start: {
          line: 168,
          column: 60
        },
        end: {
          line: 168,
          column: 68
        }
      },
      "67": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 169,
          column: 113
        }
      },
      "68": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      },
      "69": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 66
        }
      },
      "70": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "71": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 199,
          column: 3
        }
      },
      "72": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 198,
          column: 5
        }
      },
      "73": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 111
        }
      },
      "74": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "75": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 74
        }
      },
      "76": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "77": {
        start: {
          line: 201,
          column: 0
        },
        end: {
          line: 217,
          column: 3
        }
      },
      "78": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "79": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 37
        }
      },
      "80": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 110
        }
      },
      "81": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "82": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 72
        }
      },
      "83": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "84": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 218,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 17,
            column: 33
          }
        },
        loc: {
          start: {
            line: 17,
            column: 52
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 29
          },
          end: {
            line: 42,
            column: 30
          }
        },
        loc: {
          start: {
            line: 42,
            column: 49
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 35
          },
          end: {
            line: 66,
            column: 36
          }
        },
        loc: {
          start: {
            line: 66,
            column: 55
          },
          end: {
            line: 88,
            column: 1
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 25
          },
          end: {
            line: 90,
            column: 26
          }
        },
        loc: {
          start: {
            line: 90,
            column: 45
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 24
          },
          end: {
            line: 107,
            column: 25
          }
        },
        loc: {
          start: {
            line: 107,
            column: 44
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 130,
            column: 47
          },
          end: {
            line: 130,
            column: 48
          }
        },
        loc: {
          start: {
            line: 130,
            column: 67
          },
          end: {
            line: 147,
            column: 1
          }
        },
        line: 130
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 149,
            column: 29
          },
          end: {
            line: 149,
            column: 30
          }
        },
        loc: {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 149
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 166,
            column: 33
          },
          end: {
            line: 166,
            column: 34
          }
        },
        loc: {
          start: {
            line: 166,
            column: 53
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 166
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 184,
            column: 26
          },
          end: {
            line: 184,
            column: 27
          }
        },
        loc: {
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 199,
            column: 1
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 201,
            column: 39
          },
          end: {
            line: 201,
            column: 40
          }
        },
        loc: {
          start: {
            line: 201,
            column: 59
          },
          end: {
            line: 217,
            column: 1
          }
        },
        line: 201
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "66789b0059210574417cc5fa09426f6f361f41bf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1r72roh0ev = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1r72roh0ev();
cov_1r72roh0ev().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1r72roh0ev().s[1]++, require("express"));
const RevenueOptimizationService_1 =
/* istanbul ignore next */
(cov_1r72roh0ev().s[2]++, require("@/services/RevenueOptimizationService"));
const auth_1 =
/* istanbul ignore next */
(cov_1r72roh0ev().s[3]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_1r72roh0ev().s[4]++, require("@/middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_1r72roh0ev().s[5]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_1r72roh0ev().s[6]++, (0, express_1.Router)());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_1r72roh0ev().s[7]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_1r72roh0ev().s[8]++;
router.use(security_1.socialLimiter);
/**
 * Revenue Optimization Routes
 * Handles dynamic pricing, monetization opportunities, and revenue analytics
 */
// Calculate dynamic pricing
/* istanbul ignore next */
cov_1r72roh0ev().s[9]++;
router.post('/pricing/dynamic', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[0]++;
  cov_1r72roh0ev().s[10]++;
  try {
    const {
      productId,
      basePrice
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[11]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[12]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[13]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1r72roh0ev().b[0][0]++;
      cov_1r72roh0ev().s[14]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r72roh0ev().b[0][1]++;
    }
    const dynamicPricing =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[15]++, await RevenueOptimizationService_1.revenueOptimizationService.calculateDynamicPricing(productId, userId, basePrice));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[16]++;
    return res.json({
      success: true,
      data: dynamicPricing
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[17]++;
    logger_1.logger.error('Error calculating dynamic pricing:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[18]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to calculate dynamic pricing'
    });
  }
});
// Get monetization opportunities
/* istanbul ignore next */
cov_1r72roh0ev().s[19]++;
router.get('/opportunities', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[1]++;
  cov_1r72roh0ev().s[20]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[21]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[22]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1r72roh0ev().b[1][0]++;
      cov_1r72roh0ev().s[23]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r72roh0ev().b[1][1]++;
    }
    const opportunities =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[24]++, await RevenueOptimizationService_1.revenueOptimizationService.identifyMonetizationOpportunities(userId));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[25]++;
    return res.json({
      success: true,
      data: opportunities
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[26]++;
    logger_1.logger.error('Error getting monetization opportunities:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[27]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get monetization opportunities'
    });
  }
});
// Get personalized offers
/* istanbul ignore next */
cov_1r72roh0ev().s[28]++;
router.get('/offers/personalized', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[2]++;
  cov_1r72roh0ev().s[29]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[30]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[31]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1r72roh0ev().b[2][0]++;
      cov_1r72roh0ev().s[32]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1r72roh0ev().b[2][1]++;
    }
    const offers =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[33]++, await RevenueOptimizationService_1.revenueOptimizationService.generatePersonalizedOffers(userId));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[34]++;
    return res.json({
      success: true,
      data: offers
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[35]++;
    logger_1.logger.error('Error getting personalized offers:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[36]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get personalized offers'
    });
  }
});
// Get revenue analytics (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[37]++;
router.get('/analytics', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[3]++;
  cov_1r72roh0ev().s[38]++;
  try {
    const analytics =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[39]++, await RevenueOptimizationService_1.revenueOptimizationService.getRevenueAnalytics());
    /* istanbul ignore next */
    cov_1r72roh0ev().s[40]++;
    return res.json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[41]++;
    logger_1.logger.error('Error getting revenue analytics:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[42]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get revenue analytics'
    });
  }
});
// Create A/B test (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[43]++;
router.post('/ab-test', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[4]++;
  cov_1r72roh0ev().s[44]++;
  try {
    const {
      testName,
      variants,
      metrics,
      duration
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[45]++, req.body);
    const abTest =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[46]++, await RevenueOptimizationService_1.revenueOptimizationService.createABTest({
      testName,
      variants,
      metrics,
      duration
    }));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[47]++;
    return res.json({
      success: true,
      data: abTest
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[48]++;
    logger_1.logger.error('Error creating A/B test:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[49]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to create A/B test'
    });
  }
});
// Implement revenue strategy (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[50]++;
router.post('/strategy/:strategyId/implement', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[5]++;
  cov_1r72roh0ev().s[51]++;
  try {
    const {
      strategyId
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[52]++, req.params);
    const {
      parameters
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[53]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[54]++, await RevenueOptimizationService_1.revenueOptimizationService.implementStrategy(strategyId, parameters));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[55]++;
    return res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[56]++;
    logger_1.logger.error('Error implementing strategy:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[57]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to implement strategy'
    });
  }
});
// Get pricing tiers
/* istanbul ignore next */
cov_1r72roh0ev().s[58]++;
router.get('/pricing/tiers', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[6]++;
  cov_1r72roh0ev().s[59]++;
  try {
    const tiers =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[60]++, await RevenueOptimizationService_1.revenueOptimizationService.getPricingTiers());
    /* istanbul ignore next */
    cov_1r72roh0ev().s[61]++;
    return res.json({
      success: true,
      data: tiers
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[62]++;
    logger_1.logger.error('Error getting pricing tiers:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[63]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get pricing tiers'
    });
  }
});
// Optimize pricing (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[64]++;
router.post('/pricing/optimize', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[7]++;
  cov_1r72roh0ev().s[65]++;
  try {
    const {
      productId,
      optimizationType,
      parameters
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[66]++, req.body);
    const optimization =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[67]++, await RevenueOptimizationService_1.revenueOptimizationService.optimizePricingTiers());
    /* istanbul ignore next */
    cov_1r72roh0ev().s[68]++;
    return res.json({
      success: true,
      data: optimization
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[69]++;
    logger_1.logger.error('Error optimizing pricing:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[70]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to optimize pricing'
    });
  }
});
// Get revenue strategies (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[71]++;
router.get('/strategies', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[8]++;
  cov_1r72roh0ev().s[72]++;
  try {
    const strategies =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[73]++, await RevenueOptimizationService_1.revenueOptimizationService.getRevenueStrategies());
    /* istanbul ignore next */
    cov_1r72roh0ev().s[74]++;
    return res.json({
      success: true,
      data: strategies
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[75]++;
    logger_1.logger.error('Error getting revenue strategies:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[76]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get revenue strategies'
    });
  }
});
// Get A/B test results (Admin only)
/* istanbul ignore next */
cov_1r72roh0ev().s[77]++;
router.get('/ab-test/:testId/results', async (req, res) => {
  /* istanbul ignore next */
  cov_1r72roh0ev().f[9]++;
  cov_1r72roh0ev().s[78]++;
  try {
    const {
      testId
    } =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[79]++, req.params);
    const results =
    /* istanbul ignore next */
    (cov_1r72roh0ev().s[80]++, await RevenueOptimizationService_1.revenueOptimizationService.getABTestResults(testId));
    /* istanbul ignore next */
    cov_1r72roh0ev().s[81]++;
    return res.json({
      success: true,
      data: results
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1r72roh0ev().s[82]++;
    logger_1.logger.error('Error getting A/B test results:', error);
    /* istanbul ignore next */
    cov_1r72roh0ev().s[83]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get A/B test results'
    });
  }
});
/* istanbul ignore next */
cov_1r72roh0ev().s[84]++;
exports.default = router;