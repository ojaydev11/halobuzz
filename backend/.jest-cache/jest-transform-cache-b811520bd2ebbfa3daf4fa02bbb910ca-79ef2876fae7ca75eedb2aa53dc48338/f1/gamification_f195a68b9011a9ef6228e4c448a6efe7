70f273a06467fb92c354751f79020c29
"use strict";

/* istanbul ignore next */
function cov_246b67ipxc() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\gamification.ts";
  var hash = "02e8a360b614e747ca12ecf70df5feda438437cc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\gamification.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 38
        },
        end: {
          line: 8,
          column: 88
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "10": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "11": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 113
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "15": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "16": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "17": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "18": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 33,
          column: 112
        }
      },
      "19": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 68
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "22": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "23": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "24": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "25": {
        start: {
          line: 51,
          column: 34
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "26": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 118
        }
      },
      "27": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "29": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "30": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "31": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "32": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 69,
          column: 38
        }
      },
      "33": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 102
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "35": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 63
        }
      },
      "36": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "37": {
        start: {
          line: 85,
          column: 0
        },
        end: {
          line: 101,
          column: 3
        }
      },
      "38": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 100,
          column: 5
        }
      },
      "39": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 38
        }
      },
      "40": {
        start: {
          line: 88,
          column: 23
        },
        end: {
          line: 88,
          column: 102
        }
      },
      "41": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "42": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 69
        }
      },
      "43": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "44": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 119,
          column: 3
        }
      },
      "45": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "46": {
        start: {
          line: 105,
          column: 23
        },
        end: {
          line: 105,
          column: 38
        }
      },
      "47": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 102
        }
      },
      "48": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "49": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 63
        }
      },
      "50": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "51": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 138,
          column: 3
        }
      },
      "52": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "53": {
        start: {
          line: 123,
          column: 23
        },
        end: {
          line: 123,
          column: 38
        }
      },
      "54": {
        start: {
          line: 124,
          column: 33
        },
        end: {
          line: 124,
          column: 41
        }
      },
      "55": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 118
        }
      },
      "56": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 70
        }
      },
      "58": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "59": {
        start: {
          line: 140,
          column: 0
        },
        end: {
          line: 156,
          column: 3
        }
      },
      "60": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "61": {
        start: {
          line: 142,
          column: 55
        },
        end: {
          line: 142,
          column: 64
        }
      },
      "62": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 113
        }
      },
      "63": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "64": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 68
        }
      },
      "65": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "66": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 174,
          column: 3
        }
      },
      "67": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 173,
          column: 5
        }
      },
      "68": {
        start: {
          line: 160,
          column: 23
        },
        end: {
          line: 160,
          column: 38
        }
      },
      "69": {
        start: {
          line: 161,
          column: 27
        },
        end: {
          line: 161,
          column: 103
        }
      },
      "70": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "71": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "72": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "73": {
        start: {
          line: 176,
          column: 0
        },
        end: {
          line: 193,
          column: 3
        }
      },
      "74": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 192,
          column: 5
        }
      },
      "75": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 38
        }
      },
      "76": {
        start: {
          line: 179,
          column: 32
        },
        end: {
          line: 179,
          column: 40
        }
      },
      "77": {
        start: {
          line: 180,
          column: 23
        },
        end: {
          line: 180,
          column: 116
        }
      },
      "78": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "79": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 68
        }
      },
      "80": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 191,
          column: 11
        }
      },
      "81": {
        start: {
          line: 195,
          column: 0
        },
        end: {
          line: 211,
          column: 3
        }
      },
      "82": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "83": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 38
        }
      },
      "84": {
        start: {
          line: 198,
          column: 25
        },
        end: {
          line: 198,
          column: 103
        }
      },
      "85": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 202,
          column: 11
        }
      },
      "86": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 69
        }
      },
      "87": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 11
        }
      },
      "88": {
        start: {
          line: 213,
          column: 0
        },
        end: {
          line: 229,
          column: 3
        }
      },
      "89": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "90": {
        start: {
          line: 215,
          column: 23
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "91": {
        start: {
          line: 216,
          column: 23
        },
        end: {
          line: 216,
          column: 100
        }
      },
      "92": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "93": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 68
        }
      },
      "94": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "95": {
        start: {
          line: 231,
          column: 0
        },
        end: {
          line: 247,
          column: 3
        }
      },
      "96": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "97": {
        start: {
          line: 233,
          column: 23
        },
        end: {
          line: 233,
          column: 38
        }
      },
      "98": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 234,
          column: 106
        }
      },
      "99": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "100": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 73
        }
      },
      "101": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "102": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 248,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 49
          },
          end: {
            line: 12,
            column: 50
          }
        },
        loc: {
          start: {
            line: 12,
            column: 69
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 51
          },
          end: {
            line: 30,
            column: 52
          }
        },
        loc: {
          start: {
            line: 30,
            column: 71
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 59
          },
          end: {
            line: 48,
            column: 60
          }
        },
        loc: {
          start: {
            line: 48,
            column: 79
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 46
          },
          end: {
            line: 67,
            column: 47
          }
        },
        loc: {
          start: {
            line: 67,
            column: 66
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 59
          },
          end: {
            line: 85,
            column: 60
          }
        },
        loc: {
          start: {
            line: 85,
            column: 79
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 103,
            column: 47
          }
        },
        loc: {
          start: {
            line: 103,
            column: 66
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 103
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 121,
            column: 48
          },
          end: {
            line: 121,
            column: 49
          }
        },
        loc: {
          start: {
            line: 121,
            column: 68
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 121
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 51
          },
          end: {
            line: 140,
            column: 52
          }
        },
        loc: {
          start: {
            line: 140,
            column: 71
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 140
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 49
          },
          end: {
            line: 158,
            column: 50
          }
        },
        loc: {
          start: {
            line: 158,
            column: 69
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 176,
            column: 59
          },
          end: {
            line: 176,
            column: 60
          }
        },
        loc: {
          start: {
            line: 176,
            column: 79
          },
          end: {
            line: 193,
            column: 1
          }
        },
        line: 176
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 195,
            column: 47
          },
          end: {
            line: 195,
            column: 48
          }
        },
        loc: {
          start: {
            line: 195,
            column: 67
          },
          end: {
            line: 211,
            column: 1
          }
        },
        line: 195
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 213,
            column: 45
          },
          end: {
            line: 213,
            column: 46
          }
        },
        loc: {
          start: {
            line: 213,
            column: 65
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 213
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 47
          }
        },
        loc: {
          start: {
            line: 231,
            column: 66
          },
          end: {
            line: 247,
            column: 1
          }
        },
        line: 231
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 142,
            column: 23
          },
          end: {
            line: 142,
            column: 31
          }
        }],
        line: 142
      },
      "4": {
        loc: {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 142,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 142,
            column: 42
          },
          end: {
            line: 142,
            column: 50
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "02e8a360b614e747ca12ecf70df5feda438437cc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_246b67ipxc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_246b67ipxc();
var __importDefault =
/* istanbul ignore next */
(cov_246b67ipxc().s[0]++,
/* istanbul ignore next */
(cov_246b67ipxc().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_246b67ipxc().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_246b67ipxc().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_246b67ipxc().f[0]++;
  cov_246b67ipxc().s[1]++;
  return /* istanbul ignore next */(cov_246b67ipxc().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_246b67ipxc().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_246b67ipxc().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_246b67ipxc().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_246b67ipxc().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_246b67ipxc().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_246b67ipxc().s[4]++, require("../middleware/auth"));
const GamificationAddictionEngine_1 =
/* istanbul ignore next */
(cov_246b67ipxc().s[5]++, require("../services/GamificationAddictionEngine"));
const logger_1 =
/* istanbul ignore next */
(cov_246b67ipxc().s[6]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_246b67ipxc().s[7]++, express_1.default.Router());
// Get user engagement status
/* istanbul ignore next */
cov_246b67ipxc().s[8]++;
router.get('/engagement', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[1]++;
  cov_246b67ipxc().s[9]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[10]++, req.user.userId);
    const engagement =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[11]++, await GamificationAddictionEngine_1.gamificationEngine.getUserEngagementStatus(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[12]++;
    res.json({
      success: true,
      data: engagement
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[13]++;
    logger_1.logger.error('Error getting engagement status:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[14]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get engagement status'
    });
  }
});
// Get achievement system
/* istanbul ignore next */
cov_246b67ipxc().s[15]++;
router.get('/achievements', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[2]++;
  cov_246b67ipxc().s[16]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[17]++, req.user.userId);
    const achievements =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[18]++, await GamificationAddictionEngine_1.gamificationEngine.getAchievementSystem(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[19]++;
    res.json({
      success: true,
      data: achievements
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[20]++;
    logger_1.logger.error('Error getting achievements:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[21]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get achievements'
    });
  }
});
// Unlock achievement
/* istanbul ignore next */
cov_246b67ipxc().s[22]++;
router.post('/achievements/unlock', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[3]++;
  cov_246b67ipxc().s[23]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[24]++, req.user.userId);
    const {
      achievementId
    } =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[25]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[26]++, await GamificationAddictionEngine_1.gamificationEngine.unlockAchievement(userId, achievementId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[27]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[28]++;
    logger_1.logger.error('Error unlocking achievement:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[29]++;
    res.status(500).json({
      success: false,
      error: 'Failed to unlock achievement'
    });
  }
});
// Get reward system
/* istanbul ignore next */
cov_246b67ipxc().s[30]++;
router.get('/rewards', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[4]++;
  cov_246b67ipxc().s[31]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[32]++, req.user.userId);
    const rewards =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[33]++, await GamificationAddictionEngine_1.gamificationEngine.getRewardSystem(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[34]++;
    res.json({
      success: true,
      data: rewards
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[35]++;
    logger_1.logger.error('Error getting rewards:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[36]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get rewards'
    });
  }
});
// Claim daily reward
/* istanbul ignore next */
cov_246b67ipxc().s[37]++;
router.post('/rewards/daily/claim', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[5]++;
  cov_246b67ipxc().s[38]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[39]++, req.user.userId);
    const result =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[40]++, await GamificationAddictionEngine_1.gamificationEngine.claimDailyReward(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[41]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[42]++;
    logger_1.logger.error('Error claiming daily reward:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[43]++;
    res.status(500).json({
      success: false,
      error: 'Failed to claim reward'
    });
  }
});
// Get streak system
/* istanbul ignore next */
cov_246b67ipxc().s[44]++;
router.get('/streaks', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[6]++;
  cov_246b67ipxc().s[45]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[46]++, req.user.userId);
    const streaks =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[47]++, await GamificationAddictionEngine_1.gamificationEngine.getStreakSystem(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[48]++;
    res.json({
      success: true,
      data: streaks
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[49]++;
    logger_1.logger.error('Error getting streaks:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[50]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get streaks'
    });
  }
});
// Update user activity
/* istanbul ignore next */
cov_246b67ipxc().s[51]++;
router.post('/activity', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[7]++;
  cov_246b67ipxc().s[52]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[53]++, req.user.userId);
    const {
      activityType
    } =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[54]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[55]++, await GamificationAddictionEngine_1.gamificationEngine.updateUserActivity(userId, activityType));
    /* istanbul ignore next */
    cov_246b67ipxc().s[56]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[57]++;
    logger_1.logger.error('Error updating user activity:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[58]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update activity'
    });
  }
});
// Get leaderboards
/* istanbul ignore next */
cov_246b67ipxc().s[59]++;
router.get('/leaderboards', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[8]++;
  cov_246b67ipxc().s[60]++;
  try {
    const {
      type =
      /* istanbul ignore next */
      (cov_246b67ipxc().b[3][0]++, 'global'),
      period =
      /* istanbul ignore next */
      (cov_246b67ipxc().b[4][0]++, 'weekly')
    } =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[61]++, req.query);
    const leaderboards =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[62]++, await GamificationAddictionEngine_1.gamificationEngine.getLeaderboards(type, period));
    /* istanbul ignore next */
    cov_246b67ipxc().s[63]++;
    res.json({
      success: true,
      data: leaderboards
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[64]++;
    logger_1.logger.error('Error getting leaderboards:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[65]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get leaderboards'
    });
  }
});
// Get challenges
/* istanbul ignore next */
cov_246b67ipxc().s[66]++;
router.get('/challenges', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[9]++;
  cov_246b67ipxc().s[67]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[68]++, req.user.userId);
    const challenges =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[69]++, await GamificationAddictionEngine_1.gamificationEngine.getChallenges(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[70]++;
    res.json({
      success: true,
      data: challenges
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[71]++;
    logger_1.logger.error('Error getting challenges:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get challenges'
    });
  }
});
// Complete challenge
/* istanbul ignore next */
cov_246b67ipxc().s[73]++;
router.post('/challenges/complete', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[10]++;
  cov_246b67ipxc().s[74]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[75]++, req.user.userId);
    const {
      challengeId
    } =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[76]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[77]++, await GamificationAddictionEngine_1.gamificationEngine.completeChallenge(userId, challengeId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[78]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[79]++;
    logger_1.logger.error('Error completing challenge:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[80]++;
    res.status(500).json({
      success: false,
      error: 'Failed to complete challenge'
    });
  }
});
// Get user progress
/* istanbul ignore next */
cov_246b67ipxc().s[81]++;
router.get('/progress', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[11]++;
  cov_246b67ipxc().s[82]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[83]++, req.user.userId);
    const progress =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[84]++, await GamificationAddictionEngine_1.gamificationEngine.getUserProgress(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[85]++;
    res.json({
      success: true,
      data: progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[86]++;
    logger_1.logger.error('Error getting user progress:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[87]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get progress'
    });
  }
});
// Get level system
/* istanbul ignore next */
cov_246b67ipxc().s[88]++;
router.get('/levels', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[12]++;
  cov_246b67ipxc().s[89]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[90]++, req.user.userId);
    const levels =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[91]++, await GamificationAddictionEngine_1.gamificationEngine.getLevelSystem(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[92]++;
    res.json({
      success: true,
      data: levels
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[93]++;
    logger_1.logger.error('Error getting level system:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[94]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get levels'
    });
  }
});
// Get addiction metrics (for monitoring)
/* istanbul ignore next */
cov_246b67ipxc().s[95]++;
router.get('/metrics', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_246b67ipxc().f[13]++;
  cov_246b67ipxc().s[96]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[97]++, req.user.userId);
    const metrics =
    /* istanbul ignore next */
    (cov_246b67ipxc().s[98]++, await GamificationAddictionEngine_1.gamificationEngine.getAddictionMetrics(userId));
    /* istanbul ignore next */
    cov_246b67ipxc().s[99]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_246b67ipxc().s[100]++;
    logger_1.logger.error('Error getting addiction metrics:', error);
    /* istanbul ignore next */
    cov_246b67ipxc().s[101]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get metrics'
    });
  }
});
/* istanbul ignore next */
cov_246b67ipxc().s[102]++;
exports.default = router;