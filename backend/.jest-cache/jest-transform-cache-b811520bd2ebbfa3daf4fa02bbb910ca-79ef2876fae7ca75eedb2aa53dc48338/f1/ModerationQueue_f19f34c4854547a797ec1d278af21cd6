09672a7e00306d3e3957f4b1e26d56a5
"use strict";

/* istanbul ignore next */
function cov_u4f26urm8() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\ModerationQueue.ts";
  var hash = "61e5d552ec0459ed4396f1eba3772b66e29bfc23";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\ModerationQueue.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 40
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "7": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "8": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "10": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 31,
          column: 14
        }
      },
      "11": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 87
        }
      },
      "13": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "14": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 78
        }
      },
      "15": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 60
        }
      },
      "16": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "17": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 47,
          column: 14
        }
      },
      "18": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 30
        }
      },
      "19": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "20": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 139
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 94
        }
      },
      "22": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "23": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 78
        }
      },
      "24": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 60
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "26": {
        start: {
          line: 63,
          column: 25
        },
        end: {
          line: 63,
          column: 79
        }
      },
      "27": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "28": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 67
        }
      },
      "29": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 49
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 112
        }
      },
      "31": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 88
        }
      },
      "32": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 37
        }
      },
      "33": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 72
        }
      },
      "34": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 60
        }
      },
      "35": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "36": {
        start: {
          line: 79,
          column: 25
        },
        end: {
          line: 79,
          column: 79
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "38": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 67
        }
      },
      "39": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 37
        }
      },
      "40": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 91,
          column: 14
        }
      },
      "41": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "42": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "43": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 72
        }
      },
      "44": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 84
        }
      },
      "45": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 37
        }
      },
      "46": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 68
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 60
        }
      },
      "48": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "49": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 61
        }
      },
      "50": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "51": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "52": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 26
        }
      },
      "53": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 86
        }
      },
      "54": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 26
        }
      },
      "55": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 88
        }
      },
      "56": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 26
        }
      },
      "57": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 70
        }
      },
      "58": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 129,
          column: 26
        }
      },
      "59": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "60": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 145
        }
      },
      "61": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 79
        }
      },
      "62": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 24
        }
      },
      "63": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 142,
          column: 55
        }
      },
      "64": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "65": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 19
        }
      },
      "66": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "67": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 75
        }
      },
      "68": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 22
        }
      },
      "69": {
        start: {
          line: 151,
          column: 36
        },
        end: {
          line: 151,
          column: 58
        }
      },
      "70": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 37
        }
      },
      "71": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 48
        }
      },
      "72": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 88
        }
      },
      "73": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 34
        }
      },
      "74": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 22
        }
      },
      "75": {
        start: {
          line: 160,
          column: 23
        },
        end: {
          line: 160,
          column: 71
        }
      },
      "76": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 162,
          column: 19
        }
      },
      "77": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 19
        }
      },
      "78": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "79": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 93
        }
      },
      "80": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 22
        }
      },
      "81": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 41
        }
      },
      "82": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 53
        }
      },
      "83": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 56
        }
      },
      "84": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 36
        }
      },
      "85": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 22
        }
      },
      "86": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 67
        }
      },
      "87": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 179,
          column: 19
        }
      },
      "88": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 19
        }
      },
      "89": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "90": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 47
        }
      },
      "91": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 45
        }
      },
      "92": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "93": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 22
        }
      },
      "94": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 94
        }
      },
      "95": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 22
        }
      },
      "96": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "97": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 58
        }
      },
      "98": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 22
        }
      },
      "99": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 56
        }
      },
      "100": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 22
        }
      },
      "101": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 87
        }
      },
      "102": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 84
        }
      },
      "103": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "104": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "105": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 47
        }
      },
      "106": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "107": {
        start: {
          line: 234,
          column: 26
        },
        end: {
          line: 234,
          column: 104
        }
      },
      "108": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 50
        }
      },
      "109": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 73
        }
      },
      "110": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 60
        }
      },
      "111": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "112": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 246,
          column: 14
        }
      },
      "113": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 50
        }
      },
      "114": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 70
        }
      },
      "115": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 60
        }
      },
      "116": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "117": {
        start: {
          line: 256,
          column: 26
        },
        end: {
          line: 256,
          column: 94
        }
      },
      "118": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 50
        }
      },
      "119": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 70
        }
      },
      "120": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 60
        }
      },
      "121": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "122": {
        start: {
          line: 266,
          column: 26
        },
        end: {
          line: 266,
          column: 82
        }
      },
      "123": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 50
        }
      },
      "124": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 72
        }
      },
      "125": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 60
        }
      },
      "126": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "127": {
        start: {
          line: 278,
          column: 33
        },
        end: {
          line: 278,
          column: 72
        }
      },
      "128": {
        start: {
          line: 279,
          column: 33
        },
        end: {
          line: 279,
          column: 54
        }
      },
      "129": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "130": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "131": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 286,
          column: 22
        }
      },
      "132": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 40
        }
      },
      "133": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 68
        }
      },
      "134": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 40
        }
      },
      "135": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "136": {
        start: {
          line: 298,
          column: 26
        },
        end: {
          line: 303,
          column: 65
        }
      },
      "137": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 50
        }
      },
      "138": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 76
        }
      },
      "139": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 60
        }
      },
      "140": {
        start: {
          line: 312,
          column: 0
        },
        end: {
          line: 312,
          column: 42
        }
      },
      "141": {
        start: {
          line: 313,
          column: 0
        },
        end: {
          line: 313,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 43
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 31
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 41
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 47
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 61
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 47
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 77
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 55
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 114
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 141
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 52
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 159
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 54
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 176
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 49
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 195
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 208
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 41
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 212
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 39
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 216
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 220
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 38
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 232
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 242
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 254
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 35
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 264
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 39
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 274
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 41
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 296
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 116,
            column: 29
          },
          end: {
            line: 116,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 29
          },
          end: {
            line: 116,
            column: 56
          }
        }, {
          start: {
            line: 116,
            column: 60
          },
          end: {
            line: 116,
            column: 61
          }
        }],
        line: 116
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 120,
            column: 26
          }
        }, {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 123,
            column: 26
          }
        }, {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 126,
            column: 26
          }
        }, {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 129,
            column: 26
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "7": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 144,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 144,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "8": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 149,
            column: 22
          }
        }, {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 156,
            column: 22
          }
        }],
        line: 145
      },
      "9": {
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 52
          }
        }, {
          start: {
            line: 151,
            column: 56
          },
          end: {
            line: 151,
            column: 58
          }
        }],
        line: 151
      },
      "10": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 162,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 162,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "11": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 167,
            column: 22
          }
        }, {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 173,
            column: 22
          }
        }],
        line: 163
      },
      "12": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 179,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 179,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "13": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 188,
            column: 22
          }
        }, {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 192,
            column: 22
          }
        }],
        line: 180
      },
      "14": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 201,
            column: 22
          }
        }, {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 205,
            column: 22
          }
        }],
        line: 197
      },
      "15": {
        loc: {
          start: {
            line: 230,
            column: 15
          },
          end: {
            line: 230,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 15
          },
          end: {
            line: 230,
            column: 34
          }
        }, {
          start: {
            line: 230,
            column: 38
          },
          end: {
            line: 230,
            column: 46
          }
        }],
        line: 230
      },
      "16": {
        loc: {
          start: {
            line: 232,
            column: 26
          },
          end: {
            line: 232,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 232,
            column: 34
          },
          end: {
            line: 232,
            column: 36
          }
        }],
        line: 232
      },
      "17": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "18": {
        loc: {
          start: {
            line: 296,
            column: 29
          },
          end: {
            line: 296,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 296,
            column: 37
          },
          end: {
            line: 296,
            column: 39
          }
        }],
        line: 296
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "61e5d552ec0459ed4396f1eba3772b66e29bfc23"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u4f26urm8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u4f26urm8();
cov_u4f26urm8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_u4f26urm8().s[1]++;
exports.moderationQueue = exports.ModerationQueue = void 0;
const ModerationFlag_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[2]++, require("../models/ModerationFlag"));
const User_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[3]++, require("../models/User"));
const LiveStream_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[4]++, require("../models/LiveStream"));
const Message_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[5]++, require("../models/Message"));
const ReputationService_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[6]++, require("./ReputationService"));
const logger_1 =
/* istanbul ignore next */
(cov_u4f26urm8().s[7]++, require("../config/logger"));
class ModerationQueue {
  actionSeverity =
  /* istanbul ignore next */
  (cov_u4f26urm8().s[8]++, {
    warn: 1,
    blur: 2,
    ban: 3
  });
  async addContentForReview(contentData) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[0]++;
    cov_u4f26urm8().s[9]++;
    try {
      const flag =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[10]++, new ModerationFlag_1.ModerationFlag({
        reporterId: 'system',
        reportedUserId: contentData.userId,
        type: contentData.contentType,
        reason: 'content_review',
        description: `Content review for ${contentData.contentType}`,
        status: 'pending',
        priority: 2,
        metadata: {
          contentId: contentData.contentId,
          content: contentData.content,
          ...contentData.metadata
        }
      }));
      /* istanbul ignore next */
      cov_u4f26urm8().s[11]++;
      await flag.save();
      /* istanbul ignore next */
      cov_u4f26urm8().s[12]++;
      logger_1.logger.info(`Content added for review: ${contentData.contentId}`);
      /* istanbul ignore next */
      cov_u4f26urm8().s[13]++;
      return {
        success: true,
        flagId: flag._id
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[14]++;
      logger_1.logger.error('Failed to add content for review:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[15]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async createFlag(flagData) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[1]++;
    cov_u4f26urm8().s[16]++;
    try {
      const flag =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[17]++, new ModerationFlag_1.ModerationFlag({
        ...flagData,
        status: 'pending',
        priority: this.calculatePriority(flagData.reason)
      }));
      /* istanbul ignore next */
      cov_u4f26urm8().s[18]++;
      await flag.save();
      // Apply reputation penalty to reported user if applicable
      /* istanbul ignore next */
      cov_u4f26urm8().s[19]++;
      if (flagData.reportedUserId) {
        /* istanbul ignore next */
        cov_u4f26urm8().b[0][0]++;
        cov_u4f26urm8().s[20]++;
        await ReputationService_1.reputationService.applyReputationDelta(flagData.reportedUserId, 'report_received', {
          count: 1
        });
      } else
      /* istanbul ignore next */
      {
        cov_u4f26urm8().b[0][1]++;
      }
      cov_u4f26urm8().s[21]++;
      logger_1.logger.info(`Moderation flag created: ${flag._id} for ${flagData.type}`);
      /* istanbul ignore next */
      cov_u4f26urm8().s[22]++;
      return {
        success: true,
        flagId: flag._id
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[23]++;
      logger_1.logger.error('Failed to create moderation flag:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[24]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async assignModerator(flagId, moderatorId) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[2]++;
    cov_u4f26urm8().s[25]++;
    try {
      const flag =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[26]++, await ModerationFlag_1.ModerationFlag.findById(flagId));
      /* istanbul ignore next */
      cov_u4f26urm8().s[27]++;
      if (!flag) {
        /* istanbul ignore next */
        cov_u4f26urm8().b[1][0]++;
        cov_u4f26urm8().s[28]++;
        return {
          success: false,
          error: 'Flag not found'
        };
      } else
      /* istanbul ignore next */
      {
        cov_u4f26urm8().b[1][1]++;
      }
      cov_u4f26urm8().s[29]++;
      flag.assignedModerator = moderatorId;
      /* istanbul ignore next */
      cov_u4f26urm8().s[30]++;
      await ModerationFlag_1.ModerationFlag.findByIdAndUpdate(flagId, {
        assignedModerator: moderatorId
      });
      /* istanbul ignore next */
      cov_u4f26urm8().s[31]++;
      logger_1.logger.info(`Moderator ${moderatorId} assigned to flag ${flagId}`);
      /* istanbul ignore next */
      cov_u4f26urm8().s[32]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[33]++;
      logger_1.logger.error('Failed to assign moderator:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[34]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async processFlag(flagId, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[3]++;
    cov_u4f26urm8().s[35]++;
    try {
      const flag =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[36]++, await ModerationFlag_1.ModerationFlag.findById(flagId));
      /* istanbul ignore next */
      cov_u4f26urm8().s[37]++;
      if (!flag) {
        /* istanbul ignore next */
        cov_u4f26urm8().b[2][0]++;
        cov_u4f26urm8().s[38]++;
        return {
          success: false,
          error: 'Flag not found'
        };
      } else
      /* istanbul ignore next */
      {
        cov_u4f26urm8().b[2][1]++;
      }
      // Resolve the flag
      cov_u4f26urm8().s[39]++;
      flag.status = 'resolved';
      /* istanbul ignore next */
      cov_u4f26urm8().s[40]++;
      flag.resolution = {
        action,
        reason: details.reason,
        duration: details.duration,
        notified: false,
        resolvedAt: new Date()
      };
      /* istanbul ignore next */
      cov_u4f26urm8().s[41]++;
      await ModerationFlag_1.ModerationFlag.findByIdAndUpdate(flagId, {
        status: 'resolved',
        resolution: {
          action,
          reason: details.reason,
          duration: details.duration,
          notified: false,
          resolvedAt: new Date()
        }
      });
      // Apply moderation action
      /* istanbul ignore next */
      cov_u4f26urm8().s[42]++;
      if (action !== 'none') {
        /* istanbul ignore next */
        cov_u4f26urm8().b[3][0]++;
        cov_u4f26urm8().s[43]++;
        await this.applyModerationAction(flag, action, details);
      } else
      /* istanbul ignore next */
      {
        cov_u4f26urm8().b[3][1]++;
      }
      cov_u4f26urm8().s[44]++;
      logger_1.logger.info(`Flag ${flagId} processed with action: ${action}`);
      /* istanbul ignore next */
      cov_u4f26urm8().s[45]++;
      return {
        success: true
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[46]++;
      logger_1.logger.error('Failed to process flag:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[47]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async applyModerationAction(flag, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[4]++;
    cov_u4f26urm8().s[48]++;
    try {
      const severity =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[49]++,
      /* istanbul ignore next */
      (cov_u4f26urm8().b[4][0]++, this.actionSeverity[action]) ||
      /* istanbul ignore next */
      (cov_u4f26urm8().b[4][1]++, 1));
      /* istanbul ignore next */
      cov_u4f26urm8().s[50]++;
      switch (flag.type) {
        case 'user':
          /* istanbul ignore next */
          cov_u4f26urm8().b[5][0]++;
          cov_u4f26urm8().s[51]++;
          await this.moderateUser(flag.reportedUserId, action, details);
          /* istanbul ignore next */
          cov_u4f26urm8().s[52]++;
          break;
        case 'stream':
          /* istanbul ignore next */
          cov_u4f26urm8().b[5][1]++;
          cov_u4f26urm8().s[53]++;
          await this.moderateStream(flag.reportedStreamId, action, details);
          /* istanbul ignore next */
          cov_u4f26urm8().s[54]++;
          break;
        case 'message':
          /* istanbul ignore next */
          cov_u4f26urm8().b[5][2]++;
          cov_u4f26urm8().s[55]++;
          await this.moderateMessage(flag.reportedMessageId, action, details);
          /* istanbul ignore next */
          cov_u4f26urm8().s[56]++;
          break;
        case 'content':
          /* istanbul ignore next */
          cov_u4f26urm8().b[5][3]++;
          cov_u4f26urm8().s[57]++;
          await this.moderateContent(flag, action, details);
          /* istanbul ignore next */
          cov_u4f26urm8().s[58]++;
          break;
      }
      // Apply reputation penalty
      /* istanbul ignore next */
      cov_u4f26urm8().s[59]++;
      if (flag.reportedUserId) {
        /* istanbul ignore next */
        cov_u4f26urm8().b[6][0]++;
        cov_u4f26urm8().s[60]++;
        await ReputationService_1.reputationService.applyReputationDelta(flag.reportedUserId, 'moderation_action', {
          action,
          severity
        });
      } else
      /* istanbul ignore next */
      {
        cov_u4f26urm8().b[6][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[61]++;
      logger_1.logger.error('Failed to apply moderation action:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[62]++;
      throw error;
    }
  }
  async moderateUser(userId, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[5]++;
    const user =
    /* istanbul ignore next */
    (cov_u4f26urm8().s[63]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_u4f26urm8().s[64]++;
    if (!user) {
      /* istanbul ignore next */
      cov_u4f26urm8().b[7][0]++;
      cov_u4f26urm8().s[65]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_u4f26urm8().b[7][1]++;
    }
    cov_u4f26urm8().s[66]++;
    switch (action) {
      case 'warn':
        /* istanbul ignore next */
        cov_u4f26urm8().b[8][0]++;
        cov_u4f26urm8().s[67]++;
        // Send warning notification
        await this.sendWarningNotification(userId, details.reason);
        /* istanbul ignore next */
        cov_u4f26urm8().s[68]++;
        break;
      case 'ban':
        /* istanbul ignore next */
        cov_u4f26urm8().b[8][1]++;
        const banDuration =
        /* istanbul ignore next */
        (cov_u4f26urm8().s[69]++,
        /* istanbul ignore next */
        (cov_u4f26urm8().b[9][0]++, details.duration) ||
        /* istanbul ignore next */
        (cov_u4f26urm8().b[9][1]++, 24)); // hours
        /* istanbul ignore next */
        cov_u4f26urm8().s[70]++;
        user.isBanned = true;
        /* istanbul ignore next */
        cov_u4f26urm8().s[71]++;
        user.banReason = details.reason;
        /* istanbul ignore next */
        cov_u4f26urm8().s[72]++;
        user.banExpiresAt = new Date(Date.now() + banDuration * 60 * 60 * 1000);
        /* istanbul ignore next */
        cov_u4f26urm8().s[73]++;
        await user.save();
        /* istanbul ignore next */
        cov_u4f26urm8().s[74]++;
        break;
    }
  }
  async moderateStream(streamId, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[6]++;
    const stream =
    /* istanbul ignore next */
    (cov_u4f26urm8().s[75]++, await LiveStream_1.LiveStream.findById(streamId));
    /* istanbul ignore next */
    cov_u4f26urm8().s[76]++;
    if (!stream) {
      /* istanbul ignore next */
      cov_u4f26urm8().b[10][0]++;
      cov_u4f26urm8().s[77]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_u4f26urm8().b[10][1]++;
    }
    cov_u4f26urm8().s[78]++;
    switch (action) {
      case 'warn':
        /* istanbul ignore next */
        cov_u4f26urm8().b[11][0]++;
        cov_u4f26urm8().s[79]++;
        // Send warning to stream host
        await this.sendWarningNotification(stream.hostId.toString(), details.reason);
        /* istanbul ignore next */
        cov_u4f26urm8().s[80]++;
        break;
      case 'ban':
        /* istanbul ignore next */
        cov_u4f26urm8().b[11][1]++;
        cov_u4f26urm8().s[81]++;
        stream.status = 'banned';
        /* istanbul ignore next */
        cov_u4f26urm8().s[82]++;
        stream.moderationStatus = 'rejected';
        /* istanbul ignore next */
        cov_u4f26urm8().s[83]++;
        stream.moderationNotes = details.reason;
        /* istanbul ignore next */
        cov_u4f26urm8().s[84]++;
        await stream.save();
        /* istanbul ignore next */
        cov_u4f26urm8().s[85]++;
        break;
    }
  }
  async moderateMessage(messageId, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[7]++;
    const message =
    /* istanbul ignore next */
    (cov_u4f26urm8().s[86]++, await Message_1.Message.findById(messageId));
    /* istanbul ignore next */
    cov_u4f26urm8().s[87]++;
    if (!message) {
      /* istanbul ignore next */
      cov_u4f26urm8().b[12][0]++;
      cov_u4f26urm8().s[88]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_u4f26urm8().b[12][1]++;
    }
    cov_u4f26urm8().s[89]++;
    switch (action) {
      case 'delete':
        /* istanbul ignore next */
        cov_u4f26urm8().b[13][0]++;
        cov_u4f26urm8().s[90]++;
        message.deletedAt = new Date();
        /* istanbul ignore next */
        cov_u4f26urm8().s[91]++;
        message.deletedBy = 'system';
        /* istanbul ignore next */
        cov_u4f26urm8().s[92]++;
        await Message_1.Message.findByIdAndUpdate(message._id, {
          deletedAt: new Date(),
          deletedBy: 'system'
        });
        /* istanbul ignore next */
        cov_u4f26urm8().s[93]++;
        break;
      case 'warn':
        /* istanbul ignore next */
        cov_u4f26urm8().b[13][1]++;
        cov_u4f26urm8().s[94]++;
        // Send warning to message sender
        await this.sendWarningNotification(message.userId.toString(), details.reason);
        /* istanbul ignore next */
        cov_u4f26urm8().s[95]++;
        break;
    }
  }
  async moderateContent(flag, action, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[8]++;
    cov_u4f26urm8().s[96]++;
    // Handle content moderation (e.g., blur inappropriate content)
    switch (action) {
      case 'blur':
        /* istanbul ignore next */
        cov_u4f26urm8().b[14][0]++;
        cov_u4f26urm8().s[97]++;
        // Apply blur effect to content
        await this.applyBlurEffect(flag, details);
        /* istanbul ignore next */
        cov_u4f26urm8().s[98]++;
        break;
      case 'delete':
        /* istanbul ignore next */
        cov_u4f26urm8().b[14][1]++;
        cov_u4f26urm8().s[99]++;
        // Remove content
        await this.removeContent(flag, details);
        /* istanbul ignore next */
        cov_u4f26urm8().s[100]++;
        break;
    }
  }
  async sendWarningNotification(userId, reason) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[9]++;
    cov_u4f26urm8().s[101]++;
    // TODO: Implement notification service
    logger_1.logger.info(`Warning notification sent to user ${userId}: ${reason}`);
  }
  async applyBlurEffect(flag, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[10]++;
    cov_u4f26urm8().s[102]++;
    // TODO: Implement content blurring
    logger_1.logger.info(`Blur effect applied to content for flag ${flag._id}`);
  }
  async removeContent(flag, details) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[11]++;
    cov_u4f26urm8().s[103]++;
    // TODO: Implement content removal
    logger_1.logger.info(`Content removed for flag ${flag._id}`);
  }
  calculatePriority(reason) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[12]++;
    const priorityMap =
    /* istanbul ignore next */
    (cov_u4f26urm8().s[104]++, {
      'violence': 'urgent',
      'harassment': 'high',
      'inappropriate': 'medium',
      'spam': 'low',
      'copyright': 'high',
      'fake_news': 'medium',
      'other': 'low'
    });
    /* istanbul ignore next */
    cov_u4f26urm8().s[105]++;
    return /* istanbul ignore next */(cov_u4f26urm8().b[15][0]++, priorityMap[reason]) ||
    /* istanbul ignore next */
    (cov_u4f26urm8().b[15][1]++, 'medium');
  }
  async getPendingFlags(limit =
  /* istanbul ignore next */
  (cov_u4f26urm8().b[16][0]++, 50)) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[13]++;
    cov_u4f26urm8().s[106]++;
    try {
      const flags =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[107]++, await ModerationFlag_1.ModerationFlag.find({
        status: 'pending'
      }).limit(limit));
      /* istanbul ignore next */
      cov_u4f26urm8().s[108]++;
      return {
        success: true,
        data: flags
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[109]++;
      logger_1.logger.error('Failed to get pending flags:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[110]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async getFlagStats() {
    /* istanbul ignore next */
    cov_u4f26urm8().f[14]++;
    cov_u4f26urm8().s[111]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[112]++, await ModerationFlag_1.ModerationFlag.aggregate([{
        $group: {
          _id: '$status',
          count: {
            $sum: 1
          }
        }
      }]));
      /* istanbul ignore next */
      cov_u4f26urm8().s[113]++;
      return {
        success: true,
        data: stats
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[114]++;
      logger_1.logger.error('Failed to get flag stats:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[115]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async getUserFlags(userId) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[15]++;
    cov_u4f26urm8().s[116]++;
    try {
      const flags =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[117]++, await ModerationFlag_1.ModerationFlag.find({
        reportedUser: userId
      }));
      /* istanbul ignore next */
      cov_u4f26urm8().s[118]++;
      return {
        success: true,
        data: flags
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[119]++;
      logger_1.logger.error('Failed to get user flags:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[120]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async getStreamFlags(streamId) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[16]++;
    cov_u4f26urm8().s[121]++;
    try {
      const flags =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[122]++, await ModerationFlag_1.ModerationFlag.find({
        streamId
      }));
      /* istanbul ignore next */
      cov_u4f26urm8().s[123]++;
      return {
        success: true,
        data: flags
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[124]++;
      logger_1.logger.error('Failed to get stream flags:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[125]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
  async autoModerateContent(content) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[17]++;
    cov_u4f26urm8().s[126]++;
    try {
      // TODO: Implement AI content moderation
      // This would integrate with OpenAI or similar service for content analysis
      const flaggedWords =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[127]++, ['spam', 'inappropriate', 'harassment']);
      const lowerContent =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[128]++, content.toLowerCase());
      /* istanbul ignore next */
      cov_u4f26urm8().s[129]++;
      for (const word of flaggedWords) {
        /* istanbul ignore next */
        cov_u4f26urm8().s[130]++;
        if (lowerContent.includes(word)) {
          /* istanbul ignore next */
          cov_u4f26urm8().b[17][0]++;
          cov_u4f26urm8().s[131]++;
          return {
            isFlagged: true,
            reason: 'inappropriate',
            confidence: 0.8
          };
        } else
        /* istanbul ignore next */
        {
          cov_u4f26urm8().b[17][1]++;
        }
      }
      /* istanbul ignore next */
      cov_u4f26urm8().s[132]++;
      return {
        isFlagged: false
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[133]++;
      logger_1.logger.error('Auto moderation failed:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[134]++;
      return {
        isFlagged: false
      };
    }
  }
  async getModerationQueue(limit =
  /* istanbul ignore next */
  (cov_u4f26urm8().b[18][0]++, 20)) {
    /* istanbul ignore next */
    cov_u4f26urm8().f[18]++;
    cov_u4f26urm8().s[135]++;
    try {
      const queue =
      /* istanbul ignore next */
      (cov_u4f26urm8().s[136]++, await ModerationFlag_1.ModerationFlag.find({
        status: 'pending'
      }).sort({
        priority: -1,
        createdAt: 1
      }).limit(limit).populate('reporterId', 'username avatar').populate('reportedUserId', 'username avatar').populate('assignedModerator', 'username avatar'));
      /* istanbul ignore next */
      cov_u4f26urm8().s[137]++;
      return {
        success: true,
        data: queue
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_u4f26urm8().s[138]++;
      logger_1.logger.error('Failed to get moderation queue:', error);
      /* istanbul ignore next */
      cov_u4f26urm8().s[139]++;
      return {
        success: false,
        error: error.message
      };
    }
  }
}
/* istanbul ignore next */
cov_u4f26urm8().s[140]++;
exports.ModerationQueue = ModerationQueue;
/* istanbul ignore next */
cov_u4f26urm8().s[141]++;
exports.moderationQueue = new ModerationQueue();