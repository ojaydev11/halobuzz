f689695ddff478f8ca869609ba07b916
"use strict";

/**
 * MMR (Matchmaking Rating) API Routes
 * Elo-based Ranking System for Competitive Games
 *
 * Endpoints:
 * - Get/create player rating
 * - Update after match
 * - Find opponent for matchmaking
 * - Leaderboards
 * - Player rank/percentile
 */
/* istanbul ignore next */
function cov_12qq5rgz9() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\mmr.ts";
  var hash = "70aa81aaefa2d0d8ffb925262722c8b33d5b220c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\mmr.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "1": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "2": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 62
        }
      },
      "3": {
        start: {
          line: 17,
          column: 18
        },
        end: {
          line: 17,
          column: 53
        }
      },
      "4": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "5": {
        start: {
          line: 19,
          column: 15
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "6": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 53
        }
      },
      "7": {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 43
        }
      },
      "8": {
        start: {
          line: 22,
          column: 15
        },
        end: {
          line: 22,
          column: 41
        }
      },
      "9": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "11": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 39
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 94
        }
      },
      "14": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "15": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 86
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "17": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 66
        }
      },
      "18": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "19": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "20": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "21": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 69
        }
      },
      "22": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "23": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 84
        }
      },
      "24": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 39
        }
      },
      "25": {
        start: {
          line: 79,
          column: 46
        },
        end: {
          line: 79,
          column: 54
        }
      },
      "26": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "27": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "28": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 37
        }
      },
      "29": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 91,
          column: 10
        }
      },
      "30": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "31": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "32": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "33": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "34": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "35": {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 111,
          column: 39
        }
      },
      "36": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "37": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 94
        }
      },
      "38": {
        start: {
          line: 115,
          column: 27
        },
        end: {
          line: 115,
          column: 37
        }
      },
      "39": {
        start: {
          line: 116,
          column: 25
        },
        end: {
          line: 116,
          column: 83
        }
      },
      "40": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "41": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "42": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "43": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 65
        }
      },
      "44": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "45": {
        start: {
          line: 147,
          column: 0
        },
        end: {
          line: 167,
          column: 3
        }
      },
      "46": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "47": {
        start: {
          line: 149,
          column: 27
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "48": {
        start: {
          line: 150,
          column: 22
        },
        end: {
          line: 150,
          column: 54
        }
      },
      "49": {
        start: {
          line: 151,
          column: 28
        },
        end: {
          line: 151,
          column: 87
        }
      },
      "50": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "51": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 71
        }
      },
      "52": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "53": {
        start: {
          line: 172,
          column: 0
        },
        end: {
          line: 198,
          column: 3
        }
      },
      "54": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "55": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 39
        }
      },
      "56": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "57": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 94
        }
      },
      "58": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 178,
          column: 37
        }
      },
      "59": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 179,
          column: 84
        }
      },
      "60": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "61": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "62": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "63": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 67
        }
      },
      "64": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "65": {
        start: {
          line: 203,
          column: 0
        },
        end: {
          line: 225,
          column: 3
        }
      },
      "66": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "67": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "68": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "69": {
        start: {
          line: 211,
          column: 30
        },
        end: {
          line: 211,
          column: 38
        }
      },
      "70": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "71": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "72": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 64
        }
      },
      "73": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      },
      "74": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 226,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 13,
            column: 57
          }
        },
        loc: {
          start: {
            line: 13,
            column: 71
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 53
          },
          end: {
            line: 27,
            column: 54
          }
        },
        loc: {
          start: {
            line: 27,
            column: 73
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 3
          },
          end: {
            line: 70,
            column: 4
          }
        },
        loc: {
          start: {
            line: 70,
            column: 23
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 60
          },
          end: {
            line: 109,
            column: 61
          }
        },
        loc: {
          start: {
            line: 109,
            column: 80
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 147,
            column: 117
          },
          end: {
            line: 147,
            column: 118
          }
        },
        loc: {
          start: {
            line: 147,
            column: 137
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 147
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 172,
            column: 58
          },
          end: {
            line: 172,
            column: 59
          }
        },
        loc: {
          start: {
            line: 172,
            column: 78
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 172
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 203,
            column: 120
          },
          end: {
            line: 203,
            column: 121
          }
        },
        loc: {
          start: {
            line: 203,
            column: 140
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 203
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 15,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 27
          }
        }, {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 13,
            column: 51
          }
        }, {
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 15,
            column: 1
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 37
          },
          end: {
            line: 14,
            column: 40
          }
        }, {
          start: {
            line: 14,
            column: 43
          },
          end: {
            line: 14,
            column: 61
          }
        }],
        line: 14
      },
      "2": {
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 15
          }
        }, {
          start: {
            line: 14,
            column: 19
          },
          end: {
            line: 14,
            column: 33
          }
        }],
        line: 14
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 31
          }
        }, {
          start: {
            line: 80,
            column: 35
          },
          end: {
            line: 80,
            column: 53
          }
        }, {
          start: {
            line: 80,
            column: 57
          },
          end: {
            line: 80,
            column: 75
          }
        }],
        line: 80
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 150,
            column: 22
          },
          end: {
            line: 150,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 22
          },
          end: {
            line: 150,
            column: 47
          }
        }, {
          start: {
            line: 150,
            column: 51
          },
          end: {
            line: 150,
            column: 54
          }
        }],
        line: 150
      },
      "10": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "11": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "12": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "70aa81aaefa2d0d8ffb925262722c8b33d5b220c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12qq5rgz9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12qq5rgz9();
var __importDefault =
/* istanbul ignore next */
(cov_12qq5rgz9().s[0]++,
/* istanbul ignore next */
(cov_12qq5rgz9().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_12qq5rgz9().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_12qq5rgz9().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[0]++;
  cov_12qq5rgz9().s[1]++;
  return /* istanbul ignore next */(cov_12qq5rgz9().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_12qq5rgz9().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_12qq5rgz9().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_12qq5rgz9().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_12qq5rgz9().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_12qq5rgz9().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_12qq5rgz9().s[4]++, require("express-validator"));
const auth_1 =
/* istanbul ignore next */
(cov_12qq5rgz9().s[5]++, require("@/middleware/auth"));
const MMRService_1 =
/* istanbul ignore next */
(cov_12qq5rgz9().s[6]++, require("@/services/MMRService"));
const logger_1 =
/* istanbul ignore next */
(cov_12qq5rgz9().s[7]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_12qq5rgz9().s[8]++, express_1.default.Router());
/**
 * GET /api/v1/mmr/:gameId/player
 * Get player's MMR rating for a game
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[9]++;
router.get('/:gameId/player', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[1]++;
  cov_12qq5rgz9().s[10]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[11]++, req.user?.userId);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[12]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[3][0]++;
      cov_12qq5rgz9().s[13]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[3][1]++;
    }
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[14]++, req.params);
    const rating =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[15]++, await MMRService_1.mmrService.getOrCreateRating(userId, gameId));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[16]++;
    return res.json({
      success: true,
      data: {
        mmr: rating.mmr,
        rank: rating.rank,
        division: rating.division,
        wins: rating.wins,
        losses: rating.losses,
        draws: rating.draws,
        winRate: rating.winRate,
        gamesPlayed: rating.gamesPlayed,
        currentWinStreak: rating.currentWinStreak,
        longestWinStreak: rating.longestWinStreak,
        peakMmr: rating.peakMmr,
        season: rating.season,
        placementMatchesRemaining: rating.placementMatchesRemaining
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[17]++;
    logger_1.logger.error('Failed to get MMR rating:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[18]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get rating'
    });
  }
});
/**
 * POST /api/v1/mmr/:gameId/update-after-match
 * Update MMR after a match (server-side only, called after match validation)
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[19]++;
router.post('/:gameId/update-after-match', auth_1.authMiddleware, [(0, express_validator_1.body)('winnerId').isString().notEmpty(), (0, express_validator_1.body)('loserId').isString().notEmpty(), (0, express_validator_1.body)('isDraw').optional().isBoolean()], async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[2]++;
  cov_12qq5rgz9().s[20]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[21]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[22]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[4][0]++;
      cov_12qq5rgz9().s[23]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[4][1]++;
    }
    // This should ideally be called from server-side match validation
    // For security, verify the requester is one of the players or admin
    const userId =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[24]++, req.user?.userId);
    const {
      winnerId,
      loserId,
      isDraw
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[25]++, req.body);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_12qq5rgz9().b[6][0]++, userId !== winnerId) &&
    /* istanbul ignore next */
    (cov_12qq5rgz9().b[6][1]++, userId !== loserId) &&
    /* istanbul ignore next */
    (cov_12qq5rgz9().b[6][2]++, !req.user?.isAdmin)) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[5][0]++;
      cov_12qq5rgz9().s[27]++;
      return res.status(403).json({
        success: false,
        error: 'Unauthorized to update MMR'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[5][1]++;
    }
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[28]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[29]++, await MMRService_1.mmrService.updateAfterMatch(gameId, {
      winnerId,
      loserId,
      isDraw
    }));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[30]++;
    return res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[31]++;
    logger_1.logger.error('Failed to update MMR:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[32]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to update MMR'
    });
  }
});
/**
 * GET /api/v1/mmr/:gameId/find-opponent
 * Find a suitable opponent for matchmaking
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[33]++;
router.get('/:gameId/find-opponent', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[3]++;
  cov_12qq5rgz9().s[34]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[35]++, req.user?.userId);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[36]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[7][0]++;
      cov_12qq5rgz9().s[37]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[7][1]++;
    }
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[38]++, req.params);
    const opponent =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[39]++, await MMRService_1.mmrService.findOpponent(userId, gameId));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[40]++;
    if (!opponent) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[8][0]++;
      cov_12qq5rgz9().s[41]++;
      return res.json({
        success: true,
        data: null,
        message: 'No suitable opponent found at this time'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[8][1]++;
    }
    cov_12qq5rgz9().s[42]++;
    return res.json({
      success: true,
      data: {
        opponentId: opponent.userId,
        opponentMmr: opponent.mmr,
        opponentRank: `${opponent.rank} ${opponent.division}`,
        opponentWins: opponent.wins,
        opponentLosses: opponent.losses
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[43]++;
    logger_1.logger.error('Failed to find opponent:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[44]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to find opponent'
    });
  }
});
/**
 * GET /api/v1/mmr/:gameId/leaderboard
 * Get MMR leaderboard for a game
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[45]++;
router.get('/:gameId/leaderboard', [(0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 100
})], async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[4]++;
  cov_12qq5rgz9().s[46]++;
  try {
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[47]++, req.params);
    const limit =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[48]++,
    /* istanbul ignore next */
    (cov_12qq5rgz9().b[9][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_12qq5rgz9().b[9][1]++, 100));
    const leaderboard =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[49]++, await MMRService_1.mmrService.getLeaderboard(gameId, limit));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[50]++;
    return res.json({
      success: true,
      data: {
        gameId,
        leaderboard
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[51]++;
    logger_1.logger.error('Failed to get MMR leaderboard:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[52]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get leaderboard'
    });
  }
});
/**
 * GET /api/v1/mmr/:gameId/player-rank
 * Get player's rank and leaderboard position
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[53]++;
router.get('/:gameId/player-rank', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[5]++;
  cov_12qq5rgz9().s[54]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[55]++, req.user?.userId);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[56]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[10][0]++;
      cov_12qq5rgz9().s[57]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[10][1]++;
    }
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[58]++, req.params);
    const rankInfo =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[59]++, await MMRService_1.mmrService.getPlayerRank(userId, gameId));
    /* istanbul ignore next */
    cov_12qq5rgz9().s[60]++;
    if (!rankInfo) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[11][0]++;
      cov_12qq5rgz9().s[61]++;
      return res.status(404).json({
        success: false,
        error: 'Rank not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[11][1]++;
    }
    cov_12qq5rgz9().s[62]++;
    return res.json({
      success: true,
      data: rankInfo
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[63]++;
    logger_1.logger.error('Failed to get player rank:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[64]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get rank'
    });
  }
});
/**
 * POST /api/v1/mmr/reset-season
 * Reset MMR for new season (admin only)
 */
/* istanbul ignore next */
cov_12qq5rgz9().s[65]++;
router.post('/reset-season', auth_1.authMiddleware, [(0, express_validator_1.body)('newSeason').isString().notEmpty()], async (req, res) => {
  /* istanbul ignore next */
  cov_12qq5rgz9().f[6]++;
  cov_12qq5rgz9().s[66]++;
  try {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[67]++;
    if (!req.user?.isAdmin) {
      /* istanbul ignore next */
      cov_12qq5rgz9().b[12][0]++;
      cov_12qq5rgz9().s[68]++;
      return res.status(403).json({
        success: false,
        error: 'Admin access required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_12qq5rgz9().b[12][1]++;
    }
    const {
      newSeason
    } =
    /* istanbul ignore next */
    (cov_12qq5rgz9().s[69]++, req.body);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[70]++;
    await MMRService_1.mmrService.resetSeason(newSeason);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[71]++;
    return res.json({
      success: true,
      message: `Season reset to ${newSeason}`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_12qq5rgz9().s[72]++;
    logger_1.logger.error('Failed to reset season:', error);
    /* istanbul ignore next */
    cov_12qq5rgz9().s[73]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to reset season'
    });
  }
});
/* istanbul ignore next */
cov_12qq5rgz9().s[74]++;
exports.default = router;