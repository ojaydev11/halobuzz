ed124e7a26e26932f98b42d8eed1c79c
"use strict";

/* istanbul ignore next */
function cov_1sp9p6sl6k() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\search.ts";
  var hash = "2adfc735742a91f55b407ee19d351f62d5254412";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\search.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "8": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 52
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "11": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "12": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 69
        }
      },
      "13": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "14": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "15": {
        start: {
          line: 69,
          column: 124
        },
        end: {
          line: 69,
          column: 133
        }
      },
      "16": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "17": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 82
        }
      },
      "18": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "19": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 55
        }
      },
      "20": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "21": {
        start: {
          line: 106,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "22": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "23": {
        start: {
          line: 118,
          column: 23
        },
        end: {
          line: 118,
          column: 69
        }
      },
      "24": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "25": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "26": {
        start: {
          line: 125,
          column: 40
        },
        end: {
          line: 125,
          column: 49
        }
      },
      "27": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 126,
          column: 108
        }
      },
      "28": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "29": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 67
        }
      },
      "30": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "31": {
        start: {
          line: 144,
          column: 0
        },
        end: {
          line: 168,
          column: 3
        }
      },
      "32": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "33": {
        start: {
          line: 151,
          column: 31
        },
        end: {
          line: 151,
          column: 40
        }
      },
      "34": {
        start: {
          line: 152,
          column: 33
        },
        end: {
          line: 152,
          column: 105
        }
      },
      "35": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "36": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "37": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "38": {
        start: {
          line: 170,
          column: 0
        },
        end: {
          line: 236,
          column: 3
        }
      },
      "39": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 235,
          column: 5
        }
      },
      "40": {
        start: {
          line: 198,
          column: 23
        },
        end: {
          line: 198,
          column: 69
        }
      },
      "41": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "42": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "43": {
        start: {
          line: 205,
          column: 89
        },
        end: {
          line: 205,
          column: 98
        }
      },
      "44": {
        start: {
          line: 206,
          column: 24
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "45": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "46": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "47": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 60
        }
      },
      "48": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "49": {
        start: {
          line: 238,
          column: 0
        },
        end: {
          line: 306,
          column: 3
        }
      },
      "50": {
        start: {
          line: 267,
          column: 4
        },
        end: {
          line: 305,
          column: 5
        }
      },
      "51": {
        start: {
          line: 268,
          column: 23
        },
        end: {
          line: 268,
          column: 69
        }
      },
      "52": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "53": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "54": {
        start: {
          line: 275,
          column: 79
        },
        end: {
          line: 275,
          column: 88
        }
      },
      "55": {
        start: {
          line: 276,
          column: 24
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "56": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 82
        }
      },
      "57": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 297,
          column: 11
        }
      },
      "58": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 62
        }
      },
      "59": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "60": {
        start: {
          line: 308,
          column: 0
        },
        end: {
          line: 376,
          column: 3
        }
      },
      "61": {
        start: {
          line: 337,
          column: 4
        },
        end: {
          line: 375,
          column: 5
        }
      },
      "62": {
        start: {
          line: 338,
          column: 23
        },
        end: {
          line: 338,
          column: 69
        }
      },
      "63": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "64": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 343,
          column: 15
        }
      },
      "65": {
        start: {
          line: 345,
          column: 82
        },
        end: {
          line: 345,
          column: 91
        }
      },
      "66": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "67": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 354,
          column: 82
        }
      },
      "68": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "69": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 60
        }
      },
      "70": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 374,
          column: 11
        }
      },
      "71": {
        start: {
          line: 377,
          column: 0
        },
        end: {
          line: 377,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 60,
            column: 3
          },
          end: {
            line: 60,
            column: 4
          }
        },
        loc: {
          start: {
            line: 60,
            column: 23
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 60
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 116,
            column: 3
          },
          end: {
            line: 116,
            column: 4
          }
        },
        loc: {
          start: {
            line: 116,
            column: 23
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 116
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 149,
            column: 3
          },
          end: {
            line: 149,
            column: 4
          }
        },
        loc: {
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 149
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 196,
            column: 3
          },
          end: {
            line: 196,
            column: 4
          }
        },
        loc: {
          start: {
            line: 196,
            column: 23
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 196
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 266,
            column: 3
          },
          end: {
            line: 266,
            column: 4
          }
        },
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 306,
            column: 1
          }
        },
        line: 266
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 336,
            column: 3
          },
          end: {
            line: 336,
            column: 4
          }
        },
        loc: {
          start: {
            line: 336,
            column: 23
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 336
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 97
          },
          end: {
            line: 69,
            column: 107
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 105
          },
          end: {
            line: 69,
            column: 107
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 109
          },
          end: {
            line: 69,
            column: 119
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 118
          },
          end: {
            line: 69,
            column: 119
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 73,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 40
          },
          end: {
            line: 73,
            column: 44
          }
        }, {
          start: {
            line: 73,
            column: 47
          },
          end: {
            line: 73,
            column: 85
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 47
          },
          end: {
            line: 73,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 68
          },
          end: {
            line: 73,
            column: 73
          }
        }, {
          start: {
            line: 73,
            column: 76
          },
          end: {
            line: 73,
            column: 85
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 26
          },
          end: {
            line: 74,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 74,
            column: 63
          }
        }, {
          start: {
            line: 74,
            column: 66
          },
          end: {
            line: 74,
            column: 75
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 75,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 75,
            column: 63
          }
        }, {
          start: {
            line: 75,
            column: 66
          },
          end: {
            line: 75,
            column: 75
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 125,
            column: 26
          },
          end: {
            line: 125,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 34
          },
          end: {
            line: 125,
            column: 35
          }
        }],
        line: 125
      },
      "12": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 151,
            column: 26
          }
        }],
        line: 151
      },
      "13": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "14": {
        loc: {
          start: {
            line: 205,
            column: 62
          },
          end: {
            line: 205,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 205,
            column: 70
          },
          end: {
            line: 205,
            column: 72
          }
        }],
        line: 205
      },
      "15": {
        loc: {
          start: {
            line: 205,
            column: 74
          },
          end: {
            line: 205,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 205,
            column: 83
          },
          end: {
            line: 205,
            column: 84
          }
        }],
        line: 205
      },
      "16": {
        loc: {
          start: {
            line: 208,
            column: 26
          },
          end: {
            line: 208,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 41
          },
          end: {
            line: 208,
            column: 63
          }
        }, {
          start: {
            line: 208,
            column: 66
          },
          end: {
            line: 208,
            column: 75
          }
        }],
        line: 208
      },
      "17": {
        loc: {
          start: {
            line: 209,
            column: 26
          },
          end: {
            line: 209,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 41
          },
          end: {
            line: 209,
            column: 63
          }
        }, {
          start: {
            line: 209,
            column: 66
          },
          end: {
            line: 209,
            column: 75
          }
        }],
        line: 209
      },
      "18": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "19": {
        loc: {
          start: {
            line: 275,
            column: 52
          },
          end: {
            line: 275,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 275,
            column: 60
          },
          end: {
            line: 275,
            column: 62
          }
        }],
        line: 275
      },
      "20": {
        loc: {
          start: {
            line: 275,
            column: 64
          },
          end: {
            line: 275,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 275,
            column: 73
          },
          end: {
            line: 275,
            column: 74
          }
        }],
        line: 275
      },
      "21": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 279,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 40
          },
          end: {
            line: 279,
            column: 44
          }
        }, {
          start: {
            line: 279,
            column: 47
          },
          end: {
            line: 279,
            column: 85
          }
        }],
        line: 279
      },
      "22": {
        loc: {
          start: {
            line: 279,
            column: 47
          },
          end: {
            line: 279,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 68
          },
          end: {
            line: 279,
            column: 73
          }
        }, {
          start: {
            line: 279,
            column: 76
          },
          end: {
            line: 279,
            column: 85
          }
        }],
        line: 279
      },
      "23": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "24": {
        loc: {
          start: {
            line: 345,
            column: 55
          },
          end: {
            line: 345,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 345,
            column: 63
          },
          end: {
            line: 345,
            column: 65
          }
        }],
        line: 345
      },
      "25": {
        loc: {
          start: {
            line: 345,
            column: 67
          },
          end: {
            line: 345,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 345,
            column: 76
          },
          end: {
            line: 345,
            column: 77
          }
        }],
        line: 345
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2adfc735742a91f55b407ee19d351f62d5254412"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sp9p6sl6k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sp9p6sl6k();
var __importDefault =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[0]++,
/* istanbul ignore next */
(cov_1sp9p6sl6k().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1sp9p6sl6k().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1sp9p6sl6k().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[0]++;
  cov_1sp9p6sl6k().s[1]++;
  return /* istanbul ignore next */(cov_1sp9p6sl6k().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1sp9p6sl6k().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1sp9p6sl6k().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1sp9p6sl6k().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1sp9p6sl6k().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[4]++, require("express-validator"));
const SearchService_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[5]++, require("../services/SearchService"));
const logger_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[6]++, require("../config/logger"));
const querySanitizer_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[7]++, require("../utils/querySanitizer"));
const security_1 =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[8]++, require("../middleware/security"));
const router =
/* istanbul ignore next */
(cov_1sp9p6sl6k().s[9]++, express_1.default.Router());
// Global search endpoint
/* istanbul ignore next */
cov_1sp9p6sl6k().s[10]++;
router.get('/', [security_1.searchLimiter, querySanitizer_1.sanitizeRequest, (0, express_validator_1.query)('q').isString().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Search query is required (1-100 characters)'), (0, express_validator_1.query)('type').optional().isIn(['all', 'users', 'streams', 'reels', 'hashtags']).withMessage('Invalid search type'), (0, express_validator_1.query)('category').optional().isString().trim().isLength({
  max: 50
}).withMessage('Invalid category'), (0, express_validator_1.query)('isLive').optional().isBoolean().withMessage('isLive must be a boolean'), (0, express_validator_1.query)('minFollowers').optional().isInt({
  min: 0
}).withMessage('minFollowers must be a non-negative integer'), (0, express_validator_1.query)('maxFollowers').optional().isInt({
  min: 0
}).withMessage('maxFollowers must be a non-negative integer'), (0, express_validator_1.query)('dateRange').optional().isIn(['today', 'week', 'month', 'year', 'all']).withMessage('Invalid date range'), (0, express_validator_1.query)('sortBy').optional().isIn(['relevance', 'popularity', 'date', 'followers']).withMessage('Invalid sort option'), (0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 100
}).withMessage('Limit must be between 1 and 100'), (0, express_validator_1.query)('offset').optional().isInt({
  min: 0
}).withMessage('Offset must be a non-negative integer')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[1]++;
  cov_1sp9p6sl6k().s[11]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[12]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[13]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1sp9p6sl6k().b[3][0]++;
      cov_1sp9p6sl6k().s[14]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sp9p6sl6k().b[3][1]++;
    }
    const {
      q: query,
      type,
      category,
      isLive,
      minFollowers,
      maxFollowers,
      dateRange,
      sortBy,
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[4][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[5][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[15]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[16]++, {
      type: type,
      category: category,
      isLive: isLive === 'true' ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[6][0]++, true) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[6][1]++, isLive === 'false' ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[7][0]++, false) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[7][1]++, undefined)),
      minFollowers: minFollowers ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[8][0]++, parseInt(minFollowers)) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[8][1]++, undefined),
      maxFollowers: maxFollowers ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[9][0]++, parseInt(maxFollowers)) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[9][1]++, undefined),
      dateRange: dateRange,
      sortBy: sortBy,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    const results =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[17]++, await SearchService_1.searchService.search(query, filters));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[18]++;
    res.json({
      success: true,
      data: {
        query,
        filters,
        results,
        pagination: {
          limit: filters.limit,
          offset: filters.offset,
          total: results.totalResults,
          hasMore: results.totalResults > filters.offset + filters.limit
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[19]++;
    logger_1.logger.error('Search failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[20]++;
    res.status(500).json({
      success: false,
      error: 'Search operation failed'
    });
  }
});
// Search suggestions endpoint
/* istanbul ignore next */
cov_1sp9p6sl6k().s[21]++;
router.get('/suggestions', [(0, express_validator_1.query)('q').isString().trim().isLength({
  min: 1,
  max: 50
}).withMessage('Query is required (1-50 characters)'), (0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 20
}).withMessage('Limit must be between 1 and 20')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[2]++;
  cov_1sp9p6sl6k().s[22]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[23]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[24]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1sp9p6sl6k().b[10][0]++;
      cov_1sp9p6sl6k().s[25]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sp9p6sl6k().b[10][1]++;
    }
    const {
      q: query,
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[11][0]++, 5)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[26]++, req.query);
    const suggestions =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[27]++, await SearchService_1.searchService.getSearchSuggestions(query, parseInt(limit)));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[28]++;
    res.json({
      success: true,
      data: {
        query,
        suggestions
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[29]++;
    logger_1.logger.error('Search suggestions failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[30]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get search suggestions'
    });
  }
});
// Trending hashtags endpoint
/* istanbul ignore next */
cov_1sp9p6sl6k().s[31]++;
router.get('/trending/hashtags', [(0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 50
}).withMessage('Limit must be between 1 and 50')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[3]++;
  cov_1sp9p6sl6k().s[32]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[12][0]++, 10)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[33]++, req.query);
    const trendingHashtags =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[34]++, await SearchService_1.searchService.getTrendingHashtags(parseInt(limit)));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[35]++;
    res.json({
      success: true,
      data: {
        hashtags: trendingHashtags,
        generatedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[36]++;
    logger_1.logger.error('Trending hashtags failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[37]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get trending hashtags'
    });
  }
});
// Search users specifically
/* istanbul ignore next */
cov_1sp9p6sl6k().s[38]++;
router.get('/users', [(0, express_validator_1.query)('q').isString().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Search query is required'), (0, express_validator_1.query)('minFollowers').optional().isInt({
  min: 0
}).withMessage('minFollowers must be a non-negative integer'), (0, express_validator_1.query)('maxFollowers').optional().isInt({
  min: 0
}).withMessage('maxFollowers must be a non-negative integer'), (0, express_validator_1.query)('sortBy').optional().isIn(['relevance', 'popularity', 'followers']).withMessage('Invalid sort option'), (0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 50
}).withMessage('Limit must be between 1 and 50'), (0, express_validator_1.query)('offset').optional().isInt({
  min: 0
}).withMessage('Offset must be a non-negative integer')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[4]++;
  cov_1sp9p6sl6k().s[39]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[40]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[41]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1sp9p6sl6k().b[13][0]++;
      cov_1sp9p6sl6k().s[42]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sp9p6sl6k().b[13][1]++;
    }
    const {
      q: query,
      minFollowers,
      maxFollowers,
      sortBy,
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[14][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[15][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[43]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[44]++, {
      type: 'users',
      minFollowers: minFollowers ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[16][0]++, parseInt(minFollowers)) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[16][1]++, undefined),
      maxFollowers: maxFollowers ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[17][0]++, parseInt(maxFollowers)) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[17][1]++, undefined),
      sortBy: sortBy,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    const results =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[45]++, await SearchService_1.searchService.search(query, filters));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[46]++;
    res.json({
      success: true,
      data: {
        query,
        users: results.users,
        pagination: {
          limit: filters.limit,
          offset: filters.offset,
          total: results.users.length,
          hasMore: results.users.length === filters.limit
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[47]++;
    logger_1.logger.error('User search failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[48]++;
    res.status(500).json({
      success: false,
      error: 'User search failed'
    });
  }
});
// Search streams specifically
/* istanbul ignore next */
cov_1sp9p6sl6k().s[49]++;
router.get('/streams', [(0, express_validator_1.query)('q').isString().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Search query is required'), (0, express_validator_1.query)('category').optional().isString().trim().isLength({
  max: 50
}).withMessage('Invalid category'), (0, express_validator_1.query)('isLive').optional().isBoolean().withMessage('isLive must be a boolean'), (0, express_validator_1.query)('sortBy').optional().isIn(['relevance', 'popularity', 'date']).withMessage('Invalid sort option'), (0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 50
}).withMessage('Limit must be between 1 and 50'), (0, express_validator_1.query)('offset').optional().isInt({
  min: 0
}).withMessage('Offset must be a non-negative integer')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[5]++;
  cov_1sp9p6sl6k().s[50]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[51]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[52]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1sp9p6sl6k().b[18][0]++;
      cov_1sp9p6sl6k().s[53]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sp9p6sl6k().b[18][1]++;
    }
    const {
      q: query,
      category,
      isLive,
      sortBy,
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[19][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[20][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[54]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[55]++, {
      type: 'streams',
      category: category,
      isLive: isLive === 'true' ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[21][0]++, true) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[21][1]++, isLive === 'false' ?
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[22][0]++, false) :
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[22][1]++, undefined)),
      sortBy: sortBy,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    const results =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[56]++, await SearchService_1.searchService.search(query, filters));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[57]++;
    res.json({
      success: true,
      data: {
        query,
        streams: results.streams,
        pagination: {
          limit: filters.limit,
          offset: filters.offset,
          total: results.streams.length,
          hasMore: results.streams.length === filters.limit
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[58]++;
    logger_1.logger.error('Stream search failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[59]++;
    res.status(500).json({
      success: false,
      error: 'Stream search failed'
    });
  }
});
// Search reels specifically
/* istanbul ignore next */
cov_1sp9p6sl6k().s[60]++;
router.get('/reels', [(0, express_validator_1.query)('q').isString().trim().isLength({
  min: 1,
  max: 100
}).withMessage('Search query is required'), (0, express_validator_1.query)('category').optional().isString().trim().isLength({
  max: 50
}).withMessage('Invalid category'), (0, express_validator_1.query)('dateRange').optional().isIn(['today', 'week', 'month', 'year', 'all']).withMessage('Invalid date range'), (0, express_validator_1.query)('sortBy').optional().isIn(['relevance', 'popularity', 'date']).withMessage('Invalid sort option'), (0, express_validator_1.query)('limit').optional().isInt({
  min: 1,
  max: 50
}).withMessage('Limit must be between 1 and 50'), (0, express_validator_1.query)('offset').optional().isInt({
  min: 0
}).withMessage('Offset must be a non-negative integer')], async (req, res) => {
  /* istanbul ignore next */
  cov_1sp9p6sl6k().f[6]++;
  cov_1sp9p6sl6k().s[61]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[62]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[63]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1sp9p6sl6k().b[23][0]++;
      cov_1sp9p6sl6k().s[64]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1sp9p6sl6k().b[23][1]++;
    }
    const {
      q: query,
      category,
      dateRange,
      sortBy,
      limit =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[24][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1sp9p6sl6k().b[25][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[65]++, req.query);
    const filters =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[66]++, {
      type: 'reels',
      category: category,
      dateRange: dateRange,
      sortBy: sortBy,
      limit: parseInt(limit),
      offset: parseInt(offset)
    });
    const results =
    /* istanbul ignore next */
    (cov_1sp9p6sl6k().s[67]++, await SearchService_1.searchService.search(query, filters));
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[68]++;
    res.json({
      success: true,
      data: {
        query,
        reels: results.reels,
        pagination: {
          limit: filters.limit,
          offset: filters.offset,
          total: results.reels.length,
          hasMore: results.reels.length === filters.limit
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[69]++;
    logger_1.logger.error('Reel search failed:', error);
    /* istanbul ignore next */
    cov_1sp9p6sl6k().s[70]++;
    res.status(500).json({
      success: false,
      error: 'Reel search failed'
    });
  }
});
/* istanbul ignore next */
cov_1sp9p6sl6k().s[71]++;
exports.default = router;