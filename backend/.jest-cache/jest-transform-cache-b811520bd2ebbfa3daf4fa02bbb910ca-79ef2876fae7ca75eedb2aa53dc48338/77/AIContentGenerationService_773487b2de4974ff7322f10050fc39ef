a5bab77357d738346e4e8a4dc993efdf
"use strict";

/* istanbul ignore next */
function cov_12yklqtn4p() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\AIContentGenerationService.ts";
  var hash = "09e0617cef31962a672001301ff99f2b2208dbb1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\AIContentGenerationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 44
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 30
        }
      },
      "8": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "9": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 59
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 55
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 11
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "13": {
        start: {
          line: 28,
          column: 30
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 114
        }
      },
      "15": {
        start: {
          line: 31,
          column: 35
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "16": {
        start: {
          line: 57,
          column: 30
        },
        end: {
          line: 57,
          column: 91
        }
      },
      "17": {
        start: {
          line: 59,
          column: 38
        },
        end: {
          line: 65,
          column: 14
        }
      },
      "18": {
        start: {
          line: 66,
          column: 30
        },
        end: {
          line: 66,
          column: 87
        }
      },
      "19": {
        start: {
          line: 68,
          column: 33
        },
        end: {
          line: 68,
          column: 140
        }
      },
      "20": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 128
        }
      },
      "21": {
        start: {
          line: 71,
          column: 35
        },
        end: {
          line: 71,
          column: 57
        }
      },
      "22": {
        start: {
          line: 72,
          column: 25
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "23": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 105
        }
      },
      "24": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 86,
          column: 14
        }
      },
      "25": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 72
        }
      },
      "26": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "27": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "28": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 81
        }
      },
      "29": {
        start: {
          line: 96,
          column: 38
        },
        end: {
          line: 102,
          column: 14
        }
      },
      "30": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 103,
          column: 68
        }
      },
      "31": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 142
        }
      },
      "32": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 89
        }
      },
      "33": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 32
        }
      },
      "34": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 76
        }
      },
      "35": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 63
        }
      },
      "36": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "37": {
        start: {
          line: 115,
          column: 30
        },
        end: {
          line: 115,
          column: 40
        }
      },
      "38": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 114
        }
      },
      "39": {
        start: {
          line: 118,
          column: 34
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "40": {
        start: {
          line: 145,
          column: 37
        },
        end: {
          line: 145,
          column: 97
        }
      },
      "41": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 146,
          column: 87
        }
      },
      "42": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 135
        }
      },
      "43": {
        start: {
          line: 148,
          column: 35
        },
        end: {
          line: 148,
          column: 57
        }
      },
      "44": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 68
        }
      },
      "45": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 105
        }
      },
      "46": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 162,
          column: 14
        }
      },
      "47": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 72
        }
      },
      "48": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 59
        }
      },
      "49": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "50": {
        start: {
          line: 171,
          column: 30
        },
        end: {
          line: 171,
          column: 40
        }
      },
      "51": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 84
        }
      },
      "52": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "53": {
        start: {
          line: 176,
          column: 50
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "54": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "55": {
        start: {
          line: 188,
          column: 31
        },
        end: {
          line: 188,
          column: 133
        }
      },
      "56": {
        start: {
          line: 189,
          column: 35
        },
        end: {
          line: 189,
          column: 57
        }
      },
      "57": {
        start: {
          line: 190,
          column: 25
        },
        end: {
          line: 190,
          column: 72
        }
      },
      "58": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 109
        }
      },
      "59": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 203,
          column: 14
        }
      },
      "60": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 75
        }
      },
      "61": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 63
        }
      },
      "62": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "63": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 54
        }
      },
      "64": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 219,
          column: 16
        }
      },
      "65": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 140
        }
      },
      "66": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 62
        }
      },
      "67": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 52
        }
      },
      "68": {
        start: {
          line: 229,
          column: 30
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "69": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 68
        }
      },
      "70": {
        start: {
          line: 238,
          column: 0
        },
        end: {
          line: 238,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 45
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 113
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 48
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 169
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 176,
            column: 41
          },
          end: {
            line: 176,
            column: 42
          }
        },
        loc: {
          start: {
            line: 176,
            column: 50
          },
          end: {
            line: 184,
            column: 17
          }
        },
        line: 176
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 45
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 210
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 47
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 228
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 49
          }
        }, {
          start: {
            line: 16,
            column: 53
          },
          end: {
            line: 16,
            column: 59
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 41
          }
        }, {
          start: {
            line: 19,
            column: 45
          },
          end: {
            line: 19,
            column: 56
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 21,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 21,
            column: 54
          }
        }, {
          start: {
            line: 21,
            column: 58
          },
          end: {
            line: 21,
            column: 60
          }
        }],
        line: 21
      },
      "6": {
        loc: {
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 33
          },
          end: {
            line: 22,
            column: 58
          }
        }, {
          start: {
            line: 22,
            column: 62
          },
          end: {
            line: 22,
            column: 64
          }
        }],
        line: 22
      },
      "7": {
        loc: {
          start: {
            line: 49,
            column: 21
          },
          end: {
            line: 49,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 21
          },
          end: {
            line: 49,
            column: 34
          }
        }, {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 49
          }
        }],
        line: 49
      },
      "8": {
        loc: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 50,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 50,
            column: 40
          }
        }, {
          start: {
            line: 50,
            column: 44
          },
          end: {
            line: 50,
            column: 46
          }
        }],
        line: 50
      },
      "9": {
        loc: {
          start: {
            line: 57,
            column: 41
          },
          end: {
            line: 57,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 41
          },
          end: {
            line: 57,
            column: 82
          }
        }, {
          start: {
            line: 57,
            column: 86
          },
          end: {
            line: 57,
            column: 90
          }
        }],
        line: 57
      },
      "10": {
        loc: {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 89
          }
        }, {
          start: {
            line: 68,
            column: 93
          },
          end: {
            line: 68,
            column: 95
          }
        }],
        line: 68
      },
      "11": {
        loc: {
          start: {
            line: 79,
            column: 30
          },
          end: {
            line: 79,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 30
          },
          end: {
            line: 79,
            column: 46
          }
        }, {
          start: {
            line: 79,
            column: 50
          },
          end: {
            line: 79,
            column: 52
          }
        }],
        line: 79
      },
      "12": {
        loc: {
          start: {
            line: 104,
            column: 55
          },
          end: {
            line: 104,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 55
          },
          end: {
            line: 104,
            column: 89
          }
        }, {
          start: {
            line: 104,
            column: 93
          },
          end: {
            line: 104,
            column: 95
          }
        }],
        line: 104
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 21
          },
          end: {
            line: 137,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 21
          },
          end: {
            line: 137,
            column: 34
          }
        }, {
          start: {
            line: 137,
            column: 38
          },
          end: {
            line: 137,
            column: 46
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 40
          }
        }, {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 138,
            column: 46
          }
        }],
        line: 138
      },
      "15": {
        loc: {
          start: {
            line: 145,
            column: 48
          },
          end: {
            line: 145,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 48
          },
          end: {
            line: 145,
            column: 88
          }
        }, {
          start: {
            line: 145,
            column: 92
          },
          end: {
            line: 145,
            column: 96
          }
        }],
        line: 145
      },
      "16": {
        loc: {
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 46
          }
        }, {
          start: {
            line: 155,
            column: 50
          },
          end: {
            line: 155,
            column: 52
          }
        }],
        line: 155
      },
      "17": {
        loc: {
          start: {
            line: 214,
            column: 24
          },
          end: {
            line: 214,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 24
          },
          end: {
            line: 214,
            column: 45
          }
        }, {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 67
          }
        }],
        line: 214
      },
      "18": {
        loc: {
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 51
          }
        }, {
          start: {
            line: 220,
            column: 55
          },
          end: {
            line: 220,
            column: 73
          }
        }],
        line: 220
      },
      "19": {
        loc: {
          start: {
            line: 220,
            column: 80
          },
          end: {
            line: 220,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 80
          },
          end: {
            line: 220,
            column: 101
          }
        }, {
          start: {
            line: 220,
            column: 105
          },
          end: {
            line: 220,
            column: 116
          }
        }],
        line: 220
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09e0617cef31962a672001301ff99f2b2208dbb1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12yklqtn4p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12yklqtn4p();
var __importDefault =
/* istanbul ignore next */
(cov_12yklqtn4p().s[0]++,
/* istanbul ignore next */
(cov_12yklqtn4p().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_12yklqtn4p().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_12yklqtn4p().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_12yklqtn4p().f[0]++;
  cov_12yklqtn4p().s[1]++;
  return /* istanbul ignore next */(cov_12yklqtn4p().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_12yklqtn4p().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_12yklqtn4p().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_12yklqtn4p().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_12yklqtn4p().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_12yklqtn4p().s[3]++;
exports.AIContentGenerationService = void 0;
const openai_1 =
/* istanbul ignore next */
(cov_12yklqtn4p().s[4]++, __importDefault(require("openai")));
const client_s3_1 =
/* istanbul ignore next */
(cov_12yklqtn4p().s[5]++, require("@aws-sdk/client-s3"));
const logger_1 =
/* istanbul ignore next */
(cov_12yklqtn4p().s[6]++, require("../config/logger"));
const uuid_1 =
/* istanbul ignore next */
(cov_12yklqtn4p().s[7]++, require("uuid"));
class AIContentGenerationService {
  openai;
  s3Client;
  contentQueue =
  /* istanbul ignore next */
  (cov_12yklqtn4p().s[8]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[1]++;
    const apiKey =
    /* istanbul ignore next */
    (cov_12yklqtn4p().s[9]++,
    /* istanbul ignore next */
    (cov_12yklqtn4p().b[3][0]++, process.env.OPENAI_API_KEY) ||
    /* istanbul ignore next */
    (cov_12yklqtn4p().b[3][1]++, 'test'));
    /* istanbul ignore next */
    cov_12yklqtn4p().s[10]++;
    this.openai = new openai_1.default({
      apiKey
    });
    /* istanbul ignore next */
    cov_12yklqtn4p().s[11]++;
    this.s3Client = new client_s3_1.S3Client({
      region:
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[4][0]++, process.env.S3_REGION) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[4][1]++, 'us-east-1'),
      credentials: {
        accessKeyId:
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[5][0]++, process.env.S3_ACCESS_KEY) ||
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[5][1]++, ''),
        secretAccessKey:
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[6][0]++, process.env.S3_SECRET_KEY) ||
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[6][1]++, '')
      }
    });
  }
  async generateVideo(request) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[2]++;
    cov_12yklqtn4p().s[12]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[13]++, Date.now());
      /* istanbul ignore next */
      cov_12yklqtn4p().s[14]++;
      logger_1.logger.info('Generating AI video', {
        prompt: request.prompt,
        creatorId: request.creatorId
      });
      // Generate video script and production plan using GPT-4
      const scriptResponse =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[15]++, await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{
          role: 'system',
          content: `You are a professional video producer. Create a comprehensive video production plan including:
            - Detailed script with opening hook, main content, and conclusion
            - Scene breakdown with visual elements
            - Audio requirements (background music, sound effects, voice-over)
            - Pacing and timing recommendations
            - Call-to-action integration
            
            Format as JSON with detailed specifications.`
        }, {
          role: 'user',
          content: `Create a video production plan for: ${request.prompt}
            
            Style: ${
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[7][0]++, request.style) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[7][1]++, 'cinematic')}
            Duration: ${
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[8][0]++, request.duration) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[8][1]++, 30)} seconds
            Target audience: General audience`
        }],
        temperature: 0.7,
        max_tokens: 1000
      }));
      const videoPlan =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[16]++, JSON.parse(
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[9][0]++, scriptResponse.choices[0].message.content) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[9][1]++, '{}')));
      // Generate thumbnail using DALL-E
      const thumbnailResponse =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[17]++, await this.openai.images.generate({
        model: 'dall-e-3',
        prompt: `Create an eye-catching thumbnail for a video about: ${request.prompt}`,
        size: '1024x1024',
        quality: 'hd',
        style: 'vivid'
      }));
      const contentId =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[18]++, `ai_video_${Date.now()}_${(0, uuid_1.v4)().substr(0, 8)}`);
      // Upload thumbnail to S3
      const thumbnailUrl =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[19]++, await this.uploadToS3(
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[10][0]++, thumbnailResponse.data[0].b64_json) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[10][1]++, ''), `thumbnails/${contentId}.png`, 'image/png'));
      // Store video plan as content (in real implementation, this would generate actual video)
      const contentUrl =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[20]++, await this.uploadToS3(JSON.stringify(videoPlan), `content/${contentId}.json`, 'application/json'));
      const processingTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[21]++, Date.now() - startTime);
      const cost =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[22]++, this.calculateCost('video', processingTime));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[23]++;
      logger_1.logger.info('AI video generated successfully', {
        contentId,
        processingTime,
        cost
      });
      /* istanbul ignore next */
      cov_12yklqtn4p().s[24]++;
      return {
        contentId,
        contentUrl,
        thumbnailUrl,
        metadata: {
          duration:
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[11][0]++, request.duration) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[11][1]++, 30),
          size: JSON.stringify(videoPlan).length,
          format: 'json',
          quality: 'hd'
        },
        processingTime,
        cost
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[25]++;
      logger_1.logger.error('AI video generation failed:', error);
      /* istanbul ignore next */
      cov_12yklqtn4p().s[26]++;
      throw new Error('Failed to generate AI video');
    }
  }
  async generateThumbnail(videoId, prompt) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[3]++;
    cov_12yklqtn4p().s[27]++;
    try {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[28]++;
      logger_1.logger.info('Generating AI thumbnail', {
        videoId,
        prompt
      });
      const thumbnailResponse =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[29]++, await this.openai.images.generate({
        model: 'dall-e-3',
        prompt: `Create an eye-catching thumbnail for a video about: ${prompt}`,
        size: '1024x1024',
        quality: 'hd',
        style: 'vivid'
      }));
      const thumbnailId =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[30]++, `thumbnail_${videoId}_${Date.now()}`);
      const thumbnailUrl =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[31]++, await this.uploadToS3(
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[12][0]++, thumbnailResponse.data[0].b64_json) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[12][1]++, ''), `thumbnails/${thumbnailId}.png`, 'image/png'));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[32]++;
      logger_1.logger.info('AI thumbnail generated successfully', {
        thumbnailId
      });
      /* istanbul ignore next */
      cov_12yklqtn4p().s[33]++;
      return thumbnailUrl;
    } catch (error) {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[34]++;
      logger_1.logger.error('AI thumbnail generation failed:', error);
      /* istanbul ignore next */
      cov_12yklqtn4p().s[35]++;
      throw new Error('Failed to generate AI thumbnail');
    }
  }
  async generateMusic(request) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[4]++;
    cov_12yklqtn4p().s[36]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[37]++, Date.now());
      /* istanbul ignore next */
      cov_12yklqtn4p().s[38]++;
      logger_1.logger.info('Generating AI music', {
        prompt: request.prompt,
        creatorId: request.creatorId
      });
      // Generate music composition using GPT-4
      const musicResponse =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[39]++, await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages: [{
          role: 'system',
          content: `You are a professional music composer. Create a detailed musical composition including:
            - Melody structure and progression
            - Chord progression and harmony
            - Rhythm and tempo variations
            - Instrumentation and arrangement
            - Dynamic changes and expression
            - Musical form (intro, verse, chorus, bridge, outro)
            
            Format as JSON with musical specifications.`
        }, {
          role: 'user',
          content: `Compose music for: ${request.prompt}
            
            Style: ${
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[13][0]++, request.style) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[13][1]++, 'modern')}
            Duration: ${
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[14][0]++, request.duration) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[14][1]++, 30)} seconds
            Mood: upbeat and energetic`
        }],
        temperature: 0.8,
        max_tokens: 800
      }));
      const musicComposition =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[40]++, JSON.parse(
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[15][0]++, musicResponse.choices[0].message.content) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[15][1]++, '{}')));
      const contentId =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[41]++, `ai_music_${Date.now()}_${(0, uuid_1.v4)().substr(0, 8)}`);
      const contentUrl =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[42]++, await this.uploadToS3(JSON.stringify(musicComposition), `content/${contentId}.json`, 'application/json'));
      const processingTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[43]++, Date.now() - startTime);
      const cost =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[44]++, this.calculateCost('music', processingTime));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[45]++;
      logger_1.logger.info('AI music generated successfully', {
        contentId,
        processingTime,
        cost
      });
      /* istanbul ignore next */
      cov_12yklqtn4p().s[46]++;
      return {
        contentId,
        contentUrl,
        metadata: {
          duration:
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[16][0]++, request.duration) ||
          /* istanbul ignore next */
          (cov_12yklqtn4p().b[16][1]++, 30),
          size: JSON.stringify(musicComposition).length,
          format: 'json',
          quality: 'high'
        },
        processingTime,
        cost
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[47]++;
      logger_1.logger.error('AI music generation failed:', error);
      /* istanbul ignore next */
      cov_12yklqtn4p().s[48]++;
      throw new Error('Failed to generate AI music');
    }
  }
  async generateSubtitles(videoId, languages) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[5]++;
    cov_12yklqtn4p().s[49]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[50]++, Date.now());
      /* istanbul ignore next */
      cov_12yklqtn4p().s[51]++;
      logger_1.logger.info('Generating AI subtitles', {
        videoId,
        languages
      });
      // Simulate subtitle generation (in real implementation, would use Whisper)
      const subtitleData =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[52]++, {
        videoId,
        languages: languages.map(lang => {
          /* istanbul ignore next */
          cov_12yklqtn4p().f[6]++;
          cov_12yklqtn4p().s[53]++;
          return {
            language: lang,
            content: `Generated subtitles for ${lang} language`,
            timestamps: [{
              start: 0,
              end: 5,
              text: 'Welcome to our video'
            }, {
              start: 5,
              end: 10,
              text: 'This is the main content'
            }, {
              start: 10,
              end: 15,
              text: 'Thank you for watching'
            }]
          };
        }),
        generatedAt: new Date().toISOString()
      });
      const contentId =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[54]++, `subtitles_${videoId}_${Date.now()}`);
      const contentUrl =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[55]++, await this.uploadToS3(JSON.stringify(subtitleData), `subtitles/${contentId}.json`, 'application/json'));
      const processingTime =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[56]++, Date.now() - startTime);
      const cost =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[57]++, this.calculateCost('subtitles', processingTime));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[58]++;
      logger_1.logger.info('AI subtitles generated successfully', {
        contentId,
        processingTime,
        cost
      });
      /* istanbul ignore next */
      cov_12yklqtn4p().s[59]++;
      return {
        contentId,
        contentUrl,
        metadata: {
          duration: 0,
          size: JSON.stringify(subtitleData).length,
          format: 'json',
          quality: 'high'
        },
        processingTime,
        cost
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[60]++;
      logger_1.logger.error('AI subtitle generation failed:', error);
      /* istanbul ignore next */
      cov_12yklqtn4p().s[61]++;
      throw new Error('Failed to generate AI subtitles');
    }
  }
  async uploadToS3(data, key, contentType) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[7]++;
    cov_12yklqtn4p().s[62]++;
    try {
      const buffer =
      /* istanbul ignore next */
      (cov_12yklqtn4p().s[63]++, Buffer.from(data, 'base64'));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[64]++;
      await this.s3Client.send(new client_s3_1.PutObjectCommand({
        Bucket:
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[17][0]++, process.env.S3_BUCKET) ||
        /* istanbul ignore next */
        (cov_12yklqtn4p().b[17][1]++, 'halobuzz-content'),
        Key: key,
        Body: buffer,
        ContentType: contentType,
        ACL: 'public-read'
      }));
      /* istanbul ignore next */
      cov_12yklqtn4p().s[65]++;
      return `https://${
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[18][0]++, process.env.S3_BUCKET) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[18][1]++, 'halobuzz-content')}.s3.${
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[19][0]++, process.env.S3_REGION) ||
      /* istanbul ignore next */
      (cov_12yklqtn4p().b[19][1]++, 'us-east-1')}.amazonaws.com/${key}`;
    } catch (error) {
      /* istanbul ignore next */
      cov_12yklqtn4p().s[66]++;
      logger_1.logger.error('S3 upload failed:', error);
      // Return a placeholder URL for development
      /* istanbul ignore next */
      cov_12yklqtn4p().s[67]++;
      return `https://placeholder.com/${key}`;
    }
  }
  calculateCost(contentType, processingTime) {
    /* istanbul ignore next */
    cov_12yklqtn4p().f[8]++;
    const costPerSecond =
    /* istanbul ignore next */
    (cov_12yklqtn4p().s[68]++, {
      video: 0.10,
      music: 0.05,
      thumbnail: 0.02,
      subtitles: 0.01
    });
    /* istanbul ignore next */
    cov_12yklqtn4p().s[69]++;
    return costPerSecond[contentType] * (processingTime / 1000);
  }
}
/* istanbul ignore next */
cov_12yklqtn4p().s[70]++;
exports.AIContentGenerationService = AIContentGenerationService;