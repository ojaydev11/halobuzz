aa4bb5ce9a3c64890174d91626f3c8e8
"use strict";

/* istanbul ignore next */
function cov_11rw7yp97x() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\subscription.ts";
  var hash = "c34da037a4459aa029566053b909cbd5a6cef7a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\subscription.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 102
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "11": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "12": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "14": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "15": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "17": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "18": {
        start: {
          line: 31,
          column: 21
        },
        end: {
          line: 31,
          column: 90
        }
      },
      "19": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "21": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 74
        }
      },
      "22": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "23": {
        start: {
          line: 60,
          column: 0
        },
        end: {
          line: 76,
          column: 3
        }
      },
      "24": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "25": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 62,
          column: 40
        }
      },
      "26": {
        start: {
          line: 63,
          column: 22
        },
        end: {
          line: 63,
          column: 74
        }
      },
      "27": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 67,
          column: 11
        }
      },
      "28": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 69
        }
      },
      "29": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "30": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "31": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "32": {
        start: {
          line: 84,
          column: 53
        },
        end: {
          line: 84,
          column: 61
        }
      },
      "33": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 40
        }
      },
      "34": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "35": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "36": {
        start: {
          line: 92,
          column: 29
        },
        end: {
          line: 92,
          column: 116
        }
      },
      "37": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "39": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 64
        }
      },
      "40": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "41": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 154,
          column: 3
        }
      },
      "42": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "43": {
        start: {
          line: 123,
          column: 35
        },
        end: {
          line: 123,
          column: 45
        }
      },
      "44": {
        start: {
          line: 124,
          column: 27
        },
        end: {
          line: 124,
          column: 35
        }
      },
      "45": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 34
        }
      },
      "46": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 92
        }
      },
      "47": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "48": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "49": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "50": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "51": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 71
        }
      },
      "52": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 152,
          column: 11
        }
      },
      "53": {
        start: {
          line: 160,
          column: 0
        },
        end: {
          line: 184,
          column: 3
        }
      },
      "54": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "55": {
        start: {
          line: 162,
          column: 27
        },
        end: {
          line: 162,
          column: 37
        }
      },
      "56": {
        start: {
          line: 163,
          column: 33
        },
        end: {
          line: 163,
          column: 44
        }
      },
      "57": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "58": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "59": {
        start: {
          line: 171,
          column: 30
        },
        end: {
          line: 171,
          column: 84
        }
      },
      "60": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "61": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 74
        }
      },
      "62": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "63": {
        start: {
          line: 190,
          column: 0
        },
        end: {
          line: 214,
          column: 3
        }
      },
      "64": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "65": {
        start: {
          line: 192,
          column: 30
        },
        end: {
          line: 192,
          column: 40
        }
      },
      "66": {
        start: {
          line: 193,
          column: 33
        },
        end: {
          line: 193,
          column: 44
        }
      },
      "67": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "68": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "69": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 84
        }
      },
      "70": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "71": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 76
        }
      },
      "72": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 11
        }
      },
      "73": {
        start: {
          line: 220,
          column: 0
        },
        end: {
          line: 256,
          column: 3
        }
      },
      "74": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "75": {
        start: {
          line: 222,
          column: 36
        },
        end: {
          line: 222,
          column: 44
        }
      },
      "76": {
        start: {
          line: 223,
          column: 26
        },
        end: {
          line: 223,
          column: 37
        }
      },
      "77": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "78": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "79": {
        start: {
          line: 230,
          column: 33
        },
        end: {
          line: 233,
          column: 10
        }
      },
      "80": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "81": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "82": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 76
        }
      },
      "83": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "84": {
        start: {
          line: 262,
          column: 0
        },
        end: {
          line: 287,
          column: 3
        }
      },
      "85": {
        start: {
          line: 263,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "86": {
        start: {
          line: 264,
          column: 30
        },
        end: {
          line: 264,
          column: 40
        }
      },
      "87": {
        start: {
          line: 265,
          column: 43
        },
        end: {
          line: 265,
          column: 52
        }
      },
      "88": {
        start: {
          line: 266,
          column: 33
        },
        end: {
          line: 266,
          column: 44
        }
      },
      "89": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "90": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 272,
          column: 15
        }
      },
      "91": {
        start: {
          line: 274,
          column: 25
        },
        end: {
          line: 274,
          column: 88
        }
      },
      "92": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 278,
          column: 11
        }
      },
      "93": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 72
        }
      },
      "94": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 285,
          column: 11
        }
      },
      "95": {
        start: {
          line: 293,
          column: 0
        },
        end: {
          line: 314,
          column: 3
        }
      },
      "96": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "97": {
        start: {
          line: 295,
          column: 27
        },
        end: {
          line: 295,
          column: 37
        }
      },
      "98": {
        start: {
          line: 296,
          column: 24
        },
        end: {
          line: 296,
          column: 32
        }
      },
      "99": {
        start: {
          line: 297,
          column: 26
        },
        end: {
          line: 297,
          column: 37
        }
      },
      "100": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "101": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 74
        }
      },
      "102": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "103": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 340,
          column: 3
        }
      },
      "104": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 339,
          column: 5
        }
      },
      "105": {
        start: {
          line: 322,
          column: 27
        },
        end: {
          line: 322,
          column: 37
        }
      },
      "106": {
        start: {
          line: 323,
          column: 26
        },
        end: {
          line: 323,
          column: 37
        }
      },
      "107": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 331,
          column: 11
        }
      },
      "108": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 74
        }
      },
      "109": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 338,
          column: 11
        }
      },
      "110": {
        start: {
          line: 346,
          column: 0
        },
        end: {
          line: 366,
          column: 3
        }
      },
      "111": {
        start: {
          line: 347,
          column: 4
        },
        end: {
          line: 365,
          column: 5
        }
      },
      "112": {
        start: {
          line: 348,
          column: 30
        },
        end: {
          line: 348,
          column: 40
        }
      },
      "113": {
        start: {
          line: 349,
          column: 23
        },
        end: {
          line: 349,
          column: 34
        }
      },
      "114": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "115": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 73
        }
      },
      "116": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 364,
          column: 11
        }
      },
      "117": {
        start: {
          line: 372,
          column: 0
        },
        end: {
          line: 397,
          column: 3
        }
      },
      "118": {
        start: {
          line: 373,
          column: 4
        },
        end: {
          line: 396,
          column: 5
        }
      },
      "119": {
        start: {
          line: 374,
          column: 30
        },
        end: {
          line: 374,
          column: 40
        }
      },
      "120": {
        start: {
          line: 375,
          column: 41
        },
        end: {
          line: 375,
          column: 50
        }
      },
      "121": {
        start: {
          line: 376,
          column: 23
        },
        end: {
          line: 376,
          column: 34
        }
      },
      "122": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 388,
          column: 11
        }
      },
      "123": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 391,
          column: 71
        }
      },
      "124": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 395,
          column: 11
        }
      },
      "125": {
        start: {
          line: 403,
          column: 0
        },
        end: {
          line: 424,
          column: 3
        }
      },
      "126": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 423,
          column: 5
        }
      },
      "127": {
        start: {
          line: 406,
          column: 22
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "128": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 415,
          column: 11
        }
      },
      "129": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 418,
          column: 81
        }
      },
      "130": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 422,
          column: 11
        }
      },
      "131": {
        start: {
          line: 425,
          column: 0
        },
        end: {
          line: 425,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 22
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 40
          },
          end: {
            line: 60,
            column: 41
          }
        },
        loc: {
          start: {
            line: 60,
            column: 60
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 26
          },
          end: {
            line: 82,
            column: 27
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 121,
            column: 39
          },
          end: {
            line: 121,
            column: 40
          }
        },
        loc: {
          start: {
            line: 121,
            column: 59
          },
          end: {
            line: 154,
            column: 1
          }
        },
        line: 121
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 160,
            column: 42
          },
          end: {
            line: 160,
            column: 43
          }
        },
        loc: {
          start: {
            line: 160,
            column: 62
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 160
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 190,
            column: 44
          },
          end: {
            line: 190,
            column: 45
          }
        },
        loc: {
          start: {
            line: 190,
            column: 64
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 190
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 220,
            column: 34
          },
          end: {
            line: 220,
            column: 35
          }
        },
        loc: {
          start: {
            line: 220,
            column: 54
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 220
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 262,
            column: 43
          },
          end: {
            line: 262,
            column: 44
          }
        },
        loc: {
          start: {
            line: 262,
            column: 63
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 262
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 293,
            column: 28
          },
          end: {
            line: 293,
            column: 29
          }
        },
        loc: {
          start: {
            line: 293,
            column: 48
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 293
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 320,
            column: 31
          },
          end: {
            line: 320,
            column: 32
          }
        },
        loc: {
          start: {
            line: 320,
            column: 51
          },
          end: {
            line: 340,
            column: 1
          }
        },
        line: 320
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 346,
            column: 34
          },
          end: {
            line: 346,
            column: 35
          }
        },
        loc: {
          start: {
            line: 346,
            column: 54
          },
          end: {
            line: 366,
            column: 1
          }
        },
        line: 346
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 372,
            column: 42
          },
          end: {
            line: 372,
            column: 43
          }
        },
        loc: {
          start: {
            line: 372,
            column: 62
          },
          end: {
            line: 397,
            column: 1
          }
        },
        line: 372
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 403,
            column: 28
          },
          end: {
            line: 403,
            column: 29
          }
        },
        loc: {
          start: {
            line: 403,
            column: 48
          },
          end: {
            line: 424,
            column: 1
          }
        },
        line: 403
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 26
          }
        }, {
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 45
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 22
          }
        }, {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 33
          }
        }, {
          start: {
            line: 86,
            column: 37
          },
          end: {
            line: 86,
            column: 51
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 112,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 19
          },
          end: {
            line: 112,
            column: 32
          }
        }, {
          start: {
            line: 112,
            column: 36
          },
          end: {
            line: 112,
            column: 67
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "9": {
        loc: {
          start: {
            line: 151,
            column: 19
          },
          end: {
            line: 151,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 19
          },
          end: {
            line: 151,
            column: 32
          }
        }, {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 151,
            column: 67
          }
        }],
        line: 151
      },
      "10": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "11": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "12": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "13": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 19
          }
        }, {
          start: {
            line: 224,
            column: 23
          },
          end: {
            line: 224,
            column: 31
          }
        }],
        line: 224
      },
      "14": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 265,
            column: 28
          },
          end: {
            line: 265,
            column: 38
          }
        }],
        line: 265
      },
      "15": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "16": {
        loc: {
          start: {
            line: 375,
            column: 16
          },
          end: {
            line: 375,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 375,
            column: 23
          },
          end: {
            line: 375,
            column: 24
          }
        }],
        line: 375
      },
      "17": {
        loc: {
          start: {
            line: 375,
            column: 26
          },
          end: {
            line: 375,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 375,
            column: 34
          },
          end: {
            line: 375,
            column: 36
          }
        }],
        line: 375
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0],
      "17": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c34da037a4459aa029566053b909cbd5a6cef7a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11rw7yp97x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11rw7yp97x();
var __importDefault =
/* istanbul ignore next */
(cov_11rw7yp97x().s[0]++,
/* istanbul ignore next */
(cov_11rw7yp97x().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_11rw7yp97x().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_11rw7yp97x().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[0]++;
  cov_11rw7yp97x().s[1]++;
  return /* istanbul ignore next */(cov_11rw7yp97x().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_11rw7yp97x().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_11rw7yp97x().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_11rw7yp97x().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_11rw7yp97x().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_11rw7yp97x().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_11rw7yp97x().s[4]++, require("../middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_11rw7yp97x().s[5]++, require("../middleware/security"));
const SubscriptionService_1 =
/* istanbul ignore next */
(cov_11rw7yp97x().s[6]++, __importDefault(require("../services/subscription/SubscriptionService")));
const logger_1 =
/* istanbul ignore next */
(cov_11rw7yp97x().s[7]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_11rw7yp97x().s[8]++, express_1.default.Router());
const subscriptionService =
/* istanbul ignore next */
(cov_11rw7yp97x().s[9]++, SubscriptionService_1.default.getInstance());
// Apply middleware
/* istanbul ignore next */
cov_11rw7yp97x().s[10]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_11rw7yp97x().s[11]++;
router.use(security_1.socialLimiter);
/**
 * @route POST /api/subscription/tier
 * @desc Create a new subscription tier
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[12]++;
router.post('/tier', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[1]++;
  cov_11rw7yp97x().s[13]++;
  try {
    const creatorId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[14]++, req.user.id);
    const tierData =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[15]++, req.body);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[4][0]++, !tierData.name) ||
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[4][1]++, !tierData.price)) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[3][0]++;
      cov_11rw7yp97x().s[17]++;
      return res.status(400).json({
        success: false,
        error: 'Tier name and price are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[3][1]++;
    }
    const tier =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[18]++, await subscriptionService.createSubscriptionTier(creatorId, tierData));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[19]++;
    logger_1.logger.info('Subscription tier created', {
      tierId: tier.id,
      creatorId,
      name: tier.name,
      price: tier.price,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_11rw7yp97x().s[20]++;
    res.status(201).json({
      success: true,
      data: {
        tier,
        message: 'Subscription tier created successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[21]++;
    logger_1.logger.error('Error creating subscription tier:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[22]++;
    res.status(500).json({
      success: false,
      error: 'Failed to create subscription tier'
    });
  }
});
/**
 * @route GET /api/subscription/creator/:creatorId/tiers
 * @desc Get creator's subscription tiers
 * @access Public
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[23]++;
router.get('/creator/:creatorId/tiers', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[2]++;
  cov_11rw7yp97x().s[24]++;
  try {
    const {
      creatorId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[25]++, req.params);
    const tiers =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[26]++, await subscriptionService.getCreatorTiers(creatorId));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[27]++;
    res.json({
      success: true,
      data: {
        tiers
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[28]++;
    logger_1.logger.error('Error getting creator tiers:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[29]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get creator tiers'
    });
  }
});
/**
 * @route POST /api/subscription/subscribe
 * @desc Subscribe to a creator's tier
 * @access Private
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[30]++;
router.post('/subscribe', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[3]++;
  cov_11rw7yp97x().s[31]++;
  try {
    const {
      creatorId,
      tierId,
      paymentMethod
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[32]++, req.body);
    const subscriberId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[33]++, req.user.id);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[6][0]++, !creatorId) ||
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[6][1]++, !tierId) ||
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[6][2]++, !paymentMethod)) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[5][0]++;
      cov_11rw7yp97x().s[35]++;
      return res.status(400).json({
        success: false,
        error: 'creatorId, tierId, and paymentMethod are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[5][1]++;
    }
    const subscription =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[36]++, await subscriptionService.subscribeUser(subscriberId, creatorId, tierId, paymentMethod));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[37]++;
    logger_1.logger.info('User subscribed successfully', {
      subscriptionId: subscription.id,
      subscriberId,
      creatorId,
      tierId,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_11rw7yp97x().s[38]++;
    res.status(201).json({
      success: true,
      data: {
        subscription,
        message: 'Subscription created successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[39]++;
    logger_1.logger.error('Error subscribing user:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[40]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[7][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[7][1]++, 'Failed to create subscription')
    });
  }
});
/**
 * @route POST /api/subscription/:subscriptionId/cancel
 * @desc Cancel a subscription
 * @access Private
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[41]++;
router.post('/:subscriptionId/cancel', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[4]++;
  cov_11rw7yp97x().s[42]++;
  try {
    const {
      subscriptionId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[43]++, req.params);
    const {
      reason
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[44]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[45]++, req.user.id);
    const success =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[46]++, await subscriptionService.cancelSubscription(subscriptionId, reason));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[47]++;
    if (!success) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[8][0]++;
      cov_11rw7yp97x().s[48]++;
      return res.status(400).json({
        success: false,
        error: 'Failed to cancel subscription'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[8][1]++;
    }
    cov_11rw7yp97x().s[49]++;
    logger_1.logger.info('Subscription cancelled', {
      subscriptionId,
      userId,
      reason,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_11rw7yp97x().s[50]++;
    res.json({
      success: true,
      data: {
        subscriptionId,
        message: 'Subscription cancelled successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[51]++;
    logger_1.logger.error('Error cancelling subscription:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[52]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[9][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[9][1]++, 'Failed to cancel subscription')
    });
  }
});
/**
 * @route GET /api/subscription/user/:userId/subscriptions
 * @desc Get user's subscriptions
 * @access Private
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[53]++;
router.get('/user/:userId/subscriptions', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[5]++;
  cov_11rw7yp97x().s[54]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[55]++, req.params);
    const requestingUserId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[56]++, req.user.id);
    // Check if user is requesting their own subscriptions or has permission
    /* istanbul ignore next */
    cov_11rw7yp97x().s[57]++;
    if (userId !== requestingUserId) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[10][0]++;
      cov_11rw7yp97x().s[58]++;
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[10][1]++;
    }
    const subscriptions =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[59]++, await subscriptionService.getUserSubscriptions(userId));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[60]++;
    res.json({
      success: true,
      data: {
        subscriptions
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[61]++;
    logger_1.logger.error('Error getting user subscriptions:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[62]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get user subscriptions'
    });
  }
});
/**
 * @route GET /api/subscription/creator/:creatorId/analytics
 * @desc Get creator's subscriber analytics
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[63]++;
router.get('/creator/:creatorId/analytics', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[6]++;
  cov_11rw7yp97x().s[64]++;
  try {
    const {
      creatorId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[65]++, req.params);
    const requestingUserId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[66]++, req.user.id);
    // Check if user is requesting their own analytics or has permission
    /* istanbul ignore next */
    cov_11rw7yp97x().s[67]++;
    if (creatorId !== requestingUserId) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[11][0]++;
      cov_11rw7yp97x().s[68]++;
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[11][1]++;
    }
    const analytics =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[69]++, await subscriptionService.getSubscriberInsights(creatorId));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[70]++;
    res.json({
      success: true,
      data: {
        analytics
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[71]++;
    logger_1.logger.error('Error getting subscriber analytics:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get subscriber analytics'
    });
  }
});
/**
 * @route POST /api/subscription/content/exclusive
 * @desc Deliver exclusive content to subscribers
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[73]++;
router.post('/content/exclusive', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[7]++;
  cov_11rw7yp97x().s[74]++;
  try {
    const {
      tierId,
      content
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[75]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[76]++, req.user.id);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[13][0]++, !tierId) ||
    /* istanbul ignore next */
    (cov_11rw7yp97x().b[13][1]++, !content)) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[12][0]++;
      cov_11rw7yp97x().s[78]++;
      return res.status(400).json({
        success: false,
        error: 'tierId and content are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[12][1]++;
    }
    const exclusiveContent =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[79]++, await subscriptionService.deliverExclusiveContent(tierId, {
      ...content,
      creatorId
    }));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[80]++;
    logger_1.logger.info('Exclusive content delivered', {
      contentId: exclusiveContent.id,
      tierId,
      creatorId,
      contentType: content.contentType,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_11rw7yp97x().s[81]++;
    res.status(201).json({
      success: true,
      data: {
        content: exclusiveContent,
        message: 'Exclusive content delivered successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[82]++;
    logger_1.logger.error('Error delivering exclusive content:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[83]++;
    res.status(500).json({
      success: false,
      error: 'Failed to deliver exclusive content'
    });
  }
});
/**
 * @route GET /api/subscription/creator/:creatorId/forecast
 * @desc Get revenue forecast for creator
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[84]++;
router.get('/creator/:creatorId/forecast', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[8]++;
  cov_11rw7yp97x().s[85]++;
  try {
    const {
      creatorId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[86]++, req.params);
    const {
      timeframe =
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[14][0]++, '12months')
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[87]++, req.query);
    const requestingUserId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[88]++, req.user.id);
    // Check if user is requesting their own forecast or has permission
    /* istanbul ignore next */
    cov_11rw7yp97x().s[89]++;
    if (creatorId !== requestingUserId) {
      /* istanbul ignore next */
      cov_11rw7yp97x().b[15][0]++;
      cov_11rw7yp97x().s[90]++;
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    } else
    /* istanbul ignore next */
    {
      cov_11rw7yp97x().b[15][1]++;
    }
    const forecast =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[91]++, await subscriptionService.forecastRevenue(creatorId, timeframe));
    /* istanbul ignore next */
    cov_11rw7yp97x().s[92]++;
    res.json({
      success: true,
      data: {
        forecast
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[93]++;
    logger_1.logger.error('Error getting revenue forecast:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[94]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get revenue forecast'
    });
  }
});
/**
 * @route PUT /api/subscription/tier/:tierId
 * @desc Update subscription tier
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[95]++;
router.put('/tier/:tierId', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[9]++;
  cov_11rw7yp97x().s[96]++;
  try {
    const {
      tierId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[97]++, req.params);
    const updates =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[98]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[99]++, req.user.id);
    // Mock implementation - in real app, implement tier updates
    /* istanbul ignore next */
    cov_11rw7yp97x().s[100]++;
    res.json({
      success: true,
      data: {
        tierId,
        message: 'Tier updated successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[101]++;
    logger_1.logger.error('Error updating subscription tier:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[102]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update subscription tier'
    });
  }
});
/**
 * @route DELETE /api/subscription/tier/:tierId
 * @desc Delete subscription tier
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[103]++;
router.delete('/tier/:tierId', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[10]++;
  cov_11rw7yp97x().s[104]++;
  try {
    const {
      tierId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[105]++, req.params);
    const creatorId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[106]++, req.user.id);
    // Mock implementation - in real app, implement tier deletion
    /* istanbul ignore next */
    cov_11rw7yp97x().s[107]++;
    res.json({
      success: true,
      data: {
        tierId,
        message: 'Tier deleted successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[108]++;
    logger_1.logger.error('Error deleting subscription tier:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[109]++;
    res.status(500).json({
      success: false,
      error: 'Failed to delete subscription tier'
    });
  }
});
/**
 * @route GET /api/subscription/content/:contentId
 * @desc Get exclusive content details
 * @access Private (Subscriber)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[110]++;
router.get('/content/:contentId', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[11]++;
  cov_11rw7yp97x().s[111]++;
  try {
    const {
      contentId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[112]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[113]++, req.user.id);
    // Mock implementation - in real app, check subscription access and return content
    /* istanbul ignore next */
    cov_11rw7yp97x().s[114]++;
    res.json({
      success: true,
      data: {
        contentId,
        message: 'Content access verified'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[115]++;
    logger_1.logger.error('Error getting exclusive content:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[116]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get exclusive content'
    });
  }
});
/**
 * @route GET /api/subscription/creator/:creatorId/content
 * @desc Get creator's exclusive content (for subscribers)
 * @access Private (Subscriber)
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[117]++;
router.get('/creator/:creatorId/content', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[12]++;
  cov_11rw7yp97x().s[118]++;
  try {
    const {
      creatorId
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[119]++, req.params);
    const {
      page =
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[16][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_11rw7yp97x().b[17][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[120]++, req.query);
    const userId =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[121]++, req.user.id);
    // Mock implementation - in real app, check subscription and return content
    /* istanbul ignore next */
    cov_11rw7yp97x().s[122]++;
    res.json({
      success: true,
      data: {
        content: [],
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: 0
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[123]++;
    logger_1.logger.error('Error getting creator content:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[124]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get creator content'
    });
  }
});
/**
 * @route GET /api/subscription/stats/global
 * @desc Get global subscription statistics
 * @access Public
 */
/* istanbul ignore next */
cov_11rw7yp97x().s[125]++;
router.get('/stats/global', async (req, res) => {
  /* istanbul ignore next */
  cov_11rw7yp97x().f[13]++;
  cov_11rw7yp97x().s[126]++;
  try {
    // Mock implementation - in real app, return global subscription stats
    const stats =
    /* istanbul ignore next */
    (cov_11rw7yp97x().s[127]++, {
      totalSubscriptions: 50000,
      totalRevenue: 2500000,
      averageSubscriptionValue: 50,
      topCreators: []
    });
    /* istanbul ignore next */
    cov_11rw7yp97x().s[128]++;
    res.json({
      success: true,
      data: {
        stats
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_11rw7yp97x().s[129]++;
    logger_1.logger.error('Error getting global subscription stats:', error);
    /* istanbul ignore next */
    cov_11rw7yp97x().s[130]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get global subscription statistics'
    });
  }
});
/* istanbul ignore next */
cov_11rw7yp97x().s[131]++;
exports.default = router;