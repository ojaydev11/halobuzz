0e327f12deaa65cf550716a6bddb4ff2
"use strict";

/* istanbul ignore next */
function cov_24si31avqz() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\notifications.ts";
  var hash = "6ba7d5ac69fc054c2692766c3bfe81c5ca0d44e6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\notifications.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 41
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "7": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "11": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "12": {
        start: {
          line: 16,
          column: 49
        },
        end: {
          line: 16,
          column: 57
        }
      },
      "13": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "14": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "15": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "17": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 74
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 70
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "21": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 81,
          column: 3
        }
      },
      "22": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "23": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "24": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 39
        }
      },
      "25": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "27": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "28": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 11
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 81
        }
      },
      "30": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "31": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 121,
          column: 3
        }
      },
      "32": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "33": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 39
        }
      },
      "34": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "35": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "36": {
        start: {
          line: 92,
          column: 21
        },
        end: {
          line: 92,
          column: 89
        }
      },
      "37": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "38": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "39": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "40": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 80
        }
      },
      "41": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "42": {
        start: {
          line: 123,
          column: 0
        },
        end: {
          line: 159,
          column: 3
        }
      },
      "43": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "44": {
        start: {
          line: 125,
          column: 43
        },
        end: {
          line: 125,
          column: 52
        }
      },
      "45": {
        start: {
          line: 126,
          column: 23
        },
        end: {
          line: 126,
          column: 39
        }
      },
      "46": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "47": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "48": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 134,
          column: 69
        }
      },
      "49": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 67
        }
      },
      "50": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "51": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 140,
          column: 15
        }
      },
      "52": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 26
        }
      },
      "53": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 76
        }
      },
      "54": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "55": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 76
        }
      },
      "56": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "57": {
        start: {
          line: 161,
          column: 0
        },
        end: {
          line: 185,
          column: 3
        }
      },
      "58": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "59": {
        start: {
          line: 163,
          column: 35
        },
        end: {
          line: 163,
          column: 45
        }
      },
      "60": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 164,
          column: 39
        }
      },
      "61": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "62": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 169,
          column: 15
        }
      },
      "63": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 98
        }
      },
      "64": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "65": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 76
        }
      },
      "66": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "67": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 210,
          column: 3
        }
      },
      "68": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "69": {
        start: {
          line: 189,
          column: 23
        },
        end: {
          line: 189,
          column: 39
        }
      },
      "70": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "71": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "72": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 85
        }
      },
      "73": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 201,
          column: 11
        }
      },
      "74": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 81
        }
      },
      "75": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "76": {
        start: {
          line: 212,
          column: 0
        },
        end: {
          line: 251,
          column: 3
        }
      },
      "77": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "78": {
        start: {
          line: 214,
          column: 23
        },
        end: {
          line: 214,
          column: 39
        }
      },
      "79": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "80": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "81": {
        start: {
          line: 222,
          column: 25
        },
        end: {
          line: 222,
          column: 49
        }
      },
      "82": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 65
        }
      },
      "83": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "84": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "85": {
        start: {
          line: 234,
          column: 22
        },
        end: {
          line: 234,
          column: 23
        }
      },
      "86": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 68
        }
      },
      "87": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "88": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "89": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "90": {
        start: {
          line: 252,
          column: 0
        },
        end: {
          line: 252,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 32
          }
        },
        loc: {
          start: {
            line: 14,
            column: 51
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 28
          }
        },
        loc: {
          start: {
            line: 56,
            column: 47
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 27
          },
          end: {
            line: 83,
            column: 28
          }
        },
        loc: {
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 83
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 24
          }
        },
        loc: {
          start: {
            line: 123,
            column: 43
          },
          end: {
            line: 159,
            column: 1
          }
        },
        line: 123
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 42
          }
        },
        loc: {
          start: {
            line: 161,
            column: 61
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 161
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 187,
            column: 29
          },
          end: {
            line: 187,
            column: 30
          }
        },
        loc: {
          start: {
            line: 187,
            column: 49
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 187
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 212,
            column: 28
          },
          end: {
            line: 212,
            column: 29
          }
        },
        loc: {
          start: {
            line: 212,
            column: 48
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 212
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 37
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 37
          },
          end: {
            line: 28,
            column: 48
          }
        }, {
          start: {
            line: 28,
            column: 52
          },
          end: {
            line: 38,
            column: 13
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 18
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 18
          },
          end: {
            line: 101,
            column: 46
          }
        }, {
          start: {
            line: 101,
            column: 50
          },
          end: {
            line: 111,
            column: 13
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 125,
            column: 26
          }
        }],
        line: 125
      },
      "7": {
        loc: {
          start: {
            line: 125,
            column: 28
          },
          end: {
            line: 125,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 37
          },
          end: {
            line: 125,
            column: 38
          }
        }],
        line: 125
      },
      "8": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "9": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 22
          },
          end: {
            line: 139,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 58
          },
          end: {
            line: 139,
            column: 83
          }
        }, {
          start: {
            line: 139,
            column: 86
          },
          end: {
            line: 139,
            column: 99
          }
        }],
        line: 139
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "13": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "14": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 231,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "15": {
        loc: {
          start: {
            line: 228,
            column: 27
          },
          end: {
            line: 228,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 61
          },
          end: {
            line: 228,
            column: 82
          }
        }, {
          start: {
            line: 228,
            column: 85
          },
          end: {
            line: 228,
            column: 96
          }
        }],
        line: 228
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6ba7d5ac69fc054c2692766c3bfe81c5ca0d44e6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24si31avqz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24si31avqz();
cov_24si31avqz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[1]++, require("express"));
const User_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[2]++, require("@/models/User"));
const logger_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[3]++, require("@/config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[4]++, require("@/config/redis"));
const auth_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[5]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_24si31avqz().s[6]++, require("@/middleware/security"));
const router =
/* istanbul ignore next */
(cov_24si31avqz().s[7]++, (0, express_1.Router)());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_24si31avqz().s[8]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_24si31avqz().s[9]++;
router.use(security_1.socialLimiter);
// Register push notification token
/* istanbul ignore next */
cov_24si31avqz().s[10]++;
router.post('/register-token', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[0]++;
  cov_24si31avqz().s[11]++;
  try {
    const {
      token,
      platform,
      preferences
    } =
    /* istanbul ignore next */
    (cov_24si31avqz().s[12]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[13]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[14]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[0][0]++;
      cov_24si31avqz().s[15]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[0][1]++;
    }
    // Update user's push token
    cov_24si31avqz().s[16]++;
    await User_1.User.findByIdAndUpdate(userId, {
      pushToken: token,
      platform: platform,
      notificationPreferences:
      /* istanbul ignore next */
      (cov_24si31avqz().b[1][0]++, preferences) ||
      /* istanbul ignore next */
      (cov_24si31avqz().b[1][1]++, {
        pushEnabled: true,
        streamNotifications: true,
        giftNotifications: true,
        followNotifications: true,
        messageNotifications: true,
        achievementNotifications: true,
        systemNotifications: true,
        soundEnabled: true,
        vibrateEnabled: true
      })
    });
    // Cache the token for quick access
    /* istanbul ignore next */
    cov_24si31avqz().s[17]++;
    await (0, redis_1.setCache)(`push_token:${userId}`, token, 86400); // 24 hours
    /* istanbul ignore next */
    cov_24si31avqz().s[18]++;
    return res.json({
      success: true,
      message: 'Push token registered successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[19]++;
    logger_1.logger.error('Error registering push token:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[20]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to register push token'
    });
  }
});
// Update notification preferences
/* istanbul ignore next */
cov_24si31avqz().s[21]++;
router.put('/preferences', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[1]++;
  cov_24si31avqz().s[22]++;
  try {
    const preferences =
    /* istanbul ignore next */
    (cov_24si31avqz().s[23]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[24]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[25]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[2][0]++;
      cov_24si31avqz().s[26]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[2][1]++;
    }
    cov_24si31avqz().s[27]++;
    await User_1.User.findByIdAndUpdate(userId, {
      notificationPreferences: preferences
    });
    /* istanbul ignore next */
    cov_24si31avqz().s[28]++;
    return res.json({
      success: true,
      message: 'Notification preferences updated successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[29]++;
    logger_1.logger.error('Error updating notification preferences:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[30]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to update notification preferences'
    });
  }
});
// Get notification preferences
/* istanbul ignore next */
cov_24si31avqz().s[31]++;
router.get('/preferences', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[2]++;
  cov_24si31avqz().s[32]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[33]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[34]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[3][0]++;
      cov_24si31avqz().s[35]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[3][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_24si31avqz().s[36]++, await User_1.User.findById(userId).select('notificationPreferences'));
    /* istanbul ignore next */
    cov_24si31avqz().s[37]++;
    if (!user) {
      /* istanbul ignore next */
      cov_24si31avqz().b[4][0]++;
      cov_24si31avqz().s[38]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[4][1]++;
    }
    cov_24si31avqz().s[39]++;
    return res.json({
      success: true,
      data:
      /* istanbul ignore next */
      (cov_24si31avqz().b[5][0]++, user.notificationPreferences) ||
      /* istanbul ignore next */
      (cov_24si31avqz().b[5][1]++, {
        pushEnabled: true,
        streamNotifications: true,
        giftNotifications: true,
        followNotifications: true,
        messageNotifications: true,
        achievementNotifications: true,
        systemNotifications: true,
        soundEnabled: true,
        vibrateEnabled: true
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[40]++;
    logger_1.logger.error('Error getting notification preferences:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[41]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get notification preferences'
    });
  }
});
// Get notification history
/* istanbul ignore next */
cov_24si31avqz().s[42]++;
router.get('/history', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[3]++;
  cov_24si31avqz().s[43]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_24si31avqz().b[6][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_24si31avqz().b[7][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_24si31avqz().s[44]++, req.query);
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[45]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[46]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[8][0]++;
      cov_24si31avqz().s[47]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[8][1]++;
    }
    // Get cached notification history
    const cacheKey =
    /* istanbul ignore next */
    (cov_24si31avqz().s[48]++, `notifications:${userId}:${limit}:${offset}`);
    const cachedHistory =
    /* istanbul ignore next */
    (cov_24si31avqz().s[49]++, await (0, redis_1.getCache)(cacheKey));
    /* istanbul ignore next */
    cov_24si31avqz().s[50]++;
    if (cachedHistory) {
      /* istanbul ignore next */
      cov_24si31avqz().b[9][0]++;
      cov_24si31avqz().s[51]++;
      return res.json({
        success: true,
        data: typeof cachedHistory === 'string' ?
        /* istanbul ignore next */
        (cov_24si31avqz().b[10][0]++, JSON.parse(cachedHistory)) :
        /* istanbul ignore next */
        (cov_24si31avqz().b[10][1]++, cachedHistory)
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[9][1]++;
    }
    // If not cached, return empty array for now
    // In a real implementation, you would fetch from a notifications collection
    const history =
    /* istanbul ignore next */
    (cov_24si31avqz().s[52]++, []);
    // Cache the result
    /* istanbul ignore next */
    cov_24si31avqz().s[53]++;
    await (0, redis_1.setCache)(cacheKey, JSON.stringify(history), 300); // 5 minutes
    /* istanbul ignore next */
    cov_24si31avqz().s[54]++;
    return res.json({
      success: true,
      data: history
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[55]++;
    logger_1.logger.error('Error getting notification history:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[56]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get notification history'
    });
  }
});
// Mark notification as read
/* istanbul ignore next */
cov_24si31avqz().s[57]++;
router.put('/mark-read/:notificationId', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[4]++;
  cov_24si31avqz().s[58]++;
  try {
    const {
      notificationId
    } =
    /* istanbul ignore next */
    (cov_24si31avqz().s[59]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[60]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[61]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[11][0]++;
      cov_24si31avqz().s[62]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[11][1]++;
    }
    // In a real implementation, you would update the notification status in the database
    cov_24si31avqz().s[63]++;
    logger_1.logger.info(`Marking notification ${notificationId} as read for user ${userId}`);
    /* istanbul ignore next */
    cov_24si31avqz().s[64]++;
    return res.json({
      success: true,
      message: 'Notification marked as read'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[65]++;
    logger_1.logger.error('Error marking notification as read:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[66]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to mark notification as read'
    });
  }
});
// Mark all notifications as read
/* istanbul ignore next */
cov_24si31avqz().s[67]++;
router.put('/mark-all-read', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[5]++;
  cov_24si31avqz().s[68]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[69]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[70]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[12][0]++;
      cov_24si31avqz().s[71]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[12][1]++;
    }
    // In a real implementation, you would update all notifications for the user
    cov_24si31avqz().s[72]++;
    logger_1.logger.info(`Marking all notifications as read for user ${userId}`);
    /* istanbul ignore next */
    cov_24si31avqz().s[73]++;
    return res.json({
      success: true,
      message: 'All notifications marked as read'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[74]++;
    logger_1.logger.error('Error marking all notifications as read:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[75]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to mark all notifications as read'
    });
  }
});
// Get unread notification count
/* istanbul ignore next */
cov_24si31avqz().s[76]++;
router.get('/unread-count', async (req, res) => {
  /* istanbul ignore next */
  cov_24si31avqz().f[6]++;
  cov_24si31avqz().s[77]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_24si31avqz().s[78]++, req.user?.userId);
    /* istanbul ignore next */
    cov_24si31avqz().s[79]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_24si31avqz().b[13][0]++;
      cov_24si31avqz().s[80]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[13][1]++;
    }
    // Get cached unread count
    const cacheKey =
    /* istanbul ignore next */
    (cov_24si31avqz().s[81]++, `unread_count:${userId}`);
    const cachedCount =
    /* istanbul ignore next */
    (cov_24si31avqz().s[82]++, await (0, redis_1.getCache)(cacheKey));
    /* istanbul ignore next */
    cov_24si31avqz().s[83]++;
    if (cachedCount) {
      /* istanbul ignore next */
      cov_24si31avqz().b[14][0]++;
      cov_24si31avqz().s[84]++;
      return res.json({
        success: true,
        data: {
          count: typeof cachedCount === 'string' ?
          /* istanbul ignore next */
          (cov_24si31avqz().b[15][0]++, parseInt(cachedCount)) :
          /* istanbul ignore next */
          (cov_24si31avqz().b[15][1]++, cachedCount)
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_24si31avqz().b[14][1]++;
    }
    // If not cached, return 0 for now
    // In a real implementation, you would count unread notifications from the database
    const count =
    /* istanbul ignore next */
    (cov_24si31avqz().s[85]++, 0);
    // Cache the result
    /* istanbul ignore next */
    cov_24si31avqz().s[86]++;
    await (0, redis_1.setCache)(cacheKey, count.toString(), 60); // 1 minute
    /* istanbul ignore next */
    cov_24si31avqz().s[87]++;
    return res.json({
      success: true,
      data: {
        count
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_24si31avqz().s[88]++;
    logger_1.logger.error('Error getting unread notification count:', error);
    /* istanbul ignore next */
    cov_24si31avqz().s[89]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get unread notification count'
    });
  }
});
/* istanbul ignore next */
cov_24si31avqz().s[90]++;
exports.default = router;