8e3f50308bac77d05f39d0a93bc83b66
"use strict";

/* istanbul ignore next */
function cov_wvkeaw776() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\GDPRService.ts";
  var hash = "2b31c95688d2b3472691d558445a1e4f2b029ffe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\GDPRService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 51
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 40
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "7": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "8": {
        start: {
          line: 11,
          column: 13
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "10": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 31,
          column: 15
        }
      },
      "12": {
        start: {
          line: 33,
          column: 32
        },
        end: {
          line: 33,
          column: 56
        }
      },
      "13": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "14": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 97
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 65
        }
      },
      "16": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 24
        }
      },
      "17": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "18": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 91
        }
      },
      "19": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "20": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 50
        }
      },
      "21": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 60,
          column: 28
        }
      },
      "22": {
        start: {
          line: 62,
          column: 28
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "23": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "24": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "25": {
        start: {
          line: 71,
          column: 31
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "26": {
        start: {
          line: 74,
          column: 52
        },
        end: {
          line: 74,
          column: 62
        }
      },
      "27": {
        start: {
          line: 75,
          column: 42
        },
        end: {
          line: 75,
          column: 52
        }
      },
      "28": {
        start: {
          line: 76,
          column: 44
        },
        end: {
          line: 76,
          column: 54
        }
      },
      "29": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "30": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "31": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 67
        }
      },
      "32": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 24
        }
      },
      "33": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "34": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "35": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "36": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 128,
          column: 15
        }
      },
      "37": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "38": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 81
        }
      },
      "39": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 66
        }
      },
      "40": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 24
        }
      },
      "41": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "42": {
        start: {
          line: 150,
          column: 34
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "43": {
        start: {
          line: 154,
          column: 31
        },
        end: {
          line: 154,
          column: 33
        }
      },
      "44": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "45": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "46": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 52
        }
      },
      "47": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 68
        }
      },
      "48": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 70
        }
      },
      "49": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 66
        }
      },
      "50": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 24
        }
      },
      "51": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "52": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 92
        }
      },
      "53": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "54": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 50
        }
      },
      "55": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "56": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 70
        }
      },
      "57": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 24
        }
      },
      "58": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "59": {
        start: {
          line: 193,
          column: 25
        },
        end: {
          line: 193,
          column: 77
        }
      },
      "60": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "61": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 29
        }
      },
      "62": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 46
        }
      },
      "63": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 46
        }
      },
      "64": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 66
        }
      },
      "65": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "66": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "67": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 22
        }
      },
      "68": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 70
        }
      },
      "69": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 22
        }
      },
      "70": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "71": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 225,
          column: 67
        }
      },
      "72": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 81
        }
      },
      "73": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 67
        }
      },
      "74": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "75": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "76": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "77": {
        start: {
          line: 320,
          column: 32
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "78": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 31
        }
      },
      "79": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 72
        }
      },
      "80": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 24
        }
      },
      "81": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "82": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "83": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 344,
          column: 34
        }
      },
      "84": {
        start: {
          line: 345,
          column: 0
        },
        end: {
          line: 345,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 59
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 33
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 50
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 74,
            column: 47
          },
          end: {
            line: 74,
            column: 48
          }
        },
        loc: {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 62
          }
        },
        line: 74
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 37
          },
          end: {
            line: 75,
            column: 38
          }
        },
        loc: {
          start: {
            line: 75,
            column: 42
          },
          end: {
            line: 75,
            column: 52
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 76,
            column: 39
          },
          end: {
            line: 76,
            column: 40
          }
        },
        loc: {
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 54
          }
        },
        line: 76
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 33
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 39
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 171
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 44
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 191
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 35
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 208
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 46
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 222
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 28
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 236
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 29
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 278
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 32
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 318
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 31
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 335
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 33
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 339
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 27
          },
          end: {
            line: 23,
            column: 33
          }
        }, {
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 23,
            column: 65
          }
        }, {
          start: {
            line: 23,
            column: 69
          },
          end: {
            line: 23,
            column: 71
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 51
          }
        }, {
          start: {
            line: 24,
            column: 55
          },
          end: {
            line: 24,
            column: 57
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 32
          },
          end: {
            line: 78,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 32
          },
          end: {
            line: 78,
            column: 51
          }
        }, {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 57
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "5": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "6": {
        loc: {
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 178,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 32
          },
          end: {
            line: 178,
            column: 44
          }
        }, {
          start: {
            line: 178,
            column: 48
          },
          end: {
            line: 178,
            column: 50
          }
        }],
        line: 178
      },
      "7": {
        loc: {
          start: {
            line: 179,
            column: 32
          },
          end: {
            line: 179,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 32
          },
          end: {
            line: 179,
            column: 51
          }
        }, {
          start: {
            line: 179,
            column: 55
          },
          end: {
            line: 179,
            column: 57
          }
        }],
        line: 179
      },
      "8": {
        loc: {
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 180,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 29
          },
          end: {
            line: 180,
            column: 54
          }
        }, {
          start: {
            line: 180,
            column: 58
          },
          end: {
            line: 180,
            column: 62
          }
        }],
        line: 180
      },
      "9": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "10": {
        loc: {
          start: {
            line: 197,
            column: 28
          },
          end: {
            line: 197,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 28
          },
          end: {
            line: 197,
            column: 40
          }
        }, {
          start: {
            line: 197,
            column: 44
          },
          end: {
            line: 197,
            column: 46
          }
        }],
        line: 197
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b31c95688d2b3472691d558445a1e4f2b029ffe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_wvkeaw776 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_wvkeaw776();
cov_wvkeaw776().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_wvkeaw776().s[1]++;
exports.gdprService = exports.GDPRService = void 0;
const User_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[2]++, require("../models/User"));
const Transaction_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[3]++, require("../models/Transaction"));
const LiveStream_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[4]++, require("../models/LiveStream"));
const Message_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[5]++, require("../models/Message"));
const logger_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[6]++, require("../config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_wvkeaw776().s[7]++, require("../config/redis"));
class GDPRService {
  logger =
  /* istanbul ignore next */
  (cov_wvkeaw776().s[8]++, logger_1.logger);
  /**
   * Record user consent
   */
  async recordConsent(userId, consentType, granted, req) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[0]++;
    cov_wvkeaw776().s[9]++;
    try {
      const consentRecord =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[10]++, {
        userId,
        consentType,
        granted,
        timestamp: new Date(),
        version: '1.0',
        ipAddress:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[0][0]++, req.ip) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[0][1]++, req.connection.remoteAddress) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[0][2]++, ''),
        userAgent:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[1][0]++, req.header('User-Agent')) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[1][1]++, '')
      });
      // Store consent in database
      /* istanbul ignore next */
      cov_wvkeaw776().s[11]++;
      await User_1.User.findByIdAndUpdate(userId, {
        $push: {
          consentHistory: consentRecord
        }
      });
      // Update user consent status
      const updateField =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[12]++, `consent.${consentType}`);
      /* istanbul ignore next */
      cov_wvkeaw776().s[13]++;
      await User_1.User.findByIdAndUpdate(userId, {
        $set: {
          [updateField]: granted,
          'consent.lastUpdated': new Date()
        }
      });
      /* istanbul ignore next */
      cov_wvkeaw776().s[14]++;
      this.logger.info(`Consent recorded for user ${userId}: ${consentType} = ${granted}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[15]++;
      this.logger.error('Error recording consent:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[16]++;
      throw error;
    }
  }
  /**
   * Export all user data
   */
  async exportUserData(userId) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[1]++;
    cov_wvkeaw776().s[17]++;
    try {
      // Get user data
      const user =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[18]++, await User_1.User.findById(userId).select('-password -totpSecret'));
      /* istanbul ignore next */
      cov_wvkeaw776().s[19]++;
      if (!user) {
        /* istanbul ignore next */
        cov_wvkeaw776().b[2][0]++;
        cov_wvkeaw776().s[20]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_wvkeaw776().b[2][1]++;
      }
      // Get transactions
      const transactions =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[21]++, await Transaction_1.Transaction.find({
        userId
      }).sort({
        createdAt: -1
      }).limit(1000)); // Limit to prevent huge exports
      // Get streams
      const streams =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[22]++, await LiveStream_1.LiveStream.find({
        hostId: userId
      }).sort({
        createdAt: -1
      }).limit(1000));
      // Get messages
      const messages =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[23]++, await Message_1.Message.find({
        senderId: userId
      }).sort({
        createdAt: -1
      }).limit(1000));
      // Get analytics data
      const analytics =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[24]++, await this.getUserAnalytics(userId));
      const dataExport =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[25]++, {
        userId,
        personalData: user.toJSON(),
        transactions: transactions.map(t => {
          /* istanbul ignore next */
          cov_wvkeaw776().f[2]++;
          cov_wvkeaw776().s[26]++;
          return t.toJSON();
        }),
        streams: streams.map(s => {
          /* istanbul ignore next */
          cov_wvkeaw776().f[3]++;
          cov_wvkeaw776().s[27]++;
          return s.toJSON();
        }),
        messages: messages.map(m => {
          /* istanbul ignore next */
          cov_wvkeaw776().f[4]++;
          cov_wvkeaw776().s[28]++;
          return m.toJSON();
        }),
        analytics,
        consentHistory:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[3][0]++, user.consentHistory) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[3][1]++, []),
        exportDate: new Date()
      });
      // Store export record
      /* istanbul ignore next */
      cov_wvkeaw776().s[29]++;
      await this.storeDataExport(userId, dataExport);
      /* istanbul ignore next */
      cov_wvkeaw776().s[30]++;
      return dataExport;
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[31]++;
      this.logger.error('Error exporting user data:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[32]++;
      throw error;
    }
  }
  /**
   * Delete user data (Right to be forgotten)
   */
  async deleteUserData(userId) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[5]++;
    cov_wvkeaw776().s[33]++;
    try {
      /* istanbul ignore next */
      cov_wvkeaw776().s[34]++;
      // Anonymize user data instead of hard delete
      await User_1.User.findByIdAndUpdate(userId, {
        $set: {
          email: `deleted_${Date.now()}@deleted.com`,
          username: `deleted_user_${Date.now()}`,
          phone: null,
          profilePicture: null,
          bio: 'Account deleted',
          isDeleted: true,
          deletedAt: new Date()
        },
        $unset: {
          password: 1,
          totpSecret: 1,
          boundDevices: 1,
          consentHistory: 1
        }
      });
      // Anonymize transactions
      /* istanbul ignore next */
      cov_wvkeaw776().s[35]++;
      await Transaction_1.Transaction.updateMany({
        userId
      }, {
        $set: {
          'metadata.anonymized': true,
          'metadata.originalUserId': userId
        }
      });
      // Anonymize streams
      /* istanbul ignore next */
      cov_wvkeaw776().s[36]++;
      await LiveStream_1.LiveStream.updateMany({
        hostId: userId
      }, {
        $set: {
          title: 'Deleted Stream',
          description: 'Stream deleted by user',
          isDeleted: true,
          deletedAt: new Date()
        }
      });
      // Anonymize messages
      /* istanbul ignore next */
      cov_wvkeaw776().s[37]++;
      await Message_1.Message.updateMany({
        senderId: userId
      }, {
        $set: {
          content: 'Message deleted',
          isDeleted: true,
          deletedAt: new Date()
        }
      });
      /* istanbul ignore next */
      cov_wvkeaw776().s[38]++;
      this.logger.info(`User data deleted/anonymized for user: ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[39]++;
      this.logger.error('Error deleting user data:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[40]++;
      throw error;
    }
  }
  /**
   * Update user data
   */
  async updateUserData(userId, data) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[6]++;
    cov_wvkeaw776().s[41]++;
    try {
      // Validate data
      const allowedFields =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[42]++, ['username', 'bio', 'profilePicture', 'country', 'language', 'notificationSettings', 'privacySettings']);
      const updateData =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[43]++, {});
      /* istanbul ignore next */
      cov_wvkeaw776().s[44]++;
      for (const field of allowedFields) {
        /* istanbul ignore next */
        cov_wvkeaw776().s[45]++;
        if (data[field] !== undefined) {
          /* istanbul ignore next */
          cov_wvkeaw776().b[4][0]++;
          cov_wvkeaw776().s[46]++;
          updateData[field] = data[field];
        } else
        /* istanbul ignore next */
        {
          cov_wvkeaw776().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_wvkeaw776().s[47]++;
      await User_1.User.findByIdAndUpdate(userId, updateData);
      /* istanbul ignore next */
      cov_wvkeaw776().s[48]++;
      this.logger.info(`User data updated for user: ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[49]++;
      this.logger.error('Error updating user data:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[50]++;
      throw error;
    }
  }
  /**
   * Get consent status
   */
  async getConsentStatus(userId) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[7]++;
    cov_wvkeaw776().s[51]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[52]++, await User_1.User.findById(userId).select('consent consentHistory'));
      /* istanbul ignore next */
      cov_wvkeaw776().s[53]++;
      if (!user) {
        /* istanbul ignore next */
        cov_wvkeaw776().b[5][0]++;
        cov_wvkeaw776().s[54]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_wvkeaw776().b[5][1]++;
      }
      cov_wvkeaw776().s[55]++;
      return {
        currentConsent:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[6][0]++, user.consent) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[6][1]++, {}),
        consentHistory:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[7][0]++, user.consentHistory) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[7][1]++, []),
        lastUpdated:
        /* istanbul ignore next */
        (cov_wvkeaw776().b[8][0]++, user.consent?.lastUpdated) ||
        /* istanbul ignore next */
        (cov_wvkeaw776().b[8][1]++, null)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[56]++;
      this.logger.error('Error getting consent status:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[57]++;
      throw error;
    }
  }
  /**
   * Validate data processing consent
   */
  async validateConsent(userId, dataType) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[8]++;
    cov_wvkeaw776().s[58]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[59]++, await User_1.User.findById(userId).select('consent'));
      /* istanbul ignore next */
      cov_wvkeaw776().s[60]++;
      if (!user) {
        /* istanbul ignore next */
        cov_wvkeaw776().b[9][0]++;
        cov_wvkeaw776().s[61]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_wvkeaw776().b[9][1]++;
      }
      const consent =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[62]++,
      /* istanbul ignore next */
      (cov_wvkeaw776().b[10][0]++, user.consent) ||
      /* istanbul ignore next */
      (cov_wvkeaw776().b[10][1]++, {}));
      /* istanbul ignore next */
      cov_wvkeaw776().s[63]++;
      return consent[dataType] === true;
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[64]++;
      this.logger.error('Error validating consent:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[65]++;
      return false;
    }
  }
  /**
   * Get user analytics data
   */
  async getUserAnalytics(userId) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[9]++;
    cov_wvkeaw776().s[66]++;
    try {
      /* istanbul ignore next */
      cov_wvkeaw776().s[67]++;
      // This would typically query an analytics service
      // For now, return empty array
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[68]++;
      this.logger.error('Error getting user analytics:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[69]++;
      return [];
    }
  }
  /**
   * Store data export record
   */
  async storeDataExport(userId, dataExport) {
    /* istanbul ignore next */
    cov_wvkeaw776().f[10]++;
    cov_wvkeaw776().s[70]++;
    try {
      // Store in cache for quick access
      const exportKey =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[71]++, `data_export:${userId}:${Date.now()}`);
      /* istanbul ignore next */
      cov_wvkeaw776().s[72]++;
      await (0, redis_1.setCache)(exportKey, dataExport, 7 * 24 * 60 * 60); // 7 days
      // Could also store in database for audit purposes
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[73]++;
      this.logger.error('Error storing data export:', error);
    }
  }
  /**
   * Generate privacy policy
   */
  generatePrivacyPolicy() {
    /* istanbul ignore next */
    cov_wvkeaw776().f[11]++;
    cov_wvkeaw776().s[74]++;
    return `
# HaloBuzz Privacy Policy

## Data Collection
We collect the following types of data:
- Account information (email, username, profile picture)
- Usage data (streams, messages, transactions)
- Device information (device ID, IP address, user agent)
- Analytics data (app usage, performance metrics)

## Data Usage
Your data is used to:
- Provide and improve our services
- Process payments and transactions
- Ensure platform safety and security
- Comply with legal requirements

## Data Sharing
We do not sell your personal data. We may share data with:
- Payment processors (for transaction processing)
- Cloud service providers (for hosting)
- Legal authorities (when required by law)

## Your Rights
Under GDPR, you have the right to:
- Access your data
- Correct inaccurate data
- Delete your data
- Restrict processing
- Data portability
- Object to processing

## Contact
For privacy-related inquiries, contact: privacy@halobuzz.com

Last updated: ${new Date().toISOString()}
    `.trim();
  }
  /**
   * Generate terms of service
   */
  generateTermsOfService() {
    /* istanbul ignore next */
    cov_wvkeaw776().f[12]++;
    cov_wvkeaw776().s[75]++;
    return `
# HaloBuzz Terms of Service

## Acceptance of Terms
By using HaloBuzz, you agree to these terms.

## User Responsibilities
- You must be at least 13 years old
- You must not share inappropriate content
- You must not engage in fraudulent activities
- You must respect other users

## Platform Rules
- No harassment or bullying
- No spam or advertising
- No illegal activities
- No impersonation

## Content Policy
- No adult content
- No violence or gore
- No hate speech
- No copyright infringement

## Account Termination
We may terminate accounts that violate these terms.

## Limitation of Liability
HaloBuzz is not liable for user-generated content or third-party services.

## Changes to Terms
We may update these terms with notice to users.

Last updated: ${new Date().toISOString()}
    `.trim();
  }
  /**
   * Audit data processing
   */
  async auditDataProcessing() {
    /* istanbul ignore next */
    cov_wvkeaw776().f[13]++;
    cov_wvkeaw776().s[76]++;
    try {
      const auditReport =
      /* istanbul ignore next */
      (cov_wvkeaw776().s[77]++, {
        timestamp: new Date(),
        totalUsers: await User_1.User.countDocuments(),
        activeUsers: await User_1.User.countDocuments({
          lastActiveAt: {
            $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
          }
        }),
        usersWithConsent: await User_1.User.countDocuments({
          'consent.marketing': true
        }),
        dataExports: await this.getDataExportCount(),
        dataDeletions: await this.getDataDeletionCount()
      });
      /* istanbul ignore next */
      cov_wvkeaw776().s[78]++;
      return auditReport;
    } catch (error) {
      /* istanbul ignore next */
      cov_wvkeaw776().s[79]++;
      this.logger.error('Error auditing data processing:', error);
      /* istanbul ignore next */
      cov_wvkeaw776().s[80]++;
      throw error;
    }
  }
  async getDataExportCount() {
    /* istanbul ignore next */
    cov_wvkeaw776().f[14]++;
    cov_wvkeaw776().s[81]++;
    // This would typically query a data export log
    return 0;
  }
  async getDataDeletionCount() {
    /* istanbul ignore next */
    cov_wvkeaw776().f[15]++;
    cov_wvkeaw776().s[82]++;
    // This would typically query a data deletion log
    return 0;
  }
}
/* istanbul ignore next */
cov_wvkeaw776().s[83]++;
exports.GDPRService = GDPRService;
/* istanbul ignore next */
cov_wvkeaw776().s[84]++;
exports.gdprService = new GDPRService();