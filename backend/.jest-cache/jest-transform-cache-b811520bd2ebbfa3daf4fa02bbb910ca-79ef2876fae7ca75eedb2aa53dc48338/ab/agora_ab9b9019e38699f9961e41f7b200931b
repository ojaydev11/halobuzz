9fbe0a1bc53e627ff1b5384333bd6785
"use strict";

/* istanbul ignore next */
function cov_1aq90g7ide() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\agora.ts";
  var hash = "65f50104ef5ec5965d7a9076f3adc6572ad1cf96";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\agora.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 75
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 72,
          column: 3
        }
      },
      "9": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "10": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 69
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "13": {
        start: {
          line: 35,
          column: 60
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "14": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 39
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "17": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 100
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 134
        }
      },
      "21": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 80
        }
      },
      "23": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "24": {
        start: {
          line: 74,
          column: 0
        },
        end: {
          line: 128,
          column: 3
        }
      },
      "25": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "26": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 69
        }
      },
      "27": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "28": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "29": {
        start: {
          line: 91,
          column: 52
        },
        end: {
          line: 91,
          column: 60
        }
      },
      "30": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 39
        }
      },
      "31": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "32": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 15
        }
      },
      "33": {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 91
        }
      },
      "34": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "35": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "36": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 134
        }
      },
      "37": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "38": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 77
        }
      },
      "39": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "40": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "41": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "42": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 42
        }
      },
      "43": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 133,
          column: 39
        }
      },
      "44": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "45": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 138,
          column: 15
        }
      },
      "46": {
        start: {
          line: 140,
          column: 24
        },
        end: {
          line: 140,
          column: 83
        }
      },
      "47": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "48": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 71
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "50": {
        start: {
          line: 155,
          column: 0
        },
        end: {
          line: 208,
          column: 3
        }
      },
      "51": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "52": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 69
        }
      },
      "53": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "54": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "55": {
        start: {
          line: 181,
          column: 32
        },
        end: {
          line: 181,
          column: 42
        }
      },
      "56": {
        start: {
          line: 182,
          column: 68
        },
        end: {
          line: 182,
          column: 76
        }
      },
      "57": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 39
        }
      },
      "58": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "59": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "60": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "61": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "62": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "63": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 206,
          column: 11
        }
      },
      "64": {
        start: {
          line: 210,
          column: 0
        },
        end: {
          line: 232,
          column: 3
        }
      },
      "65": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "66": {
        start: {
          line: 212,
          column: 23
        },
        end: {
          line: 212,
          column: 39
        }
      },
      "67": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 218,
          column: 9
        }
      },
      "68": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "69": {
        start: {
          line: 219,
          column: 25
        },
        end: {
          line: 219,
          column: 73
        }
      },
      "70": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 223,
          column: 11
        }
      },
      "71": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 71
        }
      },
      "72": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 230,
          column: 11
        }
      },
      "73": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 256,
          column: 3
        }
      },
      "74": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "75": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 236,
          column: 39
        }
      },
      "76": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "77": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "78": {
        start: {
          line: 243,
          column: 28
        },
        end: {
          line: 243,
          column: 73
        }
      },
      "79": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "80": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 68
        }
      },
      "81": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 254,
          column: 11
        }
      },
      "82": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 257,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 3
          },
          end: {
            line: 26,
            column: 4
          }
        },
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 82,
            column: 3
          },
          end: {
            line: 82,
            column: 4
          }
        },
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 82
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 130,
            column: 37
          }
        },
        loc: {
          start: {
            line: 130,
            column: 56
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 130
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 172,
            column: 3
          },
          end: {
            line: 172,
            column: 4
          }
        },
        loc: {
          start: {
            line: 172,
            column: 23
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 172
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 210,
            column: 25
          }
        },
        loc: {
          start: {
            line: 210,
            column: 44
          },
          end: {
            line: 232,
            column: 1
          }
        },
        line: 210
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 234,
            column: 23
          },
          end: {
            line: 234,
            column: 24
          }
        },
        loc: {
          start: {
            line: 234,
            column: 43
          },
          end: {
            line: 256,
            column: 1
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 35,
            column: 36
          },
          end: {
            line: 35,
            column: 47
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "6": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 91,
            column: 47
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "13": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "14": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 218,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 242,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "65f50104ef5ec5965d7a9076f3adc6572ad1cf96"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1aq90g7ide = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1aq90g7ide();
var __importDefault =
/* istanbul ignore next */
(cov_1aq90g7ide().s[0]++,
/* istanbul ignore next */
(cov_1aq90g7ide().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1aq90g7ide().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1aq90g7ide().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[0]++;
  cov_1aq90g7ide().s[1]++;
  return /* istanbul ignore next */(cov_1aq90g7ide().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1aq90g7ide().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1aq90g7ide().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1aq90g7ide().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1aq90g7ide().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1aq90g7ide().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_1aq90g7ide().s[4]++, require("express-validator"));
const logger_1 =
/* istanbul ignore next */
(cov_1aq90g7ide().s[5]++, require("../config/logger"));
const AgoraService_1 =
/* istanbul ignore next */
(cov_1aq90g7ide().s[6]++, __importDefault(require("../services/AgoraService")));
const router =
/* istanbul ignore next */
(cov_1aq90g7ide().s[7]++, express_1.default.Router());
// Enhanced Agora token generation with global optimization
/* istanbul ignore next */
cov_1aq90g7ide().s[8]++;
router.post('/token', [(0, express_validator_1.body)('channelName').notEmpty().withMessage('Channel name is required').isLength({
  min: 1,
  max: 64
}).withMessage('Channel name must be 1-64 characters'), (0, express_validator_1.body)('role').optional().isIn(['publisher', 'subscriber']).withMessage('Role must be publisher or subscriber'), (0, express_validator_1.body)('region').optional().isString().withMessage('Region must be a string')], async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[1]++;
  cov_1aq90g7ide().s[9]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[10]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[11]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[3][0]++;
      cov_1aq90g7ide().s[12]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[3][1]++;
    }
    const {
      channelName,
      role =
      /* istanbul ignore next */
      (cov_1aq90g7ide().b[4][0]++, 'publisher'),
      region
    } =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[13]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[14]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[15]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[5][0]++;
      cov_1aq90g7ide().s[16]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[5][1]++;
    }
    // Use enhanced Agora service
    const result =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[17]++, await AgoraService_1.default.generateToken(channelName, userId, role, region));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[18]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[6][0]++;
      cov_1aq90g7ide().s[19]++;
      return res.status(500).json({
        success: false,
        error: result.error
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[6][1]++;
    }
    cov_1aq90g7ide().s[20]++;
    logger_1.logger.info(`Enhanced Agora token generated for channel: ${channelName}, user: ${userId}, region: ${result.region}`);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[21]++;
    res.json({
      success: true,
      data: {
        token: result.token,
        channelName,
        uid: result.uid,
        expiresAt: result.expiresAt,
        region: result.region,
        quality: result.quality,
        agoraAppId: process.env.AGORA_APP_ID
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[22]++;
    logger_1.logger.error('Enhanced Agora token generation failed:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[23]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate Agora token'
    });
  }
});
// Enhanced Agora token refresh with caching
/* istanbul ignore next */
cov_1aq90g7ide().s[24]++;
router.post('/refresh', [(0, express_validator_1.body)('channelName').notEmpty().withMessage('Channel name is required'), (0, express_validator_1.body)('role').optional().isIn(['publisher', 'subscriber']).withMessage('Role must be publisher or subscriber')], async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[2]++;
  cov_1aq90g7ide().s[25]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[26]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[27]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[7][0]++;
      cov_1aq90g7ide().s[28]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[7][1]++;
    }
    const {
      channelName,
      role =
      /* istanbul ignore next */
      (cov_1aq90g7ide().b[8][0]++, 'publisher')
    } =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[29]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[30]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[31]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[9][0]++;
      cov_1aq90g7ide().s[32]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[9][1]++;
    }
    // Use enhanced Agora service for refresh
    const result =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[33]++, await AgoraService_1.default.refreshToken(channelName, userId, role));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[34]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[10][0]++;
      cov_1aq90g7ide().s[35]++;
      return res.status(500).json({
        success: false,
        error: result.error
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[10][1]++;
    }
    cov_1aq90g7ide().s[36]++;
    logger_1.logger.info(`Enhanced Agora token refreshed for channel: ${channelName}, user: ${userId}, region: ${result.region}`);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[37]++;
    res.json({
      success: true,
      data: {
        token: result.token,
        channelName,
        uid: result.uid,
        expiresAt: result.expiresAt,
        region: result.region,
        quality: result.quality,
        agoraAppId: process.env.AGORA_APP_ID
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[38]++;
    logger_1.logger.error('Enhanced Agora token refresh failed:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[39]++;
    res.status(500).json({
      success: false,
      error: 'Failed to refresh Agora token'
    });
  }
});
// Get channel metrics for monitoring
/* istanbul ignore next */
cov_1aq90g7ide().s[40]++;
router.get('/metrics/:channelName', async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[3]++;
  cov_1aq90g7ide().s[41]++;
  try {
    const {
      channelName
    } =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[42]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[43]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[44]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[11][0]++;
      cov_1aq90g7ide().s[45]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[11][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[46]++, await AgoraService_1.default.getChannelMetrics(channelName));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[47]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[48]++;
    logger_1.logger.error('Error getting channel metrics:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[49]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get channel metrics'
    });
  }
});
// Update channel metrics
/* istanbul ignore next */
cov_1aq90g7ide().s[50]++;
router.post('/metrics/:channelName', [(0, express_validator_1.body)('viewerCount').optional().isInt({
  min: 0
}).withMessage('Viewer count must be a non-negative integer'), (0, express_validator_1.body)('publisherCount').optional().isInt({
  min: 0
}).withMessage('Publisher count must be a non-negative integer'), (0, express_validator_1.body)('bandwidth').optional().isInt({
  min: 0
}).withMessage('Bandwidth must be a non-negative integer'), (0, express_validator_1.body)('latency').optional().isInt({
  min: 0
}).withMessage('Latency must be a non-negative integer')], async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[4]++;
  cov_1aq90g7ide().s[51]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[52]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1aq90g7ide().s[53]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[12][0]++;
      cov_1aq90g7ide().s[54]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[12][1]++;
    }
    const {
      channelName
    } =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[55]++, req.params);
    const {
      viewerCount,
      publisherCount,
      bandwidth,
      latency
    } =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[56]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[57]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[58]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[13][0]++;
      cov_1aq90g7ide().s[59]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[13][1]++;
    }
    cov_1aq90g7ide().s[60]++;
    await AgoraService_1.default.updateChannelMetrics(channelName, {
      viewerCount,
      publisherCount,
      bandwidth,
      latency
    });
    /* istanbul ignore next */
    cov_1aq90g7ide().s[61]++;
    res.json({
      success: true,
      message: 'Channel metrics updated successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[62]++;
    logger_1.logger.error('Error updating channel metrics:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[63]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update channel metrics'
    });
  }
});
// Get all active channels
/* istanbul ignore next */
cov_1aq90g7ide().s[64]++;
router.get('/channels', async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[5]++;
  cov_1aq90g7ide().s[65]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[66]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[67]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[14][0]++;
      cov_1aq90g7ide().s[68]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[14][1]++;
    }
    const channels =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[69]++, await AgoraService_1.default.getActiveChannels());
    /* istanbul ignore next */
    cov_1aq90g7ide().s[70]++;
    res.json({
      success: true,
      data: channels
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[71]++;
    logger_1.logger.error('Error getting active channels:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get active channels'
    });
  }
});
// Get region statistics
/* istanbul ignore next */
cov_1aq90g7ide().s[73]++;
router.get('/regions', async (req, res) => {
  /* istanbul ignore next */
  cov_1aq90g7ide().f[6]++;
  cov_1aq90g7ide().s[74]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[75]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[76]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1aq90g7ide().b[15][0]++;
      cov_1aq90g7ide().s[77]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1aq90g7ide().b[15][1]++;
    }
    const regionStats =
    /* istanbul ignore next */
    (cov_1aq90g7ide().s[78]++, await AgoraService_1.default.getRegionStats());
    /* istanbul ignore next */
    cov_1aq90g7ide().s[79]++;
    res.json({
      success: true,
      data: regionStats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1aq90g7ide().s[80]++;
    logger_1.logger.error('Error getting region stats:', error);
    /* istanbul ignore next */
    cov_1aq90g7ide().s[81]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get region statistics'
    });
  }
});
/* istanbul ignore next */
cov_1aq90g7ide().s[82]++;
exports.default = router;