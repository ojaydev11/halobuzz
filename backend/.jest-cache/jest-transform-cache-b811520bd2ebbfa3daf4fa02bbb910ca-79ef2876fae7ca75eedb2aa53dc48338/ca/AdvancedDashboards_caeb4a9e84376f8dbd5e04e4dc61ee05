e709830ef80d81da2c4f6b6d4e319ba5
"use strict";

// HaloBuzz Advanced Analytics Dashboards
// Real-time dashboards with 100+ event schemas and comprehensive metrics
/* istanbul ignore next */
function cov_yqb17cjjs() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\analytics\\AdvancedDashboards.ts";
  var hash = "c49636a67dc9c9af056116faf52719ec6b9291dd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\analytics\\AdvancedDashboards.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 75
        }
      },
      "2": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 72
        }
      },
      "3": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "4": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 43
        }
      },
      "5": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "6": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 237,
          column: 2
        }
      },
      "7": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 684,
          column: 1
        }
      },
      "8": {
        start: {
          line: 687,
          column: 13
        },
        end: {
          line: 687,
          column: 60
        }
      },
      "9": {
        start: {
          line: 688,
          column: 17
        },
        end: {
          line: 688,
          column: 26
        }
      },
      "10": {
        start: {
          line: 689,
          column: 18
        },
        end: {
          line: 689,
          column: 27
        }
      },
      "11": {
        start: {
          line: 690,
          column: 25
        },
        end: {
          line: 690,
          column: 34
        }
      },
      "12": {
        start: {
          line: 691,
          column: 23
        },
        end: {
          line: 691,
          column: 32
        }
      },
      "13": {
        start: {
          line: 693,
          column: 8
        },
        end: {
          line: 693,
          column: 16
        }
      },
      "14": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 694,
          column: 36
        }
      },
      "15": {
        start: {
          line: 698,
          column: 8
        },
        end: {
          line: 700,
          column: 9
        }
      },
      "16": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 699,
          column: 57
        }
      },
      "17": {
        start: {
          line: 701,
          column: 8
        },
        end: {
          line: 701,
          column: 90
        }
      },
      "18": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 705,
          column: 56
        }
      },
      "19": {
        start: {
          line: 709,
          column: 8
        },
        end: {
          line: 709,
          column: 52
        }
      },
      "20": {
        start: {
          line: 713,
          column: 8
        },
        end: {
          line: 713,
          column: 89
        }
      },
      "21": {
        start: {
          line: 713,
          column: 64
        },
        end: {
          line: 713,
          column: 87
        }
      },
      "22": {
        start: {
          line: 717,
          column: 8
        },
        end: {
          line: 738,
          column: 9
        }
      },
      "23": {
        start: {
          line: 718,
          column: 12
        },
        end: {
          line: 718,
          column: 90
        }
      },
      "24": {
        start: {
          line: 720,
          column: 27
        },
        end: {
          line: 720,
          column: 57
        }
      },
      "25": {
        start: {
          line: 721,
          column: 12
        },
        end: {
          line: 723,
          column: 13
        }
      },
      "26": {
        start: {
          line: 722,
          column: 16
        },
        end: {
          line: 722,
          column: 35
        }
      },
      "27": {
        start: {
          line: 725,
          column: 25
        },
        end: {
          line: 725,
          column: 70
        }
      },
      "28": {
        start: {
          line: 727,
          column: 12
        },
        end: {
          line: 731,
          column: 15
        }
      },
      "29": {
        start: {
          line: 732,
          column: 12
        },
        end: {
          line: 732,
          column: 88
        }
      },
      "30": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 733,
          column: 24
        }
      },
      "31": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 736,
          column: 77
        }
      },
      "32": {
        start: {
          line: 737,
          column: 12
        },
        end: {
          line: 737,
          column: 24
        }
      },
      "33": {
        start: {
          line: 743,
          column: 26
        },
        end: {
          line: 743,
          column: 53
        }
      },
      "34": {
        start: {
          line: 744,
          column: 8
        },
        end: {
          line: 770,
          column: 9
        }
      },
      "35": {
        start: {
          line: 746,
          column: 16
        },
        end: {
          line: 746,
          column: 64
        }
      },
      "36": {
        start: {
          line: 748,
          column: 16
        },
        end: {
          line: 748,
          column: 66
        }
      },
      "37": {
        start: {
          line: 750,
          column: 16
        },
        end: {
          line: 755,
          column: 18
        }
      },
      "38": {
        start: {
          line: 757,
          column: 16
        },
        end: {
          line: 762,
          column: 20
        }
      },
      "39": {
        start: {
          line: 757,
          column: 61
        },
        end: {
          line: 762,
          column: 17
        }
      },
      "40": {
        start: {
          line: 764,
          column: 16
        },
        end: {
          line: 767,
          column: 20
        }
      },
      "41": {
        start: {
          line: 764,
          column: 61
        },
        end: {
          line: 767,
          column: 17
        }
      },
      "42": {
        start: {
          line: 769,
          column: 16
        },
        end: {
          line: 769,
          column: 81
        }
      },
      "43": {
        start: {
          line: 773,
          column: 27
        },
        end: {
          line: 773,
          column: 46
        }
      },
      "44": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 776,
          column: 9
        }
      },
      "45": {
        start: {
          line: 775,
          column: 12
        },
        end: {
          line: 775,
          column: 40
        }
      },
      "46": {
        start: {
          line: 777,
          column: 8
        },
        end: {
          line: 779,
          column: 9
        }
      },
      "47": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 35
        }
      },
      "48": {
        start: {
          line: 780,
          column: 8
        },
        end: {
          line: 782,
          column: 9
        }
      },
      "49": {
        start: {
          line: 781,
          column: 12
        },
        end: {
          line: 781,
          column: 41
        }
      },
      "50": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 785,
          column: 9
        }
      },
      "51": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 784,
          column: 41
        }
      },
      "52": {
        start: {
          line: 786,
          column: 8
        },
        end: {
          line: 788,
          column: 9
        }
      },
      "53": {
        start: {
          line: 787,
          column: 12
        },
        end: {
          line: 787,
          column: 42
        }
      },
      "54": {
        start: {
          line: 789,
          column: 8
        },
        end: {
          line: 789,
          column: 25
        }
      },
      "55": {
        start: {
          line: 793,
          column: 26
        },
        end: {
          line: 793,
          column: 58
        }
      },
      "56": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 796,
          column: 9
        }
      },
      "57": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 795,
          column: 66
        }
      },
      "58": {
        start: {
          line: 798,
          column: 8
        },
        end: {
          line: 824,
          column: 9
        }
      },
      "59": {
        start: {
          line: 799,
          column: 31
        },
        end: {
          line: 822,
          column: 38
        }
      },
      "60": {
        start: {
          line: 800,
          column: 16
        },
        end: {
          line: 821,
          column: 17
        }
      },
      "61": {
        start: {
          line: 801,
          column: 33
        },
        end: {
          line: 801,
          column: 103
        }
      },
      "62": {
        start: {
          line: 802,
          column: 20
        },
        end: {
          line: 807,
          column: 23
        }
      },
      "63": {
        start: {
          line: 809,
          column: 20
        },
        end: {
          line: 811,
          column: 21
        }
      },
      "64": {
        start: {
          line: 810,
          column: 24
        },
        end: {
          line: 810,
          column: 61
        }
      },
      "65": {
        start: {
          line: 814,
          column: 20
        },
        end: {
          line: 814,
          column: 83
        }
      },
      "66": {
        start: {
          line: 815,
          column: 20
        },
        end: {
          line: 820,
          column: 23
        }
      },
      "67": {
        start: {
          line: 823,
          column: 12
        },
        end: {
          line: 823,
          column: 81
        }
      },
      "68": {
        start: {
          line: 825,
          column: 8
        },
        end: {
          line: 825,
          column: 84
        }
      },
      "69": {
        start: {
          line: 829,
          column: 26
        },
        end: {
          line: 829,
          column: 58
        }
      },
      "70": {
        start: {
          line: 830,
          column: 8
        },
        end: {
          line: 831,
          column: 19
        }
      },
      "71": {
        start: {
          line: 831,
          column: 12
        },
        end: {
          line: 831,
          column: 19
        }
      },
      "72": {
        start: {
          line: 832,
          column: 8
        },
        end: {
          line: 839,
          column: 9
        }
      },
      "73": {
        start: {
          line: 833,
          column: 32
        },
        end: {
          line: 833,
          column: 61
        }
      },
      "74": {
        start: {
          line: 834,
          column: 29
        },
        end: {
          line: 834,
          column: 67
        }
      },
      "75": {
        start: {
          line: 835,
          column: 12
        },
        end: {
          line: 838,
          column: 13
        }
      },
      "76": {
        start: {
          line: 836,
          column: 16
        },
        end: {
          line: 836,
          column: 40
        }
      },
      "77": {
        start: {
          line: 837,
          column: 16
        },
        end: {
          line: 837,
          column: 58
        }
      },
      "78": {
        start: {
          line: 840,
          column: 8
        },
        end: {
          line: 840,
          column: 84
        }
      },
      "79": {
        start: {
          line: 844,
          column: 8
        },
        end: {
          line: 845,
          column: 19
        }
      },
      "80": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 845,
          column: 19
        }
      },
      "81": {
        start: {
          line: 846,
          column: 8
        },
        end: {
          line: 857,
          column: 9
        }
      },
      "82": {
        start: {
          line: 847,
          column: 32
        },
        end: {
          line: 847,
          column: 99
        }
      },
      "83": {
        start: {
          line: 848,
          column: 12
        },
        end: {
          line: 856,
          column: 13
        }
      },
      "84": {
        start: {
          line: 849,
          column: 16
        },
        end: {
          line: 854,
          column: 19
        }
      },
      "85": {
        start: {
          line: 855,
          column: 16
        },
        end: {
          line: 855,
          column: 96
        }
      },
      "86": {
        start: {
          line: 862,
          column: 22
        },
        end: {
          line: 862,
          column: 94
        }
      },
      "87": {
        start: {
          line: 863,
          column: 8
        },
        end: {
          line: 864,
          column: 25
        }
      },
      "88": {
        start: {
          line: 864,
          column: 12
        },
        end: {
          line: 864,
          column: 25
        }
      },
      "89": {
        start: {
          line: 865,
          column: 8
        },
        end: {
          line: 867,
          column: 9
        }
      },
      "90": {
        start: {
          line: 866,
          column: 12
        },
        end: {
          line: 866,
          column: 37
        }
      },
      "91": {
        start: {
          line: 868,
          column: 8
        },
        end: {
          line: 870,
          column: 9
        }
      },
      "92": {
        start: {
          line: 869,
          column: 12
        },
        end: {
          line: 869,
          column: 37
        }
      },
      "93": {
        start: {
          line: 871,
          column: 8
        },
        end: {
          line: 873,
          column: 9
        }
      },
      "94": {
        start: {
          line: 872,
          column: 12
        },
        end: {
          line: 872,
          column: 39
        }
      },
      "95": {
        start: {
          line: 874,
          column: 8
        },
        end: {
          line: 874,
          column: 21
        }
      },
      "96": {
        start: {
          line: 878,
          column: 28
        },
        end: {
          line: 878,
          column: 93
        }
      },
      "97": {
        start: {
          line: 879,
          column: 29
        },
        end: {
          line: 883,
          column: 9
        }
      },
      "98": {
        start: {
          line: 884,
          column: 8
        },
        end: {
          line: 884,
          column: 55
        }
      },
      "99": {
        start: {
          line: 885,
          column: 8
        },
        end: {
          line: 885,
          column: 81
        }
      },
      "100": {
        start: {
          line: 886,
          column: 8
        },
        end: {
          line: 886,
          column: 69
        }
      },
      "101": {
        start: {
          line: 887,
          column: 8
        },
        end: {
          line: 887,
          column: 27
        }
      },
      "102": {
        start: {
          line: 891,
          column: 26
        },
        end: {
          line: 891,
          column: 58
        }
      },
      "103": {
        start: {
          line: 892,
          column: 8
        },
        end: {
          line: 894,
          column: 9
        }
      },
      "104": {
        start: {
          line: 893,
          column: 12
        },
        end: {
          line: 893,
          column: 66
        }
      },
      "105": {
        start: {
          line: 895,
          column: 33
        },
        end: {
          line: 899,
          column: 9
        }
      },
      "106": {
        start: {
          line: 900,
          column: 8
        },
        end: {
          line: 900,
          column: 59
        }
      },
      "107": {
        start: {
          line: 901,
          column: 8
        },
        end: {
          line: 901,
          column: 85
        }
      },
      "108": {
        start: {
          line: 902,
          column: 8
        },
        end: {
          line: 902,
          column: 62
        }
      },
      "109": {
        start: {
          line: 906,
          column: 8
        },
        end: {
          line: 908,
          column: 9
        }
      },
      "110": {
        start: {
          line: 907,
          column: 12
        },
        end: {
          line: 907,
          column: 66
        }
      },
      "111": {
        start: {
          line: 910,
          column: 8
        },
        end: {
          line: 910,
          column: 40
        }
      },
      "112": {
        start: {
          line: 912,
          column: 8
        },
        end: {
          line: 912,
          column: 44
        }
      },
      "113": {
        start: {
          line: 913,
          column: 8
        },
        end: {
          line: 913,
          column: 56
        }
      },
      "114": {
        start: {
          line: 914,
          column: 8
        },
        end: {
          line: 914,
          column: 62
        }
      },
      "115": {
        start: {
          line: 918,
          column: 26
        },
        end: {
          line: 918,
          column: 58
        }
      },
      "116": {
        start: {
          line: 919,
          column: 8
        },
        end: {
          line: 921,
          column: 9
        }
      },
      "117": {
        start: {
          line: 920,
          column: 12
        },
        end: {
          line: 920,
          column: 66
        }
      },
      "118": {
        start: {
          line: 922,
          column: 25
        },
        end: {
          line: 926,
          column: 9
        }
      },
      "119": {
        start: {
          line: 928,
          column: 8
        },
        end: {
          line: 937,
          column: 9
        }
      },
      "120": {
        start: {
          line: 929,
          column: 12
        },
        end: {
          line: 936,
          column: 13
        }
      },
      "121": {
        start: {
          line: 930,
          column: 29
        },
        end: {
          line: 930,
          column: 99
        }
      },
      "122": {
        start: {
          line: 931,
          column: 16
        },
        end: {
          line: 931,
          column: 51
        }
      },
      "123": {
        start: {
          line: 934,
          column: 16
        },
        end: {
          line: 934,
          column: 88
        }
      },
      "124": {
        start: {
          line: 935,
          column: 16
        },
        end: {
          line: 935,
          column: 71
        }
      },
      "125": {
        start: {
          line: 938,
          column: 8
        },
        end: {
          line: 938,
          column: 24
        }
      },
      "126": {
        start: {
          line: 942,
          column: 26
        },
        end: {
          line: 942,
          column: 58
        }
      },
      "127": {
        start: {
          line: 943,
          column: 8
        },
        end: {
          line: 945,
          column: 9
        }
      },
      "128": {
        start: {
          line: 944,
          column: 12
        },
        end: {
          line: 944,
          column: 66
        }
      },
      "129": {
        start: {
          line: 946,
          column: 8
        },
        end: {
          line: 946,
          column: 50
        }
      },
      "130": {
        start: {
          line: 950,
          column: 8
        },
        end: {
          line: 963,
          column: 9
        }
      },
      "131": {
        start: {
          line: 951,
          column: 30
        },
        end: {
          line: 951,
          column: 55
        }
      },
      "132": {
        start: {
          line: 953,
          column: 26
        },
        end: {
          line: 953,
          column: 93
        }
      },
      "133": {
        start: {
          line: 954,
          column: 12
        },
        end: {
          line: 954,
          column: 33
        }
      },
      "134": {
        start: {
          line: 955,
          column: 12
        },
        end: {
          line: 955,
          column: 48
        }
      },
      "135": {
        start: {
          line: 956,
          column: 12
        },
        end: {
          line: 956,
          column: 50
        }
      },
      "136": {
        start: {
          line: 957,
          column: 12
        },
        end: {
          line: 957,
          column: 79
        }
      },
      "137": {
        start: {
          line: 958,
          column: 12
        },
        end: {
          line: 958,
          column: 61
        }
      },
      "138": {
        start: {
          line: 959,
          column: 12
        },
        end: {
          line: 959,
          column: 25
        }
      },
      "139": {
        start: {
          line: 962,
          column: 12
        },
        end: {
          line: 962,
          column: 76
        }
      },
      "140": {
        start: {
          line: 968,
          column: 8
        },
        end: {
          line: 970,
          column: 9
        }
      },
      "141": {
        start: {
          line: 969,
          column: 12
        },
        end: {
          line: 969,
          column: 36
        }
      },
      "142": {
        start: {
          line: 971,
          column: 8
        },
        end: {
          line: 971,
          column: 38
        }
      },
      "143": {
        start: {
          line: 973,
          column: 8
        },
        end: {
          line: 973,
          column: 33
        }
      },
      "144": {
        start: {
          line: 974,
          column: 8
        },
        end: {
          line: 974,
          column: 40
        }
      },
      "145": {
        start: {
          line: 975,
          column: 8
        },
        end: {
          line: 975,
          column: 57
        }
      },
      "146": {
        start: {
          line: 978,
          column: 0
        },
        end: {
          line: 978,
          column: 60
        }
      },
      "147": {
        start: {
          line: 981,
          column: 4
        },
        end: {
          line: 981,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 692,
            column: 4
          },
          end: {
            line: 692,
            column: 5
          }
        },
        loc: {
          start: {
            line: 692,
            column: 18
          },
          end: {
            line: 695,
            column: 5
          }
        },
        line: 692
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 696,
            column: 4
          },
          end: {
            line: 696,
            column: 5
          }
        },
        loc: {
          start: {
            line: 696,
            column: 27
          },
          end: {
            line: 702,
            column: 5
          }
        },
        line: 696
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 704,
            column: 4
          },
          end: {
            line: 704,
            column: 5
          }
        },
        loc: {
          start: {
            line: 704,
            column: 30
          },
          end: {
            line: 706,
            column: 5
          }
        },
        line: 704
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 708,
            column: 4
          },
          end: {
            line: 708,
            column: 5
          }
        },
        loc: {
          start: {
            line: 708,
            column: 23
          },
          end: {
            line: 710,
            column: 5
          }
        },
        line: 708
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 712,
            column: 4
          },
          end: {
            line: 712,
            column: 5
          }
        },
        loc: {
          start: {
            line: 712,
            column: 38
          },
          end: {
            line: 714,
            column: 5
          }
        },
        line: 712
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 713,
            column: 59
          },
          end: {
            line: 713,
            column: 60
          }
        },
        loc: {
          start: {
            line: 713,
            column: 64
          },
          end: {
            line: 713,
            column: 87
          }
        },
        line: 713
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 716,
            column: 4
          },
          end: {
            line: 716,
            column: 5
          }
        },
        loc: {
          start: {
            line: 716,
            column: 60
          },
          end: {
            line: 739,
            column: 5
          }
        },
        line: 716
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 741,
            column: 4
          },
          end: {
            line: 741,
            column: 5
          }
        },
        loc: {
          start: {
            line: 741,
            column: 45
          },
          end: {
            line: 771,
            column: 5
          }
        },
        line: 741
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 757,
            column: 50
          },
          end: {
            line: 757,
            column: 51
          }
        },
        loc: {
          start: {
            line: 757,
            column: 61
          },
          end: {
            line: 762,
            column: 17
          }
        },
        line: 757
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 764,
            column: 50
          },
          end: {
            line: 764,
            column: 51
          }
        },
        loc: {
          start: {
            line: 764,
            column: 61
          },
          end: {
            line: 767,
            column: 17
          }
        },
        line: 764
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 772,
            column: 4
          },
          end: {
            line: 772,
            column: 5
          }
        },
        loc: {
          start: {
            line: 772,
            column: 27
          },
          end: {
            line: 790,
            column: 5
          }
        },
        line: 772
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 792,
            column: 4
          },
          end: {
            line: 792,
            column: 5
          }
        },
        loc: {
          start: {
            line: 792,
            column: 32
          },
          end: {
            line: 826,
            column: 5
          }
        },
        line: 792
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 799,
            column: 43
          },
          end: {
            line: 799,
            column: 44
          }
        },
        loc: {
          start: {
            line: 799,
            column: 55
          },
          end: {
            line: 822,
            column: 13
          }
        },
        line: 799
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 828,
            column: 4
          },
          end: {
            line: 828,
            column: 5
          }
        },
        loc: {
          start: {
            line: 828,
            column: 31
          },
          end: {
            line: 841,
            column: 5
          }
        },
        line: 828
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 843,
            column: 4
          },
          end: {
            line: 843,
            column: 5
          }
        },
        loc: {
          start: {
            line: 843,
            column: 36
          },
          end: {
            line: 858,
            column: 5
          }
        },
        line: 843
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 860,
            column: 4
          },
          end: {
            line: 860,
            column: 5
          }
        },
        loc: {
          start: {
            line: 860,
            column: 55
          },
          end: {
            line: 875,
            column: 5
          }
        },
        line: 860
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 877,
            column: 4
          },
          end: {
            line: 877,
            column: 5
          }
        },
        loc: {
          start: {
            line: 877,
            column: 31
          },
          end: {
            line: 888,
            column: 5
          }
        },
        line: 877
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 890,
            column: 4
          },
          end: {
            line: 890,
            column: 5
          }
        },
        loc: {
          start: {
            line: 890,
            column: 42
          },
          end: {
            line: 903,
            column: 5
          }
        },
        line: 890
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 905,
            column: 4
          },
          end: {
            line: 905,
            column: 5
          }
        },
        loc: {
          start: {
            line: 905,
            column: 33
          },
          end: {
            line: 915,
            column: 5
          }
        },
        line: 905
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 917,
            column: 4
          },
          end: {
            line: 917,
            column: 5
          }
        },
        loc: {
          start: {
            line: 917,
            column: 44
          },
          end: {
            line: 939,
            column: 5
          }
        },
        line: 917
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 941,
            column: 4
          },
          end: {
            line: 941,
            column: 5
          }
        },
        loc: {
          start: {
            line: 941,
            column: 33
          },
          end: {
            line: 947,
            column: 5
          }
        },
        line: 941
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 949,
            column: 4
          },
          end: {
            line: 949,
            column: 5
          }
        },
        loc: {
          start: {
            line: 949,
            column: 35
          },
          end: {
            line: 964,
            column: 5
          }
        },
        line: 949
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 966,
            column: 4
          },
          end: {
            line: 966,
            column: 5
          }
        },
        loc: {
          start: {
            line: 966,
            column: 14
          },
          end: {
            line: 976,
            column: 5
          }
        },
        line: 966
      },
      "23": {
        name: "createAdvancedDashboardManager",
        decl: {
          start: {
            line: 980,
            column: 9
          },
          end: {
            line: 980,
            column: 39
          }
        },
        loc: {
          start: {
            line: 980,
            column: 42
          },
          end: {
            line: 982,
            column: 1
          }
        },
        line: 980
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 705,
            column: 15
          },
          end: {
            line: 705,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 705,
            column: 15
          },
          end: {
            line: 705,
            column: 47
          }
        }, {
          start: {
            line: 705,
            column: 51
          },
          end: {
            line: 705,
            column: 55
          }
        }],
        line: 705
      },
      "1": {
        loc: {
          start: {
            line: 716,
            column: 46
          },
          end: {
            line: 716,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 716,
            column: 56
          },
          end: {
            line: 716,
            column: 58
          }
        }],
        line: 716
      },
      "2": {
        loc: {
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 721,
            column: 12
          },
          end: {
            line: 723,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 721
      },
      "3": {
        loc: {
          start: {
            line: 721,
            column: 16
          },
          end: {
            line: 721,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 721,
            column: 16
          },
          end: {
            line: 721,
            column: 22
          }
        }, {
          start: {
            line: 721,
            column: 26
          },
          end: {
            line: 721,
            column: 69
          }
        }],
        line: 721
      },
      "4": {
        loc: {
          start: {
            line: 744,
            column: 8
          },
          end: {
            line: 770,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 745,
            column: 12
          },
          end: {
            line: 746,
            column: 64
          }
        }, {
          start: {
            line: 747,
            column: 12
          },
          end: {
            line: 748,
            column: 66
          }
        }, {
          start: {
            line: 749,
            column: 12
          },
          end: {
            line: 755,
            column: 18
          }
        }, {
          start: {
            line: 756,
            column: 12
          },
          end: {
            line: 762,
            column: 20
          }
        }, {
          start: {
            line: 763,
            column: 12
          },
          end: {
            line: 767,
            column: 20
          }
        }, {
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 769,
            column: 81
          }
        }],
        line: 744
      },
      "5": {
        loc: {
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 776,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 774,
            column: 8
          },
          end: {
            line: 776,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 774
      },
      "6": {
        loc: {
          start: {
            line: 774,
            column: 12
          },
          end: {
            line: 774,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 774,
            column: 12
          },
          end: {
            line: 774,
            column: 40
          }
        }, {
          start: {
            line: 774,
            column: 44
          },
          end: {
            line: 774,
            column: 82
          }
        }],
        line: 774
      },
      "7": {
        loc: {
          start: {
            line: 777,
            column: 8
          },
          end: {
            line: 779,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 777,
            column: 8
          },
          end: {
            line: 779,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 777
      },
      "8": {
        loc: {
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 780,
            column: 8
          },
          end: {
            line: 782,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 780
      },
      "9": {
        loc: {
          start: {
            line: 780,
            column: 12
          },
          end: {
            line: 780,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 780,
            column: 12
          },
          end: {
            line: 780,
            column: 43
          }
        }, {
          start: {
            line: 780,
            column: 47
          },
          end: {
            line: 780,
            column: 75
          }
        }],
        line: 780
      },
      "10": {
        loc: {
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 783,
            column: 8
          },
          end: {
            line: 785,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 783
      },
      "11": {
        loc: {
          start: {
            line: 783,
            column: 12
          },
          end: {
            line: 783,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 783,
            column: 12
          },
          end: {
            line: 783,
            column: 47
          }
        }, {
          start: {
            line: 783,
            column: 51
          },
          end: {
            line: 783,
            column: 83
          }
        }],
        line: 783
      },
      "12": {
        loc: {
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 786,
            column: 8
          },
          end: {
            line: 788,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 786
      },
      "13": {
        loc: {
          start: {
            line: 786,
            column: 12
          },
          end: {
            line: 786,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 786,
            column: 12
          },
          end: {
            line: 786,
            column: 43
          }
        }, {
          start: {
            line: 786,
            column: 47
          },
          end: {
            line: 786,
            column: 78
          }
        }],
        line: 786
      },
      "14": {
        loc: {
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 796,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 794,
            column: 8
          },
          end: {
            line: 796,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 794
      },
      "15": {
        loc: {
          start: {
            line: 809,
            column: 20
          },
          end: {
            line: 811,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 809,
            column: 20
          },
          end: {
            line: 811,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 809
      },
      "16": {
        loc: {
          start: {
            line: 830,
            column: 8
          },
          end: {
            line: 831,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 830,
            column: 8
          },
          end: {
            line: 831,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 830
      },
      "17": {
        loc: {
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 838,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 835,
            column: 12
          },
          end: {
            line: 838,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 835
      },
      "18": {
        loc: {
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 845,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 845,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 844
      },
      "19": {
        loc: {
          start: {
            line: 848,
            column: 12
          },
          end: {
            line: 856,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 848,
            column: 12
          },
          end: {
            line: 856,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 848
      },
      "20": {
        loc: {
          start: {
            line: 862,
            column: 22
          },
          end: {
            line: 862,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 862,
            column: 77
          },
          end: {
            line: 862,
            column: 87
          }
        }, {
          start: {
            line: 862,
            column: 90
          },
          end: {
            line: 862,
            column: 94
          }
        }],
        line: 862
      },
      "21": {
        loc: {
          start: {
            line: 862,
            column: 22
          },
          end: {
            line: 862,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 862,
            column: 22
          },
          end: {
            line: 862,
            column: 46
          }
        }, {
          start: {
            line: 862,
            column: 50
          },
          end: {
            line: 862,
            column: 74
          }
        }],
        line: 862
      },
      "22": {
        loc: {
          start: {
            line: 863,
            column: 8
          },
          end: {
            line: 864,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 863,
            column: 8
          },
          end: {
            line: 864,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 863
      },
      "23": {
        loc: {
          start: {
            line: 865,
            column: 8
          },
          end: {
            line: 867,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 865,
            column: 8
          },
          end: {
            line: 867,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 865
      },
      "24": {
        loc: {
          start: {
            line: 868,
            column: 8
          },
          end: {
            line: 870,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 868,
            column: 8
          },
          end: {
            line: 870,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 868
      },
      "25": {
        loc: {
          start: {
            line: 871,
            column: 8
          },
          end: {
            line: 873,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 871,
            column: 8
          },
          end: {
            line: 873,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 871
      },
      "26": {
        loc: {
          start: {
            line: 892,
            column: 8
          },
          end: {
            line: 894,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 892,
            column: 8
          },
          end: {
            line: 894,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 892
      },
      "27": {
        loc: {
          start: {
            line: 906,
            column: 8
          },
          end: {
            line: 908,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 906,
            column: 8
          },
          end: {
            line: 908,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 906
      },
      "28": {
        loc: {
          start: {
            line: 919,
            column: 8
          },
          end: {
            line: 921,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 919,
            column: 8
          },
          end: {
            line: 921,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 919
      },
      "29": {
        loc: {
          start: {
            line: 943,
            column: 8
          },
          end: {
            line: 945,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 943,
            column: 8
          },
          end: {
            line: 945,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 943
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c49636a67dc9c9af056116faf52719ec6b9291dd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yqb17cjjs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yqb17cjjs();
cov_yqb17cjjs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_yqb17cjjs().s[1]++;
exports.AdvancedDashboardManager = exports.EXTENDED_EVENT_SCHEMAS = void 0;
/* istanbul ignore next */
cov_yqb17cjjs().s[2]++;
exports.createAdvancedDashboardManager = createAdvancedDashboardManager;
const events_1 =
/* istanbul ignore next */
(cov_yqb17cjjs().s[3]++, require("events"));
const logger_1 =
/* istanbul ignore next */
(cov_yqb17cjjs().s[4]++, require("../utils/logger"));
const performanceMonitor_1 =
/* istanbul ignore next */
(cov_yqb17cjjs().s[5]++, require("../utils/performanceMonitor"));
// Extended event schemas (100+ events)
/* istanbul ignore next */
cov_yqb17cjjs().s[6]++;
exports.EXTENDED_EVENT_SCHEMAS = {
  // Core match events
  'match.created': {
    required: ['matchId', 'gameMode', 'playerIds', 'serverRegion', 'expectedDuration'],
    properties: {
      matchId: 'string',
      gameMode: 'string',
      playerIds: 'array',
      serverRegion: 'string',
      expectedDuration: 'number'
    }
  },
  'match.started': {
    required: ['matchId', 'startTime', 'playerCount'],
    properties: {
      matchId: 'string',
      startTime: 'number',
      playerCount: 'number'
    }
  },
  'match.ended': {
    required: ['matchId', 'duration', 'outcome', 'reason'],
    properties: {
      matchId: 'string',
      duration: 'number',
      outcome: 'object',
      reason: 'string'
    }
  },
  'match.paused': {
    required: ['matchId', 'reason', 'pauseDuration'],
    properties: {
      matchId: 'string',
      reason: 'string',
      pauseDuration: 'number'
    }
  },
  'match.resumed': {
    required: ['matchId', 'resumeTime'],
    properties: {
      matchId: 'string',
      resumeTime: 'number'
    }
  },
  // Player lifecycle events
  'player.session_start': {
    required: ['playerId', 'sessionId', 'platform', 'clientVersion'],
    properties: {
      playerId: 'string',
      sessionId: 'string',
      platform: 'string',
      clientVersion: 'string'
    }
  },
  'player.session_end': {
    required: ['playerId', 'sessionId', 'duration', 'reason'],
    properties: {
      playerId: 'string',
      sessionId: 'string',
      duration: 'number',
      reason: 'string'
    }
  },
  'player.joined_match': {
    required: ['playerId', 'matchId', 'teamId', 'role'],
    properties: {
      playerId: 'string',
      matchId: 'string',
      teamId: 'string',
      role: 'string'
    }
  },
  'player.left_match': {
    required: ['playerId', 'matchId', 'reason', 'duration'],
    properties: {
      playerId: 'string',
      matchId: 'string',
      reason: 'string',
      duration: 'number'
    }
  },
  'player.reconnected': {
    required: ['playerId', 'matchId', 'disconnectDuration'],
    properties: {
      playerId: 'string',
      matchId: 'string',
      disconnectDuration: 'number'
    }
  },
  // Gameplay events
  'player.kill': {
    required: ['killerId', 'victimId', 'weapon', 'distance', 'headshot'],
    properties: {
      killerId: 'string',
      victimId: 'string',
      weapon: 'string',
      distance: 'number',
      headshot: 'boolean'
    }
  },
  'player.death': {
    required: ['victimId', 'killerId', 'weapon', 'position'],
    properties: {
      victimId: 'string',
      killerId: 'string',
      weapon: 'string',
      position: 'object'
    }
  },
  'player.assist': {
    required: ['assisterId', 'killerId', 'victimId', 'damageContribution'],
    properties: {
      assisterId: 'string',
      killerId: 'string',
      victimId: 'string',
      damageContribution: 'number'
    }
  },
  'player.revive': {
    required: ['reviverId', 'revivedId', 'reviveTime'],
    properties: {
      reviverId: 'string',
      revivedId: 'string',
      reviveTime: 'number'
    }
  },
  'player.level_up': {
    required: ['playerId', 'newLevel', 'experience', 'source'],
    properties: {
      playerId: 'string',
      newLevel: 'number',
      experience: 'number',
      source: 'string'
    }
  },
  // Combat events
  'combat.damage_dealt': {
    required: ['attackerId', 'targetId', 'damage', 'weaponId', 'bodyPart'],
    properties: {
      attackerId: 'string',
      targetId: 'string',
      damage: 'number',
      weaponId: 'string',
      bodyPart: 'string'
    }
  },
  'combat.healing_applied': {
    required: ['healerId', 'targetId', 'amount', 'healType'],
    properties: {
      healerId: 'string',
      targetId: 'string',
      amount: 'number',
      healType: 'string'
    }
  },
  'combat.ability_used': {
    required: ['playerId', 'abilityId', 'cooldown', 'energyCost', 'success'],
    properties: {
      playerId: 'string',
      abilityId: 'string',
      cooldown: 'number',
      energyCost: 'number',
      success: 'boolean'
    }
  },
  'combat.weapon_reload': {
    required: ['playerId', 'weaponId', 'reloadTime', 'ammoRemaining'],
    properties: {
      playerId: 'string',
      weaponId: 'string',
      reloadTime: 'number',
      ammoRemaining: 'number'
    }
  },
  'combat.critical_hit': {
    required: ['attackerId', 'targetId', 'damage', 'criticalMultiplier'],
    properties: {
      attackerId: 'string',
      targetId: 'string',
      damage: 'number',
      criticalMultiplier: 'number'
    }
  },
  // Movement events
  'movement.teleport': {
    required: ['playerId', 'fromPosition', 'toPosition', 'teleportType'],
    properties: {
      playerId: 'string',
      fromPosition: 'object',
      toPosition: 'object',
      teleportType: 'string'
    }
  },
  'movement.fall_damage': {
    required: ['playerId', 'damage', 'fallHeight', 'survived'],
    properties: {
      playerId: 'string',
      damage: 'number',
      fallHeight: 'number',
      survived: 'boolean'
    }
  },
  'movement.slide_started': {
    required: ['playerId', 'position', 'initialVelocity'],
    properties: {
      playerId: 'string',
      position: 'object',
      initialVelocity: 'object'
    }
  },
  'movement.climb_started': {
    required: ['playerId', 'surfaceType', 'height'],
    properties: {
      playerId: 'string',
      surfaceType: 'string',
      height: 'number'
    }
  },
  // Economy events
  'economy.purchase': {
    required: ['playerId', 'itemId', 'cost', 'currency', 'success'],
    properties: {
      playerId: 'string',
      itemId: 'string',
      cost: 'number',
      currency: 'string',
      success: 'boolean'
    }
  },
  'economy.currency_earned': {
    required: ['playerId', 'amount', 'currency', 'source'],
    properties: {
      playerId: 'string',
      amount: 'number',
      currency: 'string',
      source: 'string'
    }
  },
  'economy.item_crafted': {
    required: ['playerId', 'itemId', 'materials', 'craftingTime'],
    properties: {
      playerId: 'string',
      itemId: 'string',
      materials: 'array',
      craftingTime: 'number'
    }
  },
  'economy.trade_completed': {
    required: ['buyerId', 'sellerId', 'itemId', 'price'],
    properties: {
      buyerId: 'string',
      sellerId: 'string',
      itemId: 'string',
      price: 'number'
    }
  },
  // Performance events
  'performance.fps_drop': {
    required: ['playerId', 'fps', 'duration', 'cause'],
    properties: {
      playerId: 'string',
      fps: 'number',
      duration: 'number',
      cause: 'string'
    }
  },
  'performance.lag_spike': {
    required: ['playerId', 'latency', 'duration', 'packetLoss'],
    properties: {
      playerId: 'string',
      latency: 'number',
      duration: 'number',
      packetLoss: 'number'
    }
  },
  'performance.memory_warning': {
    required: ['playerId', 'memoryUsage', 'threshold', 'platform'],
    properties: {
      playerId: 'string',
      memoryUsage: 'number',
      threshold: 'number',
      platform: 'string'
    }
  },
  'performance.crash': {
    required: ['playerId', 'crashType', 'stackTrace', 'deviceInfo'],
    properties: {
      playerId: 'string',
      crashType: 'string',
      stackTrace: 'string',
      deviceInfo: 'object'
    }
  },
  // Security events
  'security.suspected_cheat': {
    required: ['playerId', 'cheatType', 'confidence', 'evidence'],
    properties: {
      playerId: 'string',
      cheatType: 'string',
      confidence: 'number',
      evidence: 'object'
    }
  },
  'security.rate_limit_exceeded': {
    required: ['playerId', 'action', 'rate', 'limit'],
    properties: {
      playerId: 'string',
      action: 'string',
      rate: 'number',
      limit: 'number'
    }
  },
  'security.suspicious_movement': {
    required: ['playerId', 'movementType', 'velocity', 'flaggedReason'],
    properties: {
      playerId: 'string',
      movementType: 'string',
      velocity: 'object',
      flaggedReason: 'string'
    }
  },
  'security.account_flagged': {
    required: ['playerId', 'flagType', 'severity', 'autoAction'],
    properties: {
      playerId: 'string',
      flagType: 'string',
      severity: 'string',
      autoAction: 'string'
    }
  },
  // Social events
  'social.friend_request': {
    required: ['requesterId', 'targetId', 'accepted'],
    properties: {
      requesterId: 'string',
      targetId: 'string',
      accepted: 'boolean'
    }
  },
  'social.party_created': {
    required: ['partyId', 'leaderId', 'maxSize'],
    properties: {
      partyId: 'string',
      leaderId: 'string',
      maxSize: 'number'
    }
  },
  'social.party_joined': {
    required: ['partyId', 'playerId', 'invitedBy'],
    properties: {
      partyId: 'string',
      playerId: 'string',
      invitedBy: 'string'
    }
  },
  'social.chat_message': {
    required: ['senderId', 'channel', 'messageLength', 'filtered'],
    properties: {
      senderId: 'string',
      channel: 'string',
      messageLength: 'number',
      filtered: 'boolean'
    }
  },
  // Monetization events
  'monetization.iap_started': {
    required: ['playerId', 'productId', 'price', 'currency'],
    properties: {
      playerId: 'string',
      productId: 'string',
      price: 'number',
      currency: 'string'
    }
  },
  'monetization.iap_completed': {
    required: ['playerId', 'transactionId', 'productId', 'revenue'],
    properties: {
      playerId: 'string',
      transactionId: 'string',
      productId: 'string',
      revenue: 'number'
    }
  },
  'monetization.ad_viewed': {
    required: ['playerId', 'adType', 'duration', 'reward'],
    properties: {
      playerId: 'string',
      adType: 'string',
      duration: 'number',
      reward: 'object'
    }
  },
  'monetization.battle_pass_purchased': {
    required: ['playerId', 'seasonId', 'tier', 'price'],
    properties: {
      playerId: 'string',
      seasonId: 'string',
      tier: 'string',
      price: 'number'
    }
  },
  // System events
  'system.server_startup': {
    required: ['serverId', 'region', 'capacity', 'version'],
    properties: {
      serverId: 'string',
      region: 'string',
      capacity: 'number',
      version: 'string'
    }
  },
  'system.server_shutdown': {
    required: ['serverId', 'reason', 'uptime'],
    properties: {
      serverId: 'string',
      reason: 'string',
      uptime: 'number'
    }
  },
  'system.autoscale_triggered': {
    required: ['region', 'currentCapacity', 'targetCapacity', 'trigger'],
    properties: {
      region: 'string',
      currentCapacity: 'number',
      targetCapacity: 'number',
      trigger: 'string'
    }
  },
  'system.database_query': {
    required: ['query', 'duration', 'recordsAffected', 'success'],
    properties: {
      query: 'string',
      duration: 'number',
      recordsAffected: 'number',
      success: 'boolean'
    }
  },
  // Additional game-specific events (reaching 100+ total)
  'arena.tower_destroyed': {
    required: ['towerId', 'destroyedBy', 'teamId', 'gameTime'],
    properties: {
      towerId: 'string',
      destroyedBy: 'string',
      teamId: 'string',
      gameTime: 'number'
    }
  },
  'arena.objective_captured': {
    required: ['objectiveId', 'capturedBy', 'captureTime', 'contestedTime'],
    properties: {
      objectiveId: 'string',
      capturedBy: 'string',
      captureTime: 'number',
      contestedTime: 'number'
    }
  },
  'royale.zone_shrink': {
    required: ['phase', 'newRadius', 'damagePerSecond', 'playersInZone'],
    properties: {
      phase: 'number',
      newRadius: 'number',
      damagePerSecond: 'number',
      playersInZone: 'number'
    }
  },
  'royale.loot_spawned': {
    required: ['lootId', 'position', 'rarity', 'itemType'],
    properties: {
      lootId: 'string',
      position: 'object',
      rarity: 'string',
      itemType: 'string'
    }
  },
  'royale.vehicle_entered': {
    required: ['playerId', 'vehicleId', 'seat', 'fuelLevel'],
    properties: {
      playerId: 'string',
      vehicleId: 'string',
      seat: 'string',
      fuelLevel: 'number'
    }
  }
  // ... and many more to reach 100+ events
};
// Advanced dashboard definitions
const ADVANCED_DASHBOARDS =
/* istanbul ignore next */
(cov_yqb17cjjs().s[7]++, [{
  id: 'real-time-overview',
  name: 'Real-time Game Overview',
  category: 'overview',
  description: 'Live metrics for all games with KPI tracking',
  refreshInterval: 5000,
  permissions: ['view_dashboards'],
  tags: ['real-time', 'kpi', 'overview'],
  createdBy: 'system',
  lastModified: Date.now(),
  widgets: [{
    id: 'concurrent-players',
    type: 'metric',
    title: 'Concurrent Players',
    query: 'SELECT COUNT(DISTINCT playerId) FROM active_sessions WHERE timestamp > NOW() - INTERVAL 1 MINUTE',
    position: {
      x: 0,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 5000,
    config: {
      format: 'number',
      trend: true,
      target: 10000,
      thresholds: {
        warning: 8000,
        critical: 5000
      }
    },
    filters: []
  }, {
    id: 'matches-per-minute',
    type: 'metric',
    title: 'Matches Started (Last Hour)',
    query: 'SELECT COUNT(*) FROM matches WHERE startTime > NOW() - INTERVAL 1 HOUR',
    position: {
      x: 3,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 5000,
    config: {
      format: 'number',
      trend: true
    },
    filters: []
  }, {
    id: 'revenue-today',
    type: 'metric',
    title: "Today's Revenue",
    query: 'SELECT SUM(revenue) FROM iap_completed WHERE DATE(timestamp) = CURDATE()',
    position: {
      x: 6,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'currency',
      trend: true
    },
    filters: []
  }, {
    id: 'player-distribution',
    type: 'chart',
    title: 'Players by Game Mode',
    query: 'SELECT gameMode, COUNT(*) as players FROM active_matches GROUP BY gameMode',
    position: {
      x: 0,
      y: 2,
      width: 6,
      height: 4
    },
    refreshInterval: 10000,
    config: {
      type: 'pie',
      colors: ['#42A5F5', '#66BB6A', '#FFA726', '#EF5350', '#AB47BC']
    },
    filters: []
  }, {
    id: 'global-player-heatmap',
    type: 'map',
    title: 'Global Player Distribution',
    query: 'SELECT region, COUNT(*) as players FROM active_sessions GROUP BY region',
    position: {
      x: 6,
      y: 2,
      width: 6,
      height: 4
    },
    refreshInterval: 30000,
    config: {
      mapType: 'world',
      metric: 'players',
      colorScale: 'blues'
    },
    filters: []
  }, {
    id: 'hourly-dau',
    type: 'chart',
    title: 'Daily Active Users (Last 7 Days)',
    query: 'SELECT DATE(timestamp) as date, COUNT(DISTINCT playerId) as dau FROM player_sessions WHERE timestamp > NOW() - INTERVAL 7 DAY GROUP BY DATE(timestamp)',
    position: {
      x: 0,
      y: 6,
      width: 12,
      height: 3
    },
    refreshInterval: 3600000,
    config: {
      type: 'line',
      xAxis: 'date',
      yAxis: 'dau',
      target: 50000
    },
    filters: []
  }]
}, {
  id: 'performance-monitoring',
  name: 'Performance Monitoring',
  category: 'performance',
  description: 'Real-time performance metrics and alerts',
  refreshInterval: 10000,
  permissions: ['view_performance'],
  tags: ['performance', 'monitoring', 'alerts'],
  createdBy: 'system',
  lastModified: Date.now(),
  widgets: [{
    id: 'avg-response-time',
    type: 'gauge',
    title: 'Average Response Time',
    query: 'SELECT AVG(responseTime) as avgResponse FROM api_requests WHERE timestamp > NOW() - INTERVAL 5 MINUTES',
    position: {
      x: 0,
      y: 0,
      width: 4,
      height: 3
    },
    refreshInterval: 5000,
    config: {
      min: 0,
      max: 1000,
      unit: 'ms',
      thresholds: [{
        value: 100,
        color: '#4CAF50'
      }, {
        value: 300,
        color: '#FF9800'
      }, {
        value: 500,
        color: '#F44336'
      }]
    },
    filters: [],
    alerts: [{
      condition: 'value > 300',
      threshold: 300,
      action: 'send_alert'
    }]
  }, {
    id: 'error-rate',
    type: 'gauge',
    title: 'Error Rate (%)',
    query: 'SELECT (COUNT(CASE WHEN success = false THEN 1 END) * 100.0 / COUNT(*)) as errorRate FROM api_requests WHERE timestamp > NOW() - INTERVAL 5 MINUTES',
    position: {
      x: 4,
      y: 0,
      width: 4,
      height: 3
    },
    refreshInterval: 5000,
    config: {
      min: 0,
      max: 10,
      unit: '%',
      thresholds: [{
        value: 1,
        color: '#4CAF50'
      }, {
        value: 3,
        color: '#FF9800'
      }, {
        value: 5,
        color: '#F44336'
      }]
    },
    filters: [],
    alerts: [{
      condition: 'value > 2',
      threshold: 2,
      action: 'send_alert'
    }]
  }, {
    id: 'server-cpu-usage',
    type: 'chart',
    title: 'Server CPU Usage',
    query: 'SELECT timestamp, serverId, cpuUsage FROM server_metrics WHERE timestamp > NOW() - INTERVAL 1 HOUR ORDER BY timestamp',
    position: {
      x: 8,
      y: 0,
      width: 4,
      height: 3
    },
    refreshInterval: 10000,
    config: {
      type: 'line',
      multiSeries: true,
      yAxis: {
        min: 0,
        max: 100,
        unit: '%'
      }
    },
    filters: []
  }, {
    id: 'fps-distribution',
    type: 'chart',
    title: 'FPS Distribution (Client)',
    query: 'SELECT fps, COUNT(*) as count FROM fps_reports WHERE timestamp > NOW() - INTERVAL 10 MINUTES GROUP BY FLOOR(fps/10)*10',
    position: {
      x: 0,
      y: 3,
      width: 6,
      height: 3
    },
    refreshInterval: 30000,
    config: {
      type: 'histogram',
      bins: 10,
      xAxis: {
        label: 'FPS Range'
      },
      yAxis: {
        label: 'Player Count'
      }
    },
    filters: []
  }, {
    id: 'latency-heatmap',
    type: 'heatmap',
    title: 'Latency by Region',
    query: 'SELECT region, AVG(latency) as avgLatency FROM connection_stats WHERE timestamp > NOW() - INTERVAL 15 MINUTES GROUP BY region',
    position: {
      x: 6,
      y: 3,
      width: 6,
      height: 3
    },
    refreshInterval: 15000,
    config: {
      colorScale: 'reds',
      unit: 'ms'
    },
    filters: []
  }]
}, {
  id: 'player-behavior-analytics',
  name: 'Player Behavior Analytics',
  category: 'gameplay',
  description: 'In-depth analysis of player behavior patterns',
  refreshInterval: 60000,
  permissions: ['view_analytics'],
  tags: ['behavior', 'engagement', 'retention'],
  createdBy: 'system',
  lastModified: Date.now(),
  widgets: [{
    id: 'session-length-distribution',
    type: 'chart',
    title: 'Session Length Distribution',
    query: 'SELECT FLOOR(duration/300000)*5 as minutes, COUNT(*) as sessions FROM player_sessions WHERE DATE(startTime) = CURDATE() GROUP BY FLOOR(duration/300000)',
    position: {
      x: 0,
      y: 0,
      width: 6,
      height: 3
    },
    refreshInterval: 300000,
    config: {
      type: 'bar',
      xAxis: {
        label: 'Session Length (minutes)'
      },
      yAxis: {
        label: 'Number of Sessions'
      }
    },
    filters: []
  }, {
    id: 'retention-funnel',
    type: 'funnel',
    title: 'Player Retention Funnel',
    query: 'SELECT stage, playerCount FROM retention_funnel WHERE date = CURDATE()',
    position: {
      x: 6,
      y: 0,
      width: 6,
      height: 3
    },
    refreshInterval: 3600000,
    config: {
      stages: ['New Users', 'D1 Return', 'D7 Return', 'D30 Return'],
      colors: ['#42A5F5', '#66BB6A', '#FFA726', '#EF5350']
    },
    filters: []
  }, {
    id: 'game-mode-preference',
    type: 'table',
    title: 'Game Mode Preferences by Player Segment',
    query: 'SELECT playerSegment, gameMode, COUNT(*) as matches, AVG(duration) as avgDuration FROM match_participations mp JOIN player_segments ps ON mp.playerId = ps.playerId WHERE mp.timestamp > NOW() - INTERVAL 7 DAY GROUP BY playerSegment, gameMode',
    position: {
      x: 0,
      y: 3,
      width: 12,
      height: 4
    },
    refreshInterval: 3600000,
    config: {
      columns: [{
        field: 'playerSegment',
        title: 'Player Segment',
        sortable: true
      }, {
        field: 'gameMode',
        title: 'Game Mode',
        sortable: true
      }, {
        field: 'matches',
        title: 'Total Matches',
        sortable: true,
        format: 'number'
      }, {
        field: 'avgDuration',
        title: 'Avg Duration',
        sortable: true,
        format: 'duration'
      }],
      pageSize: 20
    },
    filters: []
  }, {
    id: 'churn-prediction',
    type: 'chart',
    title: 'Churn Risk Score Distribution',
    query: 'SELECT churnRiskScore, COUNT(*) as playerCount FROM player_churn_scores WHERE calculatedAt > NOW() - INTERVAL 1 DAY GROUP BY FLOOR(churnRiskScore*10)/10',
    position: {
      x: 0,
      y: 7,
      width: 6,
      height: 3
    },
    refreshInterval: 3600000,
    config: {
      type: 'area',
      xAxis: {
        label: 'Churn Risk Score'
      },
      yAxis: {
        label: 'Player Count'
      },
      colors: ['#FF5722']
    },
    filters: []
  }, {
    id: 'feature-adoption',
    type: 'chart',
    title: 'Feature Adoption Timeline',
    query: 'SELECT DATE(timestamp) as date, featureId, COUNT(DISTINCT playerId) as users FROM feature_usage WHERE timestamp > NOW() - INTERVAL 30 DAY GROUP BY DATE(timestamp), featureId',
    position: {
      x: 6,
      y: 7,
      width: 6,
      height: 3
    },
    refreshInterval: 3600000,
    config: {
      type: 'line',
      multiSeries: true,
      xAxis: {
        label: 'Date'
      },
      yAxis: {
        label: 'Active Users'
      }
    },
    filters: []
  }]
}, {
  id: 'monetization-dashboard',
  name: 'Monetization & Revenue',
  category: 'monetization',
  description: 'Revenue tracking and monetization metrics',
  refreshInterval: 30000,
  permissions: ['view_revenue'],
  tags: ['revenue', 'iap', 'monetization'],
  createdBy: 'system',
  lastModified: Date.now(),
  widgets: [{
    id: 'daily-revenue',
    type: 'metric',
    title: 'Daily Revenue',
    query: 'SELECT SUM(revenue) as dailyRevenue FROM iap_completed WHERE DATE(timestamp) = CURDATE()',
    position: {
      x: 0,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'currency',
      trend: true,
      target: 50000,
      comparison: 'yesterday'
    },
    filters: []
  }, {
    id: 'arpu',
    type: 'metric',
    title: 'ARPU (Daily)',
    query: 'SELECT (SUM(revenue) / COUNT(DISTINCT playerId)) as arpu FROM iap_completed WHERE DATE(timestamp) = CURDATE()',
    position: {
      x: 3,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'currency',
      trend: true
    },
    filters: []
  }, {
    id: 'conversion-rate',
    type: 'metric',
    title: 'Conversion Rate (%)',
    query: 'SELECT (COUNT(DISTINCT buyer.playerId) * 100.0 / COUNT(DISTINCT all_players.playerId)) as conversionRate FROM (SELECT DISTINCT playerId FROM iap_completed WHERE DATE(timestamp) = CURDATE()) buyer CROSS JOIN (SELECT DISTINCT playerId FROM player_sessions WHERE DATE(timestamp) = CURDATE()) all_players',
    position: {
      x: 6,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'percentage',
      trend: true
    },
    filters: []
  }, {
    id: 'revenue-by-product',
    type: 'chart',
    title: 'Revenue by Product Category',
    query: 'SELECT productCategory, SUM(revenue) as revenue FROM iap_completed WHERE timestamp > NOW() - INTERVAL 7 DAY GROUP BY productCategory',
    position: {
      x: 9,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 60000,
    config: {
      type: 'doughnut',
      colors: ['#42A5F5', '#66BB6A', '#FFA726', '#EF5350', '#AB47BC']
    },
    filters: []
  }, {
    id: 'revenue-timeline',
    type: 'chart',
    title: 'Revenue Timeline (Last 30 Days)',
    query: 'SELECT DATE(timestamp) as date, SUM(revenue) as revenue FROM iap_completed WHERE timestamp > NOW() - INTERVAL 30 DAY GROUP BY DATE(timestamp) ORDER BY date',
    position: {
      x: 0,
      y: 2,
      width: 8,
      height: 3
    },
    refreshInterval: 300000,
    config: {
      type: 'line',
      xAxis: {
        label: 'Date'
      },
      yAxis: {
        label: 'Revenue ($)',
        format: 'currency'
      },
      trend: true
    },
    filters: []
  }, {
    id: 'ltv-cohorts',
    type: 'table',
    title: 'LTV by Cohort',
    query: 'SELECT cohortMonth, daysSinceInstall, AVG(ltv) as avgLTV, COUNT(*) as playerCount FROM player_ltv WHERE cohortMonth >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY cohortMonth, daysSinceInstall',
    position: {
      x: 8,
      y: 2,
      width: 4,
      height: 3
    },
    refreshInterval: 3600000,
    config: {
      columns: [{
        field: 'cohortMonth',
        title: 'Cohort',
        format: 'date'
      }, {
        field: 'daysSinceInstall',
        title: 'Days',
        format: 'number'
      }, {
        field: 'avgLTV',
        title: 'Avg LTV',
        format: 'currency'
      }, {
        field: 'playerCount',
        title: 'Players',
        format: 'number'
      }],
      pageSize: 15
    },
    filters: []
  }]
}, {
  id: 'security-monitoring',
  name: 'Security & Anti-Cheat',
  category: 'security',
  description: 'Security monitoring and cheat detection',
  refreshInterval: 30000,
  permissions: ['view_security'],
  tags: ['security', 'anti-cheat', 'monitoring'],
  createdBy: 'system',
  lastModified: Date.now(),
  widgets: [{
    id: 'suspected-cheaters',
    type: 'metric',
    title: 'Suspected Cheaters (24h)',
    query: 'SELECT COUNT(DISTINCT playerId) FROM suspected_cheat WHERE timestamp > NOW() - INTERVAL 24 HOUR',
    position: {
      x: 0,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'number',
      trend: true,
      thresholds: {
        warning: 50,
        critical: 100
      }
    },
    filters: [],
    alerts: [{
      condition: 'value > 100',
      threshold: 100,
      action: 'send_alert'
    }]
  }, {
    id: 'banned-accounts',
    type: 'metric',
    title: 'Accounts Banned Today',
    query: 'SELECT COUNT(*) FROM account_bans WHERE DATE(banTime) = CURDATE()',
    position: {
      x: 3,
      y: 0,
      width: 3,
      height: 2
    },
    refreshInterval: 30000,
    config: {
      format: 'number',
      trend: true
    },
    filters: []
  }, {
    id: 'cheat-types',
    type: 'chart',
    title: 'Cheat Detection by Type',
    query: 'SELECT cheatType, COUNT(*) as detections FROM suspected_cheat WHERE timestamp > NOW() - INTERVAL 7 DAY GROUP BY cheatType',
    position: {
      x: 6,
      y: 0,
      width: 6,
      height: 3
    },
    refreshInterval: 60000,
    config: {
      type: 'bar',
      colors: ['#F44336', '#E91E63', '#9C27B0', '#673AB7']
    },
    filters: []
  }, {
    id: 'security-alerts-timeline',
    type: 'timeline',
    title: 'Security Alerts Timeline',
    query: 'SELECT timestamp, alertType, severity, playerId, description FROM security_alerts WHERE timestamp > NOW() - INTERVAL 6 HOUR ORDER BY timestamp DESC',
    position: {
      x: 0,
      y: 2,
      width: 12,
      height: 4
    },
    refreshInterval: 30000,
    config: {
      timeField: 'timestamp',
      titleField: 'alertType',
      descriptionField: 'description',
      severityColors: {
        low: '#4CAF50',
        medium: '#FF9800',
        high: '#F44336',
        critical: '#9C27B0'
      }
    },
    filters: []
  }]
}]);
// Live dashboard data manager
class AdvancedDashboardManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  logger =
  /* istanbul ignore next */
  (cov_yqb17cjjs().s[8]++, new logger_1.Logger('AdvancedDashboardManager'));
  dashboards =
  /* istanbul ignore next */
  (cov_yqb17cjjs().s[9]++, new Map());
  widgetCache =
  /* istanbul ignore next */
  (cov_yqb17cjjs().s[10]++, new Map());
  alertSubscriptions =
  /* istanbul ignore next */
  (cov_yqb17cjjs().s[11]++, new Map());
  refreshIntervals =
  /* istanbul ignore next */
  (cov_yqb17cjjs().s[12]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[0]++;
    cov_yqb17cjjs().s[13]++;
    super();
    /* istanbul ignore next */
    cov_yqb17cjjs().s[14]++;
    this.initializeDashboards();
  }
  initializeDashboards() {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[1]++;
    cov_yqb17cjjs().s[15]++;
    // Load all predefined dashboards
    for (const dashboard of ADVANCED_DASHBOARDS) {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[16]++;
      this.dashboards.set(dashboard.id, dashboard);
    }
    /* istanbul ignore next */
    cov_yqb17cjjs().s[17]++;
    this.logger.info(`Initialized ${ADVANCED_DASHBOARDS.length} advanced dashboards`);
  }
  // Get dashboard by ID
  getDashboard(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[2]++;
    cov_yqb17cjjs().s[18]++;
    return /* istanbul ignore next */(cov_yqb17cjjs().b[0][0]++, this.dashboards.get(dashboardId)) ||
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[0][1]++, null);
  }
  // Get all dashboards
  getAllDashboards() {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[3]++;
    cov_yqb17cjjs().s[19]++;
    return Array.from(this.dashboards.values());
  }
  // Get dashboards by category
  getDashboardsByCategory(category) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[4]++;
    cov_yqb17cjjs().s[20]++;
    return Array.from(this.dashboards.values()).filter(d => {
      /* istanbul ignore next */
      cov_yqb17cjjs().f[5]++;
      cov_yqb17cjjs().s[21]++;
      return d.category === category;
    });
  }
  // Execute widget query and get data
  async executeWidgetQuery(widgetId, query, filters =
  /* istanbul ignore next */
  (cov_yqb17cjjs().b[1][0]++, [])) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[6]++;
    cov_yqb17cjjs().s[22]++;
    try {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[23]++;
      performanceMonitor_1.PerformanceMonitor.markStart(`widget_query_${widgetId}`);
      // Check cache first
      const cached =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[24]++, this.widgetCache.get(widgetId));
      /* istanbul ignore next */
      cov_yqb17cjjs().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_yqb17cjjs().b[3][0]++, cached) &&
      /* istanbul ignore next */
      (cov_yqb17cjjs().b[3][1]++, Date.now() - cached.lastUpdate < cached.ttl)) {
        /* istanbul ignore next */
        cov_yqb17cjjs().b[2][0]++;
        cov_yqb17cjjs().s[26]++;
        return cached.data;
      } else
      /* istanbul ignore next */
      {
        cov_yqb17cjjs().b[2][1]++;
      }
      // Execute query (mock implementation - would use real database)
      const data =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[27]++, await this.mockQueryExecution(query, filters));
      // Cache the result
      /* istanbul ignore next */
      cov_yqb17cjjs().s[28]++;
      this.widgetCache.set(widgetId, {
        data,
        lastUpdate: Date.now(),
        ttl: 60000 // 1 minute default TTL
      });
      /* istanbul ignore next */
      cov_yqb17cjjs().s[29]++;
      performanceMonitor_1.PerformanceMonitor.markEnd(`widget_query_${widgetId}`);
      /* istanbul ignore next */
      cov_yqb17cjjs().s[30]++;
      return data;
    } catch (error) {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[31]++;
      this.logger.error(`Widget query failed for ${widgetId}:`, error);
      /* istanbul ignore next */
      cov_yqb17cjjs().s[32]++;
      throw error;
    }
  }
  // Mock query execution (replace with real database integration)
  async mockQueryExecution(query, filters) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[7]++;
    // This is a simplified mock - in production, this would connect to your analytics database
    const queryType =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[33]++, this.detectQueryType(query));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[34]++;
    switch (queryType) {
      case 'concurrent_players':
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][0]++;
        cov_yqb17cjjs().s[35]++;
        return Math.floor(Math.random() * 15000) + 5000;
      case 'revenue_daily':
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][1]++;
        cov_yqb17cjjs().s[36]++;
        return Math.floor(Math.random() * 100000) + 20000;
      case 'player_distribution':
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][2]++;
        cov_yqb17cjjs().s[37]++;
        return [{
          gameMode: 'halo-arena',
          players: Math.floor(Math.random() * 3000) + 1000
        }, {
          gameMode: 'halo-royale',
          players: Math.floor(Math.random() * 5000) + 2000
        }, {
          gameMode: 'halo-rally',
          players: Math.floor(Math.random() * 800) + 200
        }, {
          gameMode: 'halo-raids',
          players: Math.floor(Math.random() * 400) + 100
        }];
      case 'performance_metrics':
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][3]++;
        cov_yqb17cjjs().s[38]++;
        return Array.from({
          length: 24
        }, (_, i) => {
          /* istanbul ignore next */
          cov_yqb17cjjs().f[8]++;
          cov_yqb17cjjs().s[39]++;
          return {
            hour: i,
            avgResponseTime: Math.random() * 200 + 50,
            errorRate: Math.random() * 2,
            throughput: Math.random() * 1000 + 500
          };
        });
      case 'session_distribution':
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][4]++;
        cov_yqb17cjjs().s[40]++;
        return Array.from({
          length: 12
        }, (_, i) => {
          /* istanbul ignore next */
          cov_yqb17cjjs().f[9]++;
          cov_yqb17cjjs().s[41]++;
          return {
            minutes: (i + 1) * 5,
            sessions: Math.floor(Math.random() * 1000) + 100
          };
        });
      default:
        /* istanbul ignore next */
        cov_yqb17cjjs().b[4][5]++;
        cov_yqb17cjjs().s[42]++;
        return {
          message: 'Mock data for query',
          timestamp: Date.now()
        };
    }
  }
  detectQueryType(query) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[10]++;
    const lowerQuery =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[43]++, query.toLowerCase());
    /* istanbul ignore next */
    cov_yqb17cjjs().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[6][0]++, lowerQuery.includes('count')) &&
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[6][1]++, lowerQuery.includes('active_sessions'))) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[5][0]++;
      cov_yqb17cjjs().s[45]++;
      return 'concurrent_players';
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[5][1]++;
    }
    cov_yqb17cjjs().s[46]++;
    if (lowerQuery.includes('sum(revenue)')) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[7][0]++;
      cov_yqb17cjjs().s[47]++;
      return 'revenue_daily';
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[7][1]++;
    }
    cov_yqb17cjjs().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[9][0]++, lowerQuery.includes('gamemode')) &&
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[9][1]++, lowerQuery.includes('count'))) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[8][0]++;
      cov_yqb17cjjs().s[49]++;
      return 'player_distribution';
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[8][1]++;
    }
    cov_yqb17cjjs().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[11][0]++, lowerQuery.includes('responsetime')) ||
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[11][1]++, lowerQuery.includes('errorrate'))) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[10][0]++;
      cov_yqb17cjjs().s[51]++;
      return 'performance_metrics';
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[10][1]++;
    }
    cov_yqb17cjjs().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[13][0]++, lowerQuery.includes('duration')) &&
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[13][1]++, lowerQuery.includes('sessions'))) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[12][0]++;
      cov_yqb17cjjs().s[53]++;
      return 'session_distribution';
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[12][1]++;
    }
    cov_yqb17cjjs().s[54]++;
    return 'generic';
  }
  // Start real-time dashboard updates
  startDashboard(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[11]++;
    const dashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[55]++, this.dashboards.get(dashboardId));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[56]++;
    if (!dashboard) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[14][0]++;
      cov_yqb17cjjs().s[57]++;
      throw new Error(`Dashboard ${dashboardId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[14][1]++;
    }
    // Set up refresh intervals for widgets
    cov_yqb17cjjs().s[58]++;
    for (const widget of dashboard.widgets) {
      const intervalId =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[59]++, setInterval(async () => {
        /* istanbul ignore next */
        cov_yqb17cjjs().f[12]++;
        cov_yqb17cjjs().s[60]++;
        try {
          const data =
          /* istanbul ignore next */
          (cov_yqb17cjjs().s[61]++, await this.executeWidgetQuery(widget.id, widget.query, widget.filters));
          /* istanbul ignore next */
          cov_yqb17cjjs().s[62]++;
          this.emit('widget_updated', {
            dashboardId,
            widgetId: widget.id,
            data,
            timestamp: Date.now()
          });
          // Check alerts
          /* istanbul ignore next */
          cov_yqb17cjjs().s[63]++;
          if (widget.alerts) {
            /* istanbul ignore next */
            cov_yqb17cjjs().b[15][0]++;
            cov_yqb17cjjs().s[64]++;
            this.checkWidgetAlerts(widget, data);
          } else
          /* istanbul ignore next */
          {
            cov_yqb17cjjs().b[15][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_yqb17cjjs().s[65]++;
          this.logger.error(`Widget update failed: ${widget.id}`, error);
          /* istanbul ignore next */
          cov_yqb17cjjs().s[66]++;
          this.emit('widget_error', {
            dashboardId,
            widgetId: widget.id,
            error: error.message,
            timestamp: Date.now()
          });
        }
      }, widget.refreshInterval));
      /* istanbul ignore next */
      cov_yqb17cjjs().s[67]++;
      this.refreshIntervals.set(`${dashboardId}_${widget.id}`, intervalId);
    }
    /* istanbul ignore next */
    cov_yqb17cjjs().s[68]++;
    this.logger.info(`Started real-time updates for dashboard: ${dashboardId}`);
  }
  // Stop dashboard updates
  stopDashboard(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[13]++;
    const dashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[69]++, this.dashboards.get(dashboardId));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[70]++;
    if (!dashboard) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[16][0]++;
      cov_yqb17cjjs().s[71]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[16][1]++;
    }
    cov_yqb17cjjs().s[72]++;
    for (const widget of dashboard.widgets) {
      const intervalKey =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[73]++, `${dashboardId}_${widget.id}`);
      const interval =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[74]++, this.refreshIntervals.get(intervalKey));
      /* istanbul ignore next */
      cov_yqb17cjjs().s[75]++;
      if (interval) {
        /* istanbul ignore next */
        cov_yqb17cjjs().b[17][0]++;
        cov_yqb17cjjs().s[76]++;
        clearInterval(interval);
        /* istanbul ignore next */
        cov_yqb17cjjs().s[77]++;
        this.refreshIntervals.delete(intervalKey);
      } else
      /* istanbul ignore next */
      {
        cov_yqb17cjjs().b[17][1]++;
      }
    }
    /* istanbul ignore next */
    cov_yqb17cjjs().s[78]++;
    this.logger.info(`Stopped real-time updates for dashboard: ${dashboardId}`);
  }
  // Check widget alerts
  checkWidgetAlerts(widget, data) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[14]++;
    cov_yqb17cjjs().s[79]++;
    if (!widget.alerts) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[18][0]++;
      cov_yqb17cjjs().s[80]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[18][1]++;
    }
    cov_yqb17cjjs().s[81]++;
    for (const alert of widget.alerts) {
      const shouldAlert =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[82]++, this.evaluateAlertCondition(alert.condition, data, alert.threshold));
      /* istanbul ignore next */
      cov_yqb17cjjs().s[83]++;
      if (shouldAlert) {
        /* istanbul ignore next */
        cov_yqb17cjjs().b[19][0]++;
        cov_yqb17cjjs().s[84]++;
        this.emit('alert_triggered', {
          widgetId: widget.id,
          alert,
          data,
          timestamp: Date.now()
        });
        /* istanbul ignore next */
        cov_yqb17cjjs().s[85]++;
        this.logger.warn(`Alert triggered for widget ${widget.id}: ${alert.condition}`);
      } else
      /* istanbul ignore next */
      {
        cov_yqb17cjjs().b[19][1]++;
      }
    }
  }
  // Evaluate alert conditions
  evaluateAlertCondition(condition, data, threshold) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[15]++;
    // Simple condition evaluation - in production would use a proper expression parser
    const value =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[86]++,
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[21][0]++, typeof data === 'object') &&
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[21][1]++, data.value !== undefined) ?
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[20][0]++, data.value) :
    /* istanbul ignore next */
    (cov_yqb17cjjs().b[20][1]++, data));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[87]++;
    if (typeof value !== 'number') {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[22][0]++;
      cov_yqb17cjjs().s[88]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[22][1]++;
    }
    cov_yqb17cjjs().s[89]++;
    if (condition.includes('>')) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[23][0]++;
      cov_yqb17cjjs().s[90]++;
      return value > threshold;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[23][1]++;
    }
    cov_yqb17cjjs().s[91]++;
    if (condition.includes('<')) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[24][0]++;
      cov_yqb17cjjs().s[92]++;
      return value < threshold;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[24][1]++;
    }
    cov_yqb17cjjs().s[93]++;
    if (condition.includes('=')) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[25][0]++;
      cov_yqb17cjjs().s[94]++;
      return value === threshold;
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[25][1]++;
    }
    cov_yqb17cjjs().s[95]++;
    return false;
  }
  // Create custom dashboard
  createDashboard(dashboard) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[16]++;
    const dashboardId =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[96]++, `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const newDashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[97]++, {
      ...dashboard,
      id: dashboardId,
      lastModified: Date.now()
    });
    /* istanbul ignore next */
    cov_yqb17cjjs().s[98]++;
    this.dashboards.set(dashboardId, newDashboard);
    /* istanbul ignore next */
    cov_yqb17cjjs().s[99]++;
    this.emit('dashboard_created', {
      dashboardId,
      dashboard: newDashboard
    });
    /* istanbul ignore next */
    cov_yqb17cjjs().s[100]++;
    this.logger.info(`Created custom dashboard: ${dashboardId}`);
    /* istanbul ignore next */
    cov_yqb17cjjs().s[101]++;
    return dashboardId;
  }
  // Update dashboard
  updateDashboard(dashboardId, updates) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[17]++;
    const dashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[102]++, this.dashboards.get(dashboardId));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[103]++;
    if (!dashboard) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[26][0]++;
      cov_yqb17cjjs().s[104]++;
      throw new Error(`Dashboard ${dashboardId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[26][1]++;
    }
    const updatedDashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[105]++, {
      ...dashboard,
      ...updates,
      lastModified: Date.now()
    });
    /* istanbul ignore next */
    cov_yqb17cjjs().s[106]++;
    this.dashboards.set(dashboardId, updatedDashboard);
    /* istanbul ignore next */
    cov_yqb17cjjs().s[107]++;
    this.emit('dashboard_updated', {
      dashboardId,
      dashboard: updatedDashboard
    });
    /* istanbul ignore next */
    cov_yqb17cjjs().s[108]++;
    this.logger.info(`Updated dashboard: ${dashboardId}`);
  }
  // Delete dashboard
  deleteDashboard(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[18]++;
    cov_yqb17cjjs().s[109]++;
    if (!this.dashboards.has(dashboardId)) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[27][0]++;
      cov_yqb17cjjs().s[110]++;
      throw new Error(`Dashboard ${dashboardId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[27][1]++;
    }
    // Stop any running updates
    cov_yqb17cjjs().s[111]++;
    this.stopDashboard(dashboardId);
    // Remove from storage
    /* istanbul ignore next */
    cov_yqb17cjjs().s[112]++;
    this.dashboards.delete(dashboardId);
    /* istanbul ignore next */
    cov_yqb17cjjs().s[113]++;
    this.emit('dashboard_deleted', {
      dashboardId
    });
    /* istanbul ignore next */
    cov_yqb17cjjs().s[114]++;
    this.logger.info(`Deleted dashboard: ${dashboardId}`);
  }
  // Get dashboard data snapshot
  async getDashboardSnapshot(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[19]++;
    const dashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[115]++, this.dashboards.get(dashboardId));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[116]++;
    if (!dashboard) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[28][0]++;
      cov_yqb17cjjs().s[117]++;
      throw new Error(`Dashboard ${dashboardId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[28][1]++;
    }
    const snapshot =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[118]++, {
      dashboard,
      widgets: {},
      timestamp: Date.now()
    });
    // Execute all widget queries
    /* istanbul ignore next */
    cov_yqb17cjjs().s[119]++;
    for (const widget of dashboard.widgets) {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[120]++;
      try {
        const data =
        /* istanbul ignore next */
        (cov_yqb17cjjs().s[121]++, await this.executeWidgetQuery(widget.id, widget.query, widget.filters));
        /* istanbul ignore next */
        cov_yqb17cjjs().s[122]++;
        snapshot.widgets[widget.id] = data;
      } catch (error) {
        /* istanbul ignore next */
        cov_yqb17cjjs().s[123]++;
        this.logger.error(`Failed to get data for widget ${widget.id}:`, error);
        /* istanbul ignore next */
        cov_yqb17cjjs().s[124]++;
        snapshot.widgets[widget.id] = {
          error: error.message
        };
      }
    }
    /* istanbul ignore next */
    cov_yqb17cjjs().s[125]++;
    return snapshot;
  }
  // Export dashboard configuration
  exportDashboard(dashboardId) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[20]++;
    const dashboard =
    /* istanbul ignore next */
    (cov_yqb17cjjs().s[126]++, this.dashboards.get(dashboardId));
    /* istanbul ignore next */
    cov_yqb17cjjs().s[127]++;
    if (!dashboard) {
      /* istanbul ignore next */
      cov_yqb17cjjs().b[29][0]++;
      cov_yqb17cjjs().s[128]++;
      throw new Error(`Dashboard ${dashboardId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_yqb17cjjs().b[29][1]++;
    }
    cov_yqb17cjjs().s[129]++;
    return JSON.stringify(dashboard, null, 2);
  }
  // Import dashboard configuration
  importDashboard(dashboardJson) {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[21]++;
    cov_yqb17cjjs().s[130]++;
    try {
      const dashboard =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[131]++, JSON.parse(dashboardJson));
      // Generate new ID to avoid conflicts
      const newId =
      /* istanbul ignore next */
      (cov_yqb17cjjs().s[132]++, `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
      /* istanbul ignore next */
      cov_yqb17cjjs().s[133]++;
      dashboard.id = newId;
      /* istanbul ignore next */
      cov_yqb17cjjs().s[134]++;
      dashboard.lastModified = Date.now();
      /* istanbul ignore next */
      cov_yqb17cjjs().s[135]++;
      this.dashboards.set(newId, dashboard);
      /* istanbul ignore next */
      cov_yqb17cjjs().s[136]++;
      this.emit('dashboard_imported', {
        dashboardId: newId,
        dashboard
      });
      /* istanbul ignore next */
      cov_yqb17cjjs().s[137]++;
      this.logger.info(`Imported dashboard: ${newId}`);
      /* istanbul ignore next */
      cov_yqb17cjjs().s[138]++;
      return newId;
    } catch (error) {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[139]++;
      throw new Error(`Failed to import dashboard: ${error.message}`);
    }
  }
  // Cleanup resources
  cleanup() {
    /* istanbul ignore next */
    cov_yqb17cjjs().f[22]++;
    cov_yqb17cjjs().s[140]++;
    // Clear all intervals
    for (const interval of this.refreshIntervals.values()) {
      /* istanbul ignore next */
      cov_yqb17cjjs().s[141]++;
      clearInterval(interval);
    }
    /* istanbul ignore next */
    cov_yqb17cjjs().s[142]++;
    this.refreshIntervals.clear();
    // Clear caches
    /* istanbul ignore next */
    cov_yqb17cjjs().s[143]++;
    this.widgetCache.clear();
    /* istanbul ignore next */
    cov_yqb17cjjs().s[144]++;
    this.alertSubscriptions.clear();
    /* istanbul ignore next */
    cov_yqb17cjjs().s[145]++;
    this.logger.info('Dashboard manager cleaned up');
  }
}
/* istanbul ignore next */
cov_yqb17cjjs().s[146]++;
exports.AdvancedDashboardManager = AdvancedDashboardManager;
// Factory function
function createAdvancedDashboardManager() {
  /* istanbul ignore next */
  cov_yqb17cjjs().f[23]++;
  cov_yqb17cjjs().s[147]++;
  return new AdvancedDashboardManager();
}