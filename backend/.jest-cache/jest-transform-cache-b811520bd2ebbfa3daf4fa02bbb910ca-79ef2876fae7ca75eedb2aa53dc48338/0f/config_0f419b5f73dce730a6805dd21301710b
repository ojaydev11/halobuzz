f37472a1b120d1376f24d8d90e1f542a
"use strict";

/* istanbul ignore next */
function cov_2dityuidjy() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\config.ts";
  var hash = "3050afd8e42de84e6395525c9da149121a5665cd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\config.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 41
        }
      },
      "5": {
        start: {
          line: 8,
          column: 30
        },
        end: {
          line: 8,
          column: 71
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 39
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 66,
          column: 3
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "11": {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 35
        }
      },
      "12": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "14": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 18,
          column: 77
        }
      },
      "15": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 48
        }
      },
      "16": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 22,
          column: 70
        }
      },
      "17": {
        start: {
          line: 24,
          column: 39
        },
        end: {
          line: 24,
          column: 124
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 98
        }
      },
      "19": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "20": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "21": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 101
        }
      },
      "22": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "23": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "24": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 107
        }
      },
      "25": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "26": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 90
        }
      },
      "27": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "28": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 74
        }
      },
      "29": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "30": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "31": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "32": {
        start: {
          line: 70,
          column: 32
        },
        end: {
          line: 70,
          column: 42
        }
      },
      "33": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "34": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "35": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 114
        }
      },
      "36": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "38": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 78
        }
      },
      "39": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "40": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 116,
          column: 3
        }
      },
      "41": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 115,
          column: 7
        }
      },
      "42": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 117,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 17
          }
        },
        loc: {
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 36
          },
          end: {
            line: 68,
            column: 37
          }
        },
        loc: {
          start: {
            line: 68,
            column: 56
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 22
          },
          end: {
            line: 109,
            column: 23
          }
        },
        loc: {
          start: {
            line: 109,
            column: 36
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 39
          }
        }, {
          start: {
            line: 19,
            column: 43
          },
          end: {
            line: 19,
            column: 47
          }
        }],
        line: 19
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 25,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 25,
            column: 71
          }
        }, {
          start: {
            line: 25,
            column: 75
          },
          end: {
            line: 25,
            column: 97
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "7": {
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 33,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 33,
            column: 45
          }
        }, {
          start: {
            line: 33,
            column: 49
          },
          end: {
            line: 33,
            column: 62
          }
        }],
        line: 33
      },
      "8": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "9": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "10": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "11": {
        loc: {
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 61
          }
        }, {
          start: {
            line: 90,
            column: 65
          },
          end: {
            line: 90,
            column: 119
          }
        }],
        line: 90
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 49
          }
        }, {
          start: {
            line: 91,
            column: 53
          },
          end: {
            line: 91,
            column: 103
          }
        }],
        line: 91
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3050afd8e42de84e6395525c9da149121a5665cd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dityuidjy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dityuidjy();
var __importDefault =
/* istanbul ignore next */
(cov_2dityuidjy().s[0]++,
/* istanbul ignore next */
(cov_2dityuidjy().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2dityuidjy().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2dityuidjy().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2dityuidjy().f[0]++;
  cov_2dityuidjy().s[1]++;
  return /* istanbul ignore next */(cov_2dityuidjy().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2dityuidjy().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2dityuidjy().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2dityuidjy().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2dityuidjy().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2dityuidjy().s[3]++, __importDefault(require("express")));
const flags_1 =
/* istanbul ignore next */
(cov_2dityuidjy().s[4]++, require("@/config/flags"));
const RiskControlsService_1 =
/* istanbul ignore next */
(cov_2dityuidjy().s[5]++, require("@/services/RiskControlsService"));
const User_1 =
/* istanbul ignore next */
(cov_2dityuidjy().s[6]++, require("@/models/User"));
const logger_1 =
/* istanbul ignore next */
(cov_2dityuidjy().s[7]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_2dityuidjy().s[8]++, express_1.default.Router());
// Get public configuration for mobile/frontend apps
/* istanbul ignore next */
cov_2dityuidjy().s[9]++;
router.get('/', async (req, res) => {
  /* istanbul ignore next */
  cov_2dityuidjy().f[1]++;
  cov_2dityuidjy().s[10]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[11]++, req.user?.id);
    let userCountry =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[12]++, 'US'); // Default
    /* istanbul ignore next */
    cov_2dityuidjy().s[13]++;
    if (userId) {
      /* istanbul ignore next */
      cov_2dityuidjy().b[3][0]++;
      const user =
      /* istanbul ignore next */
      (cov_2dityuidjy().s[14]++, await User_1.User.findById(userId).select('country'));
      /* istanbul ignore next */
      cov_2dityuidjy().s[15]++;
      userCountry =
      /* istanbul ignore next */
      (cov_2dityuidjy().b[4][0]++, user?.country) ||
      /* istanbul ignore next */
      (cov_2dityuidjy().b[4][1]++, 'US');
    } else
    /* istanbul ignore next */
    {
      cov_2dityuidjy().b[3][1]++;
    }
    // Get safe config subset
    const publicFlags =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[16]++, await flags_1.featureFlags.getSafeConfig());
    // Check country-specific games availability
    const gamesEnabledForCountry =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[17]++, await RiskControlsService_1.riskControlsService.isGamesEnabledForCountry(userCountry));
    /* istanbul ignore next */
    cov_2dityuidjy().s[18]++;
    publicFlags.gamesEnabledGlobal =
    /* istanbul ignore next */
    (cov_2dityuidjy().b[5][0]++, publicFlags.gamesEnabledGlobal) &&
    /* istanbul ignore next */
    (cov_2dityuidjy().b[5][1]++, gamesEnabledForCountry);
    // Get user session status if authenticated
    let sessionStatus =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[19]++, null);
    /* istanbul ignore next */
    cov_2dityuidjy().s[20]++;
    if (userId) {
      /* istanbul ignore next */
      cov_2dityuidjy().b[6][0]++;
      cov_2dityuidjy().s[21]++;
      sessionStatus = await RiskControlsService_1.riskControlsService.getSessionStatus(userId);
    } else
    /* istanbul ignore next */
    {
      cov_2dityuidjy().b[6][1]++;
    }
    const config =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[22]++, {
      version: '0.1.0',
      environment:
      /* istanbul ignore next */
      (cov_2dityuidjy().b[7][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_2dityuidjy().b[7][1]++, 'development'),
      features: publicFlags,
      country: userCountry,
      sessionStatus,
      supportedCountries: ['US', 'NP', 'IN', 'UK', 'AU'],
      supportedLanguages: ['en', 'ne'],
      supportedCurrencies: ['USD', 'NPR', 'INR'],
      limits: {
        maxUploadSize: 10 * 1024 * 1024,
        // 10MB
        maxVideoLength: 300,
        // 5 minutes
        maxStreamDuration: 14400 // 4 hours
      }
    });
    // Add maintenance message if in maintenance mode
    /* istanbul ignore next */
    cov_2dityuidjy().s[23]++;
    if (publicFlags.maintenanceMode) {
      /* istanbul ignore next */
      cov_2dityuidjy().b[8][0]++;
      cov_2dityuidjy().s[24]++;
      config.maintenanceMessage = 'HaloBuzz is currently under maintenance. Please check back soon.';
    } else
    /* istanbul ignore next */
    {
      cov_2dityuidjy().b[8][1]++;
    }
    // Add registration pause message
    cov_2dityuidjy().s[25]++;
    if (publicFlags.registrationPaused) {
      /* istanbul ignore next */
      cov_2dityuidjy().b[9][0]++;
      cov_2dityuidjy().s[26]++;
      config.registrationMessage = 'New user registrations are temporarily paused.';
    } else
    /* istanbul ignore next */
    {
      cov_2dityuidjy().b[9][1]++;
    }
    cov_2dityuidjy().s[27]++;
    res.json({
      success: true,
      data: config
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dityuidjy().s[28]++;
    logger_1.logger.error('Error fetching app configuration:', error);
    /* istanbul ignore next */
    cov_2dityuidjy().s[29]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch configuration'
    });
  }
});
// Get country-specific configuration
/* istanbul ignore next */
cov_2dityuidjy().s[30]++;
router.get('/country/:countryCode', async (req, res) => {
  /* istanbul ignore next */
  cov_2dityuidjy().f[2]++;
  cov_2dityuidjy().s[31]++;
  try {
    const {
      countryCode
    } =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[32]++, req.params);
    // Validate country code
    /* istanbul ignore next */
    cov_2dityuidjy().s[33]++;
    if (!/^[A-Z]{2}$/.test(countryCode)) {
      /* istanbul ignore next */
      cov_2dityuidjy().b[10][0]++;
      cov_2dityuidjy().s[34]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid country code format'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dityuidjy().b[10][1]++;
    }
    const gamesEnabled =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[35]++, await RiskControlsService_1.riskControlsService.isGamesEnabledForCountry(countryCode));
    const countryConfig =
    /* istanbul ignore next */
    (cov_2dityuidjy().s[36]++, {
      country: countryCode,
      gamesEnabled,
      features: {
        liveStreaming: true,
        shortVideos: true,
        virtualGifts: true,
        games: gamesEnabled,
        payments: await flags_1.featureFlags.isPaymentsEnabled()
      },
      compliance: {
        ageVerificationRequired:
        /* istanbul ignore next */
        (cov_2dityuidjy().b[11][0]++, countryCode === 'NP') ||
        /* istanbul ignore next */
        (cov_2dityuidjy().b[11][1]++, await flags_1.featureFlags.isAgeVerificationRequired()),
        kycRequired:
        /* istanbul ignore next */
        (cov_2dityuidjy().b[12][0]++, countryCode === 'NP') ||
        /* istanbul ignore next */
        (cov_2dityuidjy().b[12][1]++, await flags_1.featureFlags.isKycRequiredForHosts()),
        responsibleGaming: gamesEnabled
      }
    });
    /* istanbul ignore next */
    cov_2dityuidjy().s[37]++;
    res.json({
      success: true,
      data: countryConfig
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dityuidjy().s[38]++;
    logger_1.logger.error('Error fetching country configuration:', error);
    /* istanbul ignore next */
    cov_2dityuidjy().s[39]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch country configuration'
    });
  }
});
// Health check for configuration service
/* istanbul ignore next */
cov_2dityuidjy().s[40]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_2dityuidjy().f[3]++;
  cov_2dityuidjy().s[41]++;
  res.json({
    success: true,
    service: 'config',
    status: 'healthy',
    timestamp: new Date().toISOString()
  });
});
/* istanbul ignore next */
cov_2dityuidjy().s[42]++;
exports.default = router;