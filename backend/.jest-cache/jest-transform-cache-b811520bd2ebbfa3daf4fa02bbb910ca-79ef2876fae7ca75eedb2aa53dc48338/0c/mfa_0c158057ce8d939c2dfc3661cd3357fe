0850d591c48c6d80f40d61ec589a99ff
"use strict";

/* istanbul ignore next */
function cov_gcyyr0du() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\mfa.ts";
  var hash = "b5736f8358b7509750d3b1083c01dab715908478";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\mfa.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "6": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "10": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 51
        }
      },
      "11": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 51
        }
      },
      "12": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 38
        }
      },
      "13": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "14": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 37
        }
      },
      "15": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 73,
          column: 3
        }
      },
      "16": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "17": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "18": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "19": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "20": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "21": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "22": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "23": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "24": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "25": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "26": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "27": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 68
        }
      },
      "28": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "29": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "30": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 69
        }
      },
      "31": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 54,
          column: 122
        }
      },
      "32": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 72
        }
      },
      "33": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "34": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "35": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "36": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 124,
          column: 3
        }
      },
      "37": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "38": {
        start: {
          line: 77,
          column: 38
        },
        end: {
          line: 77,
          column: 46
        }
      },
      "39": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 39
        }
      },
      "40": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "41": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "42": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 73
        }
      },
      "43": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "44": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "45": {
        start: {
          line: 92,
          column: 22
        },
        end: {
          line: 92,
          column: 27
        }
      },
      "46": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "47": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 79
        }
      },
      "48": {
        start: {
          line: 96,
          column: 13
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "49": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 81
        }
      },
      "50": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "51": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "52": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 109,
          column: 11
        }
      },
      "53": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 66
        }
      },
      "54": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "55": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 67
        }
      },
      "56": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "57": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 178,
          column: 3
        }
      },
      "58": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "59": {
        start: {
          line: 128,
          column: 36
        },
        end: {
          line: 128,
          column: 44
        }
      },
      "60": {
        start: {
          line: 129,
          column: 23
        },
        end: {
          line: 129,
          column: 39
        }
      },
      "61": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "62": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 15
        }
      },
      "63": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 55
        }
      },
      "64": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "65": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "66": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 68
        }
      },
      "67": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "68": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "69": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "70": {
        start: {
          line: 153,
          column: 33
        },
        end: {
          line: 153,
          column: 97
        }
      },
      "71": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "72": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "73": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "74": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "75": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 61
        }
      },
      "76": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "77": {
        start: {
          line: 180,
          column: 0
        },
        end: {
          line: 216,
          column: 3
        }
      },
      "78": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 215,
          column: 5
        }
      },
      "79": {
        start: {
          line: 182,
          column: 26
        },
        end: {
          line: 182,
          column: 34
        }
      },
      "80": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 39
        }
      },
      "81": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "82": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 188,
          column: 15
        }
      },
      "83": {
        start: {
          line: 190,
          column: 21
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "84": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "85": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "86": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 88
        }
      },
      "87": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "88": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "89": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "90": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 67
        }
      },
      "91": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "92": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 248,
          column: 3
        }
      },
      "93": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "94": {
        start: {
          line: 220,
          column: 23
        },
        end: {
          line: 220,
          column: 39
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "96": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "97": {
        start: {
          line: 227,
          column: 21
        },
        end: {
          line: 227,
          column: 76
        }
      },
      "98": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "99": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "100": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 239,
          column: 11
        }
      },
      "101": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 66
        }
      },
      "102": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "103": {
        start: {
          line: 250,
          column: 0
        },
        end: {
          line: 290,
          column: 3
        }
      },
      "104": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "105": {
        start: {
          line: 252,
          column: 29
        },
        end: {
          line: 252,
          column: 37
        }
      },
      "106": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 39
        }
      },
      "107": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "108": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "109": {
        start: {
          line: 260,
          column: 21
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "110": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "111": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "112": {
        start: {
          line: 268,
          column: 32
        },
        end: {
          line: 268,
          column: 68
        }
      },
      "113": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "114": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "115": {
        start: {
          line: 275,
          column: 28
        },
        end: {
          line: 275,
          column: 79
        }
      },
      "116": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "117": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 71
        }
      },
      "118": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "119": {
        start: {
          line: 291,
          column: 0
        },
        end: {
          line: 291,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 23
          },
          end: {
            line: 20,
            column: 24
          }
        },
        loc: {
          start: {
            line: 20,
            column: 43
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 30
          }
        },
        loc: {
          start: {
            line: 75,
            column: 49
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 75
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 25
          }
        },
        loc: {
          start: {
            line: 126,
            column: 44
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 126
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 180,
            column: 23
          },
          end: {
            line: 180,
            column: 24
          }
        },
        loc: {
          start: {
            line: 180,
            column: 43
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 180
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 218,
            column: 22
          },
          end: {
            line: 218,
            column: 23
          }
        },
        loc: {
          start: {
            line: 218,
            column: 42
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 218
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 250,
            column: 29
          },
          end: {
            line: 250,
            column: 30
          }
        },
        loc: {
          start: {
            line: 250,
            column: 49
          },
          end: {
            line: 290,
            column: 1
          }
        },
        line: 250
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "9": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: 96,
            column: 13
          },
          end: {
            line: 98,
            column: 9
          }
        }],
        line: 93
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 13
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 13
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 160,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 12
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 152,
            column: 21
          },
          end: {
            line: 152,
            column: 35
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "18": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "19": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "20": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: 191,
            column: 21
          },
          end: {
            line: 191,
            column: 37
          }
        }, {
          start: {
            line: 191,
            column: 41
          },
          end: {
            line: 191,
            column: 56
          }
        }],
        line: 191
      },
      "21": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "22": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "23": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "24": {
        loc: {
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 28
          },
          end: {
            line: 237,
            column: 43
          }
        }, {
          start: {
            line: 237,
            column: 47
          },
          end: {
            line: 237,
            column: 52
          }
        }],
        line: 237
      },
      "25": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "26": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "27": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b5736f8358b7509750d3b1083c01dab715908478"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gcyyr0du = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gcyyr0du();
var __importDefault =
/* istanbul ignore next */
(cov_gcyyr0du().s[0]++,
/* istanbul ignore next */
(cov_gcyyr0du().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_gcyyr0du().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_gcyyr0du().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_gcyyr0du().f[0]++;
  cov_gcyyr0du().s[1]++;
  return /* istanbul ignore next */(cov_gcyyr0du().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_gcyyr0du().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_gcyyr0du().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_gcyyr0du().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_gcyyr0du().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[3]++, require("express"));
const express_validator_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[4]++, require("express-validator"));
const User_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[5]++, require("@/models/User"));
const enhancedSecurity_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[6]++, require("@/middleware/enhancedSecurity"));
const logger_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[7]++, require("@/config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[8]++, require("@/config/redis"));
const auth_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[9]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[10]++, require("@/middleware/security"));
const qrcode_1 =
/* istanbul ignore next */
(cov_gcyyr0du().s[11]++, __importDefault(require("qrcode")));
const router =
/* istanbul ignore next */
(cov_gcyyr0du().s[12]++, (0, express_1.Router)());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_gcyyr0du().s[13]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_gcyyr0du().s[14]++;
router.use(security_1.socialLimiter);
// Enable MFA for user
/* istanbul ignore next */
cov_gcyyr0du().s[15]++;
router.post('/enable', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[1]++;
  cov_gcyyr0du().s[16]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[17]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_gcyyr0du().s[18]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[3][0]++;
      cov_gcyyr0du().s[19]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[3][1]++;
    }
    const {
      password
    } =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[20]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[21]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[22]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[4][0]++;
      cov_gcyyr0du().s[23]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[4][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[24]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_gcyyr0du().s[25]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[5][0]++;
      cov_gcyyr0du().s[26]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[5][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[27]++, await user.comparePassword(password));
    /* istanbul ignore next */
    cov_gcyyr0du().s[28]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[6][0]++;
      cov_gcyyr0du().s[29]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid password'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[6][1]++;
    }
    // Generate MFA secret
    const secret =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[30]++, enhancedSecurity_1.MFAService.generateSecret());
    const qrCodeUrl =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[31]++, await qrcode_1.default.toDataURL(enhancedSecurity_1.MFAService.getQRCodeUrl(user.email, secret)));
    // Store secret temporarily (will be confirmed after verification)
    /* istanbul ignore next */
    cov_gcyyr0du().s[32]++;
    await (0, redis_1.setCache)(`mfa_setup:${userId}`, secret, 300); // 5 minutes
    /* istanbul ignore next */
    cov_gcyyr0du().s[33]++;
    return res.json({
      success: true,
      data: {
        secret,
        qrCodeUrl,
        backupCodes: enhancedSecurity_1.MFAService.generateBackupCodes()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[34]++;
    logger_1.logger.error('Error enabling MFA:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[35]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to enable MFA'
    });
  }
});
// Verify MFA setup
/* istanbul ignore next */
cov_gcyyr0du().s[36]++;
router.post('/verify-setup', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[2]++;
  cov_gcyyr0du().s[37]++;
  try {
    const {
      token,
      backupCode
    } =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[38]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[39]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[40]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[7][0]++;
      cov_gcyyr0du().s[41]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[7][1]++;
    }
    const secret =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[42]++, await (0, redis_1.getCache)(`mfa_setup:${userId}`));
    /* istanbul ignore next */
    cov_gcyyr0du().s[43]++;
    if (!secret) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[8][0]++;
      cov_gcyyr0du().s[44]++;
      return res.status(400).json({
        success: false,
        error: 'MFA setup session expired'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[8][1]++;
    }
    let isValid =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[45]++, false);
    /* istanbul ignore next */
    cov_gcyyr0du().s[46]++;
    if (token) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[9][0]++;
      cov_gcyyr0du().s[47]++;
      isValid = enhancedSecurity_1.MFAService.verifyToken(secret, token);
    } else {
      /* istanbul ignore next */
      cov_gcyyr0du().b[9][1]++;
      cov_gcyyr0du().s[48]++;
      if (backupCode) {
        /* istanbul ignore next */
        cov_gcyyr0du().b[10][0]++;
        cov_gcyyr0du().s[49]++;
        isValid = enhancedSecurity_1.MFAService.verifyBackupCode(backupCode);
      } else
      /* istanbul ignore next */
      {
        cov_gcyyr0du().b[10][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gcyyr0du().s[50]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[11][0]++;
      cov_gcyyr0du().s[51]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid verification code'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[11][1]++;
    }
    // Enable MFA for user
    cov_gcyyr0du().s[52]++;
    await User_1.User.findByIdAndUpdate(userId, {
      mfaEnabled: true,
      mfaSecret: secret
    });
    // Clear temporary secret
    /* istanbul ignore next */
    cov_gcyyr0du().s[53]++;
    await (0, redis_1.setCache)(`mfa_setup:${userId}`, '', 0);
    /* istanbul ignore next */
    cov_gcyyr0du().s[54]++;
    return res.json({
      success: true,
      message: 'MFA enabled successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[55]++;
    logger_1.logger.error('Error verifying MFA setup:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[56]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to verify MFA setup'
    });
  }
});
// Disable MFA
/* istanbul ignore next */
cov_gcyyr0du().s[57]++;
router.post('/disable', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[3]++;
  cov_gcyyr0du().s[58]++;
  try {
    const {
      password,
      token
    } =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[59]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[60]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[61]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[12][0]++;
      cov_gcyyr0du().s[62]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[12][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[63]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_gcyyr0du().s[64]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[13][0]++;
      cov_gcyyr0du().s[65]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[13][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[66]++, await user.comparePassword(password));
    /* istanbul ignore next */
    cov_gcyyr0du().s[67]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[14][0]++;
      cov_gcyyr0du().s[68]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid password'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[14][1]++;
    }
    // Verify MFA token if provided
    cov_gcyyr0du().s[69]++;
    if (
    /* istanbul ignore next */
    (cov_gcyyr0du().b[16][0]++, token) &&
    /* istanbul ignore next */
    (cov_gcyyr0du().b[16][1]++, user.mfaSecret)) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[15][0]++;
      const isValidToken =
      /* istanbul ignore next */
      (cov_gcyyr0du().s[70]++, enhancedSecurity_1.MFAService.verifyToken(user.mfaSecret, token));
      /* istanbul ignore next */
      cov_gcyyr0du().s[71]++;
      if (!isValidToken) {
        /* istanbul ignore next */
        cov_gcyyr0du().b[17][0]++;
        cov_gcyyr0du().s[72]++;
        return res.status(400).json({
          success: false,
          error: 'Invalid MFA token'
        });
      } else
      /* istanbul ignore next */
      {
        cov_gcyyr0du().b[17][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[15][1]++;
    }
    // Disable MFA
    cov_gcyyr0du().s[73]++;
    await User_1.User.findByIdAndUpdate(userId, {
      mfaEnabled: false,
      mfaSecret: undefined
    });
    /* istanbul ignore next */
    cov_gcyyr0du().s[74]++;
    return res.json({
      success: true,
      message: 'MFA disabled successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[75]++;
    logger_1.logger.error('Error disabling MFA:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[76]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to disable MFA'
    });
  }
});
// Verify MFA token
/* istanbul ignore next */
cov_gcyyr0du().s[77]++;
router.post('/verify', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[4]++;
  cov_gcyyr0du().s[78]++;
  try {
    const {
      token
    } =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[79]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[80]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[81]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[18][0]++;
      cov_gcyyr0du().s[82]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[18][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[83]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_gcyyr0du().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_gcyyr0du().b[20][0]++, !user) ||
    /* istanbul ignore next */
    (cov_gcyyr0du().b[20][1]++, !user.mfaEnabled) ||
    /* istanbul ignore next */
    (cov_gcyyr0du().b[20][2]++, !user.mfaSecret)) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[19][0]++;
      cov_gcyyr0du().s[85]++;
      return res.status(400).json({
        success: false,
        error: 'MFA not enabled'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[19][1]++;
    }
    const isValid =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[86]++, enhancedSecurity_1.MFAService.verifyToken(user.mfaSecret, token));
    /* istanbul ignore next */
    cov_gcyyr0du().s[87]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[21][0]++;
      cov_gcyyr0du().s[88]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid MFA token'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[21][1]++;
    }
    cov_gcyyr0du().s[89]++;
    return res.json({
      success: true,
      message: 'MFA token verified successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[90]++;
    logger_1.logger.error('Error verifying MFA token:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[91]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to verify MFA token'
    });
  }
});
// Get MFA status
/* istanbul ignore next */
cov_gcyyr0du().s[92]++;
router.get('/status', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[5]++;
  cov_gcyyr0du().s[93]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[94]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[95]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[22][0]++;
      cov_gcyyr0du().s[96]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[22][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[97]++, await User_1.User.findById(userId).select('mfaEnabled'));
    /* istanbul ignore next */
    cov_gcyyr0du().s[98]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[23][0]++;
      cov_gcyyr0du().s[99]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[23][1]++;
    }
    cov_gcyyr0du().s[100]++;
    return res.json({
      success: true,
      data: {
        mfaEnabled:
        /* istanbul ignore next */
        (cov_gcyyr0du().b[24][0]++, user.mfaEnabled) ||
        /* istanbul ignore next */
        (cov_gcyyr0du().b[24][1]++, false)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[101]++;
    logger_1.logger.error('Error getting MFA status:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[102]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get MFA status'
    });
  }
});
// Generate new backup codes
/* istanbul ignore next */
cov_gcyyr0du().s[103]++;
router.post('/backup-codes', async (req, res) => {
  /* istanbul ignore next */
  cov_gcyyr0du().f[6]++;
  cov_gcyyr0du().s[104]++;
  try {
    const {
      password
    } =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[105]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[106]++, req.user?.userId);
    /* istanbul ignore next */
    cov_gcyyr0du().s[107]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[25][0]++;
      cov_gcyyr0du().s[108]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[25][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[109]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_gcyyr0du().s[110]++;
    if (!user) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[26][0]++;
      cov_gcyyr0du().s[111]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[26][1]++;
    }
    // Verify password
    const isPasswordValid =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[112]++, await user.comparePassword(password));
    /* istanbul ignore next */
    cov_gcyyr0du().s[113]++;
    if (!isPasswordValid) {
      /* istanbul ignore next */
      cov_gcyyr0du().b[27][0]++;
      cov_gcyyr0du().s[114]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid password'
      });
    } else
    /* istanbul ignore next */
    {
      cov_gcyyr0du().b[27][1]++;
    }
    const backupCodes =
    /* istanbul ignore next */
    (cov_gcyyr0du().s[115]++, enhancedSecurity_1.MFAService.generateBackupCodes());
    /* istanbul ignore next */
    cov_gcyyr0du().s[116]++;
    return res.json({
      success: true,
      data: {
        backupCodes
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gcyyr0du().s[117]++;
    logger_1.logger.error('Error generating backup codes:', error);
    /* istanbul ignore next */
    cov_gcyyr0du().s[118]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to generate backup codes'
    });
  }
});
/* istanbul ignore next */
cov_gcyyr0du().s[119]++;
exports.default = router;