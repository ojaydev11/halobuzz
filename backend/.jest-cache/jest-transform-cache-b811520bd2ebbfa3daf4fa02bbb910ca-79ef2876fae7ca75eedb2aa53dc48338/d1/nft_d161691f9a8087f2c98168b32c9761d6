238b6ba233a78b9c1f7528699874748a
"use strict";

/* istanbul ignore next */
function cov_fwr261b0e() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\nft.ts";
  var hash = "501465d921f5378e987ba8a6f9829a02f048c852";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\nft.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "6": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 9,
          column: 97
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 64
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "11": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "12": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "14": {
        start: {
          line: 23,
          column: 38
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "15": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "17": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "18": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 81
        }
      },
      "19": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "20": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "23": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 91,
          column: 3
        }
      },
      "24": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "25": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "26": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 35
        }
      },
      "27": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "28": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "29": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "30": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "31": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "32": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "33": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "34": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 119,
          column: 3
        }
      },
      "35": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "36": {
        start: {
          line: 99,
          column: 26
        },
        end: {
          line: 99,
          column: 36
        }
      },
      "37": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 57
        }
      },
      "38": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "39": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "40": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "41": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 67
        }
      },
      "42": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "43": {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 165,
          column: 3
        }
      },
      "44": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "45": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 36
        }
      },
      "46": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 128,
          column: 34
        }
      },
      "47": {
        start: {
          line: 129,
          column: 23
        },
        end: {
          line: 129,
          column: 34
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "49": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 15
        }
      },
      "50": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 62
        }
      },
      "51": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "52": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "53": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "54": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "55": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 59
        }
      },
      "56": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "57": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 212,
          column: 3
        }
      },
      "58": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 211,
          column: 5
        }
      },
      "59": {
        start: {
          line: 173,
          column: 26
        },
        end: {
          line: 173,
          column: 36
        }
      },
      "60": {
        start: {
          line: 174,
          column: 60
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "61": {
        start: {
          line: 175,
          column: 23
        },
        end: {
          line: 175,
          column: 34
        }
      },
      "62": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 180,
          column: 15
        }
      },
      "64": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "65": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "66": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 102
        }
      },
      "67": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "68": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 203,
          column: 11
        }
      },
      "69": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 64
        }
      },
      "70": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "71": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 259,
          column: 3
        }
      },
      "72": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 258,
          column: 5
        }
      },
      "73": {
        start: {
          line: 220,
          column: 26
        },
        end: {
          line: 220,
          column: 36
        }
      },
      "74": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 35
        }
      },
      "75": {
        start: {
          line: 222,
          column: 25
        },
        end: {
          line: 222,
          column: 36
        }
      },
      "76": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "77": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "78": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 74
        }
      },
      "79": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "80": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 15
        }
      },
      "81": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "82": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 250,
          column: 11
        }
      },
      "83": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 59
        }
      },
      "84": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "85": {
        start: {
          line: 265,
          column: 0
        },
        end: {
          line: 280,
          column: 3
        }
      },
      "86": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 279,
          column: 5
        }
      },
      "87": {
        start: {
          line: 267,
          column: 22
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "88": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "89": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 73
        }
      },
      "90": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 278,
          column: 11
        }
      },
      "91": {
        start: {
          line: 286,
          column: 0
        },
        end: {
          line: 311,
          column: 3
        }
      },
      "92": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 310,
          column: 5
        }
      },
      "93": {
        start: {
          line: 288,
          column: 30
        },
        end: {
          line: 288,
          column: 40
        }
      },
      "94": {
        start: {
          line: 289,
          column: 49
        },
        end: {
          line: 289,
          column: 58
        }
      },
      "95": {
        start: {
          line: 291,
          column: 21
        },
        end: {
          line: 291,
          column: 23
        }
      },
      "96": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "97": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 68
        }
      },
      "98": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 309,
          column: 11
        }
      },
      "99": {
        start: {
          line: 317,
          column: 0
        },
        end: {
          line: 350,
          column: 3
        }
      },
      "100": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 349,
          column: 5
        }
      },
      "101": {
        start: {
          line: 319,
          column: 27
        },
        end: {
          line: 319,
          column: 37
        }
      },
      "102": {
        start: {
          line: 320,
          column: 33
        },
        end: {
          line: 320,
          column: 44
        }
      },
      "103": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "104": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 326,
          column: 15
        }
      },
      "105": {
        start: {
          line: 328,
          column: 41
        },
        end: {
          line: 328,
          column: 50
        }
      },
      "106": {
        start: {
          line: 330,
          column: 21
        },
        end: {
          line: 330,
          column: 23
        }
      },
      "107": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "108": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 65
        }
      },
      "109": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "110": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 376,
          column: 3
        }
      },
      "111": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 375,
          column: 5
        }
      },
      "112": {
        start: {
          line: 358,
          column: 31
        },
        end: {
          line: 358,
          column: 40
        }
      },
      "113": {
        start: {
          line: 360,
          column: 21
        },
        end: {
          line: 360,
          column: 23
        }
      },
      "114": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "115": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 69
        }
      },
      "116": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 374,
          column: 11
        }
      },
      "117": {
        start: {
          line: 382,
          column: 0
        },
        end: {
          line: 416,
          column: 3
        }
      },
      "118": {
        start: {
          line: 383,
          column: 4
        },
        end: {
          line: 415,
          column: 5
        }
      },
      "119": {
        start: {
          line: 384,
          column: 102
        },
        end: {
          line: 384,
          column: 111
        }
      },
      "120": {
        start: {
          line: 385,
          column: 41
        },
        end: {
          line: 385,
          column: 50
        }
      },
      "121": {
        start: {
          line: 387,
          column: 21
        },
        end: {
          line: 387,
          column: 23
        }
      },
      "122": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 407,
          column: 11
        }
      },
      "123": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 62
        }
      },
      "124": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 414,
          column: 11
        }
      },
      "125": {
        start: {
          line: 417,
          column: 0
        },
        end: {
          line: 417,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 21
          },
          end: {
            line: 21,
            column: 22
          }
        },
        loc: {
          start: {
            line: 21,
            column: 41
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 25
          },
          end: {
            line: 59,
            column: 26
          }
        },
        loc: {
          start: {
            line: 59,
            column: 45
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 22
          },
          end: {
            line: 97,
            column: 23
          }
        },
        loc: {
          start: {
            line: 97,
            column: 42
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 125,
            column: 28
          },
          end: {
            line: 125,
            column: 29
          }
        },
        loc: {
          start: {
            line: 125,
            column: 48
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 125
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 171,
            column: 31
          },
          end: {
            line: 171,
            column: 32
          }
        },
        loc: {
          start: {
            line: 171,
            column: 51
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 171
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 218,
            column: 27
          },
          end: {
            line: 218,
            column: 28
          }
        },
        loc: {
          start: {
            line: 218,
            column: 47
          },
          end: {
            line: 259,
            column: 1
          }
        },
        line: 218
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 265,
            column: 33
          },
          end: {
            line: 265,
            column: 34
          }
        },
        loc: {
          start: {
            line: 265,
            column: 53
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 265
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 286,
            column: 34
          },
          end: {
            line: 286,
            column: 35
          }
        },
        loc: {
          start: {
            line: 286,
            column: 54
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 286
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 317,
            column: 34
          },
          end: {
            line: 317,
            column: 35
          }
        },
        loc: {
          start: {
            line: 317,
            column: 54
          },
          end: {
            line: 350,
            column: 1
          }
        },
        line: 317
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 356,
            column: 24
          },
          end: {
            line: 356,
            column: 25
          }
        },
        loc: {
          start: {
            line: 356,
            column: 44
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 356
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 382,
            column: 22
          },
          end: {
            line: 382,
            column: 23
          }
        },
        loc: {
          start: {
            line: 382,
            column: 42
          },
          end: {
            line: 416,
            column: 1
          }
        },
        line: 382
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 20
          }
        }, {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 33
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 32
          }
        }, {
          start: {
            line: 88,
            column: 36
          },
          end: {
            line: 88,
            column: 60
          }
        }],
        line: 88
      },
      "7": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "8": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 18
          }
        }, {
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 130,
            column: 32
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "11": {
        loc: {
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 32
          }
        }, {
          start: {
            line: 162,
            column: 36
          },
          end: {
            line: 162,
            column: 56
          }
        }],
        line: 162
      },
      "12": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 23
          }
        }, {
          start: {
            line: 176,
            column: 27
          },
          end: {
            line: 176,
            column: 40
          }
        }, {
          start: {
            line: 176,
            column: 44
          },
          end: {
            line: 176,
            column: 58
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "15": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 27
          }
        }, {
          start: {
            line: 182,
            column: 31
          },
          end: {
            line: 182,
            column: 48
          }
        }, {
          start: {
            line: 182,
            column: 52
          },
          end: {
            line: 182,
            column: 70
          }
        }],
        line: 182
      },
      "16": {
        loc: {
          start: {
            line: 209,
            column: 19
          },
          end: {
            line: 209,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 19
          },
          end: {
            line: 209,
            column: 32
          }
        }, {
          start: {
            line: 209,
            column: 36
          },
          end: {
            line: 209,
            column: 62
          }
        }],
        line: 209
      },
      "17": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "18": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 19
          }
        }, {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 34
          }
        }],
        line: 223
      },
      "19": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 19
          },
          end: {
            line: 256,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 19
          },
          end: {
            line: 256,
            column: 32
          }
        }, {
          start: {
            line: 256,
            column: 36
          },
          end: {
            line: 256,
            column: 57
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 289,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 289,
            column: 23
          },
          end: {
            line: 289,
            column: 24
          }
        }],
        line: 289
      },
      "22": {
        loc: {
          start: {
            line: 289,
            column: 26
          },
          end: {
            line: 289,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 289,
            column: 34
          },
          end: {
            line: 289,
            column: 36
          }
        }],
        line: 289
      },
      "23": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "24": {
        loc: {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 328,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 328,
            column: 23
          },
          end: {
            line: 328,
            column: 24
          }
        }],
        line: 328
      },
      "25": {
        loc: {
          start: {
            line: 328,
            column: 26
          },
          end: {
            line: 328,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 328,
            column: 34
          },
          end: {
            line: 328,
            column: 36
          }
        }],
        line: 328
      },
      "26": {
        loc: {
          start: {
            line: 358,
            column: 16
          },
          end: {
            line: 358,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 358,
            column: 24
          },
          end: {
            line: 358,
            column: 26
          }
        }],
        line: 358
      },
      "27": {
        loc: {
          start: {
            line: 384,
            column: 57
          },
          end: {
            line: 384,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 384,
            column: 66
          },
          end: {
            line: 384,
            column: 77
          }
        }],
        line: 384
      },
      "28": {
        loc: {
          start: {
            line: 384,
            column: 79
          },
          end: {
            line: 384,
            column: 97
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 384,
            column: 91
          },
          end: {
            line: 384,
            column: 97
          }
        }],
        line: 384
      },
      "29": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 385,
            column: 23
          },
          end: {
            line: 385,
            column: 24
          }
        }],
        line: 385
      },
      "30": {
        loc: {
          start: {
            line: 385,
            column: 26
          },
          end: {
            line: 385,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 385,
            column: 34
          },
          end: {
            line: 385,
            column: 36
          }
        }],
        line: 385
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0],
      "27": [0],
      "28": [0],
      "29": [0],
      "30": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "501465d921f5378e987ba8a6f9829a02f048c852"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fwr261b0e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fwr261b0e();
var __importDefault =
/* istanbul ignore next */
(cov_fwr261b0e().s[0]++,
/* istanbul ignore next */
(cov_fwr261b0e().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_fwr261b0e().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_fwr261b0e().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_fwr261b0e().f[0]++;
  cov_fwr261b0e().s[1]++;
  return /* istanbul ignore next */(cov_fwr261b0e().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_fwr261b0e().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_fwr261b0e().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_fwr261b0e().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_fwr261b0e().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_fwr261b0e().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_fwr261b0e().s[4]++, require("../middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_fwr261b0e().s[5]++, require("../middleware/security"));
const NFTMarketplaceService_1 =
/* istanbul ignore next */
(cov_fwr261b0e().s[6]++, __importDefault(require("../services/nft/NFTMarketplaceService")));
const logger_1 =
/* istanbul ignore next */
(cov_fwr261b0e().s[7]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_fwr261b0e().s[8]++, express_1.default.Router());
const nftService =
/* istanbul ignore next */
(cov_fwr261b0e().s[9]++, NFTMarketplaceService_1.default.getInstance());
// Apply middleware
/* istanbul ignore next */
cov_fwr261b0e().s[10]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_fwr261b0e().s[11]++;
router.use(security_1.socialLimiter);
/**
 * @route POST /api/nft/mint
 * @desc Mint a new NFT from creator content
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[12]++;
router.post('/mint', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[1]++;
  cov_fwr261b0e().s[13]++;
  try {
    const {
      content,
      metadata
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[14]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[15]++, req.user.id);
    /* istanbul ignore next */
    cov_fwr261b0e().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_fwr261b0e().b[4][0]++, !content) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[4][1]++, !metadata)) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[3][0]++;
      cov_fwr261b0e().s[17]++;
      return res.status(400).json({
        success: false,
        error: 'Content and metadata are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[3][1]++;
    }
    const nft =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[18]++, await nftService.mintCreatorNFT(creatorId, content, metadata));
    /* istanbul ignore next */
    cov_fwr261b0e().s[19]++;
    logger_1.logger.info('NFT minted successfully', {
      nftId: nft.id,
      creatorId,
      rarity: nft.rarity,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_fwr261b0e().s[20]++;
    res.status(201).json({
      success: true,
      data: {
        nft,
        message: 'NFT minted successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[21]++;
    logger_1.logger.error('Error minting NFT:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[22]++;
    res.status(500).json({
      success: false,
      error: 'Failed to mint NFT'
    });
  }
});
/**
 * @route POST /api/nft/purchase
 * @desc Purchase an NFT
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[23]++;
router.post('/purchase', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[2]++;
  cov_fwr261b0e().s[24]++;
  try {
    const {
      nftId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[25]++, req.body);
    const buyerId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[26]++, req.user.id);
    /* istanbul ignore next */
    cov_fwr261b0e().s[27]++;
    if (!nftId) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[5][0]++;
      cov_fwr261b0e().s[28]++;
      return res.status(400).json({
        success: false,
        error: 'nftId is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[5][1]++;
    }
    const transaction =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[29]++, await nftService.purchaseNFT(nftId, buyerId));
    /* istanbul ignore next */
    cov_fwr261b0e().s[30]++;
    logger_1.logger.info('NFT purchased successfully', {
      nftId,
      buyerId,
      amount: transaction.amount,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_fwr261b0e().s[31]++;
    res.json({
      success: true,
      data: {
        transaction,
        message: 'NFT purchased successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[32]++;
    logger_1.logger.error('Error purchasing NFT:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[33]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_fwr261b0e().b[6][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_fwr261b0e().b[6][1]++, 'Failed to purchase NFT')
    });
  }
});
/**
 * @route GET /api/nft/:nftId
 * @desc Get NFT details
 * @access Public
 */
/* istanbul ignore next */
cov_fwr261b0e().s[34]++;
router.get('/:nftId', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[3]++;
  cov_fwr261b0e().s[35]++;
  try {
    const {
      nftId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[36]++, req.params);
    const nft =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[37]++, await nftService.getNFTDetails(nftId));
    /* istanbul ignore next */
    cov_fwr261b0e().s[38]++;
    if (!nft) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[7][0]++;
      cov_fwr261b0e().s[39]++;
      return res.status(404).json({
        success: false,
        error: 'NFT not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[7][1]++;
    }
    cov_fwr261b0e().s[40]++;
    res.json({
      success: true,
      data: {
        nft
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[41]++;
    logger_1.logger.error('Error getting NFT details:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[42]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get NFT details'
    });
  }
});
/**
 * @route POST /api/nft/:nftId/list
 * @desc List NFT for sale
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[43]++;
router.post('/:nftId/list', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[4]++;
  cov_fwr261b0e().s[44]++;
  try {
    const {
      nftId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[45]++, req.params);
    const {
      price
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[46]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[47]++, req.user.id);
    /* istanbul ignore next */
    cov_fwr261b0e().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_fwr261b0e().b[9][0]++, !price) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[9][1]++, price <= 0)) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[8][0]++;
      cov_fwr261b0e().s[49]++;
      return res.status(400).json({
        success: false,
        error: 'Valid price is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[8][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[50]++, await nftService.listNFT(nftId, price));
    /* istanbul ignore next */
    cov_fwr261b0e().s[51]++;
    if (!success) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[10][0]++;
      cov_fwr261b0e().s[52]++;
      return res.status(400).json({
        success: false,
        error: 'Failed to list NFT'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[10][1]++;
    }
    cov_fwr261b0e().s[53]++;
    logger_1.logger.info('NFT listed for sale', {
      nftId,
      price,
      userId,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_fwr261b0e().s[54]++;
    res.json({
      success: true,
      data: {
        nftId,
        price,
        message: 'NFT listed for sale successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[55]++;
    logger_1.logger.error('Error listing NFT:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[56]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_fwr261b0e().b[11][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_fwr261b0e().b[11][1]++, 'Failed to list NFT')
    });
  }
});
/**
 * @route POST /api/nft/:nftId/auction
 * @desc Create auction for NFT
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[57]++;
router.post('/:nftId/auction', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[5]++;
  cov_fwr261b0e().s[58]++;
  try {
    const {
      nftId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[59]++, req.params);
    const {
      startPrice,
      reservePrice,
      durationHours
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[60]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[61]++, req.user.id);
    /* istanbul ignore next */
    cov_fwr261b0e().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_fwr261b0e().b[13][0]++, !startPrice) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[13][1]++, !reservePrice) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[13][2]++, !durationHours)) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[12][0]++;
      cov_fwr261b0e().s[63]++;
      return res.status(400).json({
        success: false,
        error: 'startPrice, reservePrice, and durationHours are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[12][1]++;
    }
    cov_fwr261b0e().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_fwr261b0e().b[15][0]++, startPrice <= 0) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[15][1]++, reservePrice <= 0) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[15][2]++, durationHours <= 0)) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[14][0]++;
      cov_fwr261b0e().s[65]++;
      return res.status(400).json({
        success: false,
        error: 'All values must be positive'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[14][1]++;
    }
    const auction =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[66]++, await nftService.createAuction(nftId, startPrice, reservePrice, durationHours));
    /* istanbul ignore next */
    cov_fwr261b0e().s[67]++;
    logger_1.logger.info('Auction created successfully', {
      nftId,
      startPrice,
      reservePrice,
      durationHours,
      userId,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_fwr261b0e().s[68]++;
    res.status(201).json({
      success: true,
      data: {
        auction,
        message: 'Auction created successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[69]++;
    logger_1.logger.error('Error creating auction:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[70]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_fwr261b0e().b[16][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_fwr261b0e().b[16][1]++, 'Failed to create auction')
    });
  }
});
/**
 * @route POST /api/nft/:nftId/bid
 * @desc Place bid on auction
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[71]++;
router.post('/:nftId/bid', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[6]++;
  cov_fwr261b0e().s[72]++;
  try {
    const {
      nftId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[73]++, req.params);
    const {
      amount
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[74]++, req.body);
    const bidderId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[75]++, req.user.id);
    /* istanbul ignore next */
    cov_fwr261b0e().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_fwr261b0e().b[18][0]++, !amount) ||
    /* istanbul ignore next */
    (cov_fwr261b0e().b[18][1]++, amount <= 0)) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[17][0]++;
      cov_fwr261b0e().s[77]++;
      return res.status(400).json({
        success: false,
        error: 'Valid bid amount is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[17][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[78]++, await nftService.placeBid(nftId, bidderId, amount));
    /* istanbul ignore next */
    cov_fwr261b0e().s[79]++;
    if (!success) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[19][0]++;
      cov_fwr261b0e().s[80]++;
      return res.status(400).json({
        success: false,
        error: 'Failed to place bid'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[19][1]++;
    }
    cov_fwr261b0e().s[81]++;
    logger_1.logger.info('Bid placed successfully', {
      nftId,
      bidderId,
      amount,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_fwr261b0e().s[82]++;
    res.json({
      success: true,
      data: {
        nftId,
        amount,
        bidderId,
        message: 'Bid placed successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[83]++;
    logger_1.logger.error('Error placing bid:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[84]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_fwr261b0e().b[20][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_fwr261b0e().b[20][1]++, 'Failed to place bid')
    });
  }
});
/**
 * @route GET /api/nft/marketplace/stats
 * @desc Get marketplace statistics
 * @access Public
 */
/* istanbul ignore next */
cov_fwr261b0e().s[85]++;
router.get('/marketplace/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[7]++;
  cov_fwr261b0e().s[86]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[87]++, await nftService.getNFTMarketplaceStats());
    /* istanbul ignore next */
    cov_fwr261b0e().s[88]++;
    res.json({
      success: true,
      data: {
        stats
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[89]++;
    logger_1.logger.error('Error getting marketplace stats:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[90]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get marketplace statistics'
    });
  }
});
/**
 * @route GET /api/nft/creator/:creatorId
 * @desc Get NFTs by creator
 * @access Public
 */
/* istanbul ignore next */
cov_fwr261b0e().s[91]++;
router.get('/creator/:creatorId', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[8]++;
  cov_fwr261b0e().s[92]++;
  try {
    const {
      creatorId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[93]++, req.params);
    const {
      page =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[21][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[22][0]++, 20),
      status
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[94]++, req.query);
    // Mock implementation - in real app, implement pagination and filtering
    const nfts =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[95]++, []); // Would query database with filters
    /* istanbul ignore next */
    cov_fwr261b0e().s[96]++;
    res.json({
      success: true,
      data: {
        nfts,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: 0
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[97]++;
    logger_1.logger.error('Error getting creator NFTs:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[98]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get creator NFTs'
    });
  }
});
/**
 * @route GET /api/nft/user/:userId/owned
 * @desc Get NFTs owned by user
 * @access Private
 */
/* istanbul ignore next */
cov_fwr261b0e().s[99]++;
router.get('/user/:userId/owned', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[9]++;
  cov_fwr261b0e().s[100]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[101]++, req.params);
    const requestingUserId =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[102]++, req.user.id);
    // Check if user is requesting their own NFTs or has permission
    /* istanbul ignore next */
    cov_fwr261b0e().s[103]++;
    if (userId !== requestingUserId) {
      /* istanbul ignore next */
      cov_fwr261b0e().b[23][0]++;
      cov_fwr261b0e().s[104]++;
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    } else
    /* istanbul ignore next */
    {
      cov_fwr261b0e().b[23][1]++;
    }
    const {
      page =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[24][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[25][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[105]++, req.query);
    // Mock implementation - in real app, query user's owned NFTs
    const nfts =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[106]++, []);
    /* istanbul ignore next */
    cov_fwr261b0e().s[107]++;
    res.json({
      success: true,
      data: {
        nfts,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: 0
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[108]++;
    logger_1.logger.error('Error getting user NFTs:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[109]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get user NFTs'
    });
  }
});
/**
 * @route GET /api/nft/trending
 * @desc Get trending NFTs
 * @access Public
 */
/* istanbul ignore next */
cov_fwr261b0e().s[110]++;
router.get('/trending', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[10]++;
  cov_fwr261b0e().s[111]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[26][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[112]++, req.query);
    // Mock implementation - in real app, query trending NFTs
    const nfts =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[113]++, []);
    /* istanbul ignore next */
    cov_fwr261b0e().s[114]++;
    res.json({
      success: true,
      data: {
        nfts,
        limit: parseInt(limit)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[115]++;
    logger_1.logger.error('Error getting trending NFTs:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[116]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get trending NFTs'
    });
  }
});
/**
 * @route GET /api/nft/search
 * @desc Search NFTs
 * @access Public
 */
/* istanbul ignore next */
cov_fwr261b0e().s[117]++;
router.get('/search', async (req, res) => {
  /* istanbul ignore next */
  cov_fwr261b0e().f[11]++;
  cov_fwr261b0e().s[118]++;
  try {
    const {
      q,
      category,
      rarity,
      minPrice,
      maxPrice,
      sortBy =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[27][0]++, 'createdAt'),
      sortOrder =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[28][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[119]++, req.query);
    const {
      page =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[29][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_fwr261b0e().b[30][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[120]++, req.query);
    // Mock implementation - in real app, implement search with filters
    const nfts =
    /* istanbul ignore next */
    (cov_fwr261b0e().s[121]++, []);
    /* istanbul ignore next */
    cov_fwr261b0e().s[122]++;
    res.json({
      success: true,
      data: {
        nfts,
        filters: {
          query: q,
          category,
          rarity,
          minPrice,
          maxPrice,
          sortBy,
          sortOrder
        },
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: 0
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fwr261b0e().s[123]++;
    logger_1.logger.error('Error searching NFTs:', error);
    /* istanbul ignore next */
    cov_fwr261b0e().s[124]++;
    res.status(500).json({
      success: false,
      error: 'Failed to search NFTs'
    });
  }
});
/* istanbul ignore next */
cov_fwr261b0e().s[125]++;
exports.default = router;