a6e9b6e120d68dfb4c21a9af5fe0a4cd
"use strict";

/* istanbul ignore next */
function cov_2cvxia03yw() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\monitoringService.ts";
  var hash = "fb4b4b1b25ab874d6c185a24a262fd53e9549e07";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\monitoringService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 63
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 42
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 40
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "6": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "7": {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 10,
          column: 28
        }
      },
      "8": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "9": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "10": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "11": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 52,
          column: 40
        }
      },
      "12": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 49
        }
      },
      "13": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "14": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "15": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "16": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "17": {
        start: {
          line: 73,
          column: 30
        },
        end: {
          line: 73,
          column: 40
        }
      },
      "18": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 68
        }
      },
      "19": {
        start: {
          line: 75,
          column: 33
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "20": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "21": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 90,
          column: 15
        }
      },
      "22": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "23": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "24": {
        start: {
          line: 96,
          column: 34
        },
        end: {
          line: 96,
          column: 64
        }
      },
      "25": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "26": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "27": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 112,
          column: 15
        }
      },
      "28": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "29": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "30": {
        start: {
          line: 121,
          column: 28
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "31": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 72
        }
      },
      "32": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 44
        }
      },
      "33": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 27
        }
      },
      "34": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 73
        }
      },
      "35": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 24
        }
      },
      "36": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "37": {
        start: {
          line: 146,
          column: 24
        },
        end: {
          line: 146,
          column: 34
        }
      },
      "38": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 71
        }
      },
      "39": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 148,
          column: 75
        }
      },
      "40": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "41": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 27
        }
      },
      "42": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 75
        }
      },
      "43": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "44": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "45": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "46": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 82
        }
      },
      "47": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 47
        }
      },
      "48": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 44
        }
      },
      "49": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 69
        }
      },
      "50": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 61
        }
      },
      "51": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "52": {
        start: {
          line: 212,
          column: 62
        },
        end: {
          line: 216,
          column: 14
        }
      },
      "53": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 223,
          column: 14
        }
      },
      "54": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 70
        }
      },
      "55": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 24
        }
      },
      "56": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "57": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 241,
          column: 14
        }
      },
      "58": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 31
        }
      },
      "59": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 25
        }
      },
      "60": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "61": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 36
        }
      },
      "62": {
        start: {
          line: 254,
          column: 25
        },
        end: {
          line: 254,
          column: 34
        }
      },
      "63": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "64": {
        start: {
          line: 256,
          column: 28
        },
        end: {
          line: 256,
          column: 29
        }
      },
      "65": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 262,
          column: 15
        }
      },
      "66": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "67": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 49
        }
      },
      "68": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 44
        }
      },
      "69": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 67
        }
      },
      "70": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "71": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "72": {
        start: {
          line: 274,
          column: 23
        },
        end: {
          line: 274,
          column: 36
        }
      },
      "73": {
        start: {
          line: 275,
          column: 29
        },
        end: {
          line: 275,
          column: 42
        }
      },
      "74": {
        start: {
          line: 276,
          column: 28
        },
        end: {
          line: 276,
          column: 40
        }
      },
      "75": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 71
        }
      },
      "76": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 21
        }
      },
      "77": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "78": {
        start: {
          line: 288,
          column: 23
        },
        end: {
          line: 288,
          column: 36
        }
      },
      "79": {
        start: {
          line: 289,
          column: 26
        },
        end: {
          line: 289,
          column: 42
        }
      },
      "80": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 22
        }
      },
      "81": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "82": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "83": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 47
        }
      },
      "84": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 47
        }
      },
      "85": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "86": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 69
        }
      },
      "87": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 66
        }
      },
      "88": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "89": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 69
        }
      },
      "90": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 59
        }
      },
      "91": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 60
        }
      },
      "92": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "93": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 340,
          column: 25
        }
      },
      "94": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 25
        }
      },
      "95": {
        start: {
          line: 341,
          column: 30
        },
        end: {
          line: 341,
          column: 35
        }
      },
      "96": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "97": {
        start: {
          line: 344,
          column: 20
        },
        end: {
          line: 344,
          column: 63
        }
      },
      "98": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 26
        }
      },
      "99": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 66
        }
      },
      "100": {
        start: {
          line: 348,
          column: 20
        },
        end: {
          line: 348,
          column: 26
        }
      },
      "101": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 80
        }
      },
      "102": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 26
        }
      },
      "103": {
        start: {
          line: 353,
          column: 20
        },
        end: {
          line: 353,
          column: 59
        }
      },
      "104": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 26
        }
      },
      "105": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "106": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 52
        }
      },
      "107": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "108": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 46
        }
      },
      "109": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 68
        }
      },
      "110": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "111": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 22
        }
      },
      "112": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 22
        }
      },
      "113": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "114": {
        start: {
          line: 391,
          column: 27
        },
        end: {
          line: 391,
          column: 43
        }
      },
      "115": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 38
        }
      },
      "116": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 21
        }
      },
      "117": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "118": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 23
        }
      },
      "119": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 21
        }
      },
      "120": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "121": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 23
        }
      },
      "122": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 21
        }
      },
      "123": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "124": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 428,
          column: 24
        }
      },
      "125": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 21
        }
      },
      "126": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "127": {
        start: {
          line: 437,
          column: 33
        },
        end: {
          line: 437,
          column: 64
        }
      },
      "128": {
        start: {
          line: 438,
          column: 34
        },
        end: {
          line: 438,
          column: 114
        }
      },
      "129": {
        start: {
          line: 438,
          column: 62
        },
        end: {
          line: 438,
          column: 88
        }
      },
      "130": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 442,
          column: 14
        }
      },
      "131": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 73
        }
      },
      "132": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 449,
          column: 14
        }
      },
      "133": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "134": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 46
        }
      },
      "135": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 47
        }
      },
      "136": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 48
        }
      },
      "137": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 70
        }
      },
      "138": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "139": {
        start: {
          line: 464,
          column: 28
        },
        end: {
          line: 464,
          column: 66
        }
      },
      "140": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 27
        }
      },
      "141": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 67
        }
      },
      "142": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 22
        }
      },
      "143": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "144": {
        start: {
          line: 474,
          column: 27
        },
        end: {
          line: 474,
          column: 72
        }
      },
      "145": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 52
        }
      },
      "146": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 74
        }
      },
      "147": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 22
        }
      },
      "148": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "149": {
        start: {
          line: 484,
          column: 27
        },
        end: {
          line: 484,
          column: 70
        }
      },
      "150": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 52
        }
      },
      "151": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 72
        }
      },
      "152": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 22
        }
      },
      "153": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "154": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 87
        }
      },
      "155": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 73
        }
      },
      "156": {
        start: {
          line: 501,
          column: 0
        },
        end: {
          line: 501,
          column: 46
        }
      },
      "157": {
        start: {
          line: 502,
          column: 0
        },
        end: {
          line: 502,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 48
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 119
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 34
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 144
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 35
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 185
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 29
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 210
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 30
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 233
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 24
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 251
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 257,
            column: 25
          },
          end: {
            line: 257,
            column: 26
          }
        },
        loc: {
          start: {
            line: 257,
            column: 32
          },
          end: {
            line: 262,
            column: 13
          }
        },
        line: 257
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 27
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 272
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 25
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 286
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 28
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 300
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 29
          },
          end: {
            line: 320,
            column: 5
          }
        },
        line: 312
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 26
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 324
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 31
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 337
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 34
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 364
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 28
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 377
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 22
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 389
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 35
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 401
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 25
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 413
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 26
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 425
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 28
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 435
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 438,
            column: 53
          },
          end: {
            line: 438,
            column: 54
          }
        },
        loc: {
          start: {
            line: 438,
            column: 62
          },
          end: {
            line: 438,
            column: 88
          }
        },
        line: 438
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 452,
            column: 5
          }
        },
        loc: {
          start: {
            line: 452,
            column: 27
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 452
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 39
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 462
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 29
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 472
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 27
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 482
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 36
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 492
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 57,
            column: 24
          },
          end: {
            line: 57,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 46
          },
          end: {
            line: 57,
            column: 55
          }
        }, {
          start: {
            line: 57,
            column: 58
          },
          end: {
            line: 57,
            column: 68
          }
        }],
        line: 57
      },
      "1": {
        loc: {
          start: {
            line: 68,
            column: 23
          },
          end: {
            line: 68,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 48
          },
          end: {
            line: 68,
            column: 61
          }
        }, {
          start: {
            line: 68,
            column: 64
          },
          end: {
            line: 68,
            column: 79
          }
        }],
        line: 68
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 45
          },
          end: {
            line: 78,
            column: 54
          }
        }, {
          start: {
            line: 78,
            column: 57
          },
          end: {
            line: 78,
            column: 67
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 23
          },
          end: {
            line: 89,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 48
          },
          end: {
            line: 89,
            column: 61
          }
        }, {
          start: {
            line: 89,
            column: 64
          },
          end: {
            line: 89,
            column: 79
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 100,
            column: 24
          },
          end: {
            line: 100,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 40
          },
          end: {
            line: 100,
            column: 49
          }
        }, {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 100,
            column: 63
          }
        }],
        line: 100
      },
      "5": {
        loc: {
          start: {
            line: 111,
            column: 23
          },
          end: {
            line: 111,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 48
          },
          end: {
            line: 111,
            column: 61
          }
        }, {
          start: {
            line: 111,
            column: 64
          },
          end: {
            line: 111,
            column: 79
          }
        }],
        line: 111
      },
      "6": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 340,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 340,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "7": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 345,
            column: 26
          }
        }, {
          start: {
            line: 346,
            column: 16
          },
          end: {
            line: 348,
            column: 26
          }
        }, {
          start: {
            line: 349,
            column: 16
          },
          end: {
            line: 351,
            column: 26
          }
        }, {
          start: {
            line: 352,
            column: 16
          },
          end: {
            line: 354,
            column: 26
          }
        }],
        line: 342
      },
      "8": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "9": {
        loc: {
          start: {
            line: 438,
            column: 34
          },
          end: {
            line: 438,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 438,
            column: 92
          },
          end: {
            line: 438,
            column: 101
          }
        }, {
          start: {
            line: 438,
            column: 104
          },
          end: {
            line: 438,
            column: 114
          }
        }],
        line: 438
      },
      "10": {
        loc: {
          start: {
            line: 462,
            column: 21
          },
          end: {
            line: 462,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 462,
            column: 33
          },
          end: {
            line: 462,
            column: 37
          }
        }],
        line: 462
      },
      "11": {
        loc: {
          start: {
            line: 475,
            column: 19
          },
          end: {
            line: 475,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 475,
            column: 28
          },
          end: {
            line: 475,
            column: 46
          }
        }, {
          start: {
            line: 475,
            column: 49
          },
          end: {
            line: 475,
            column: 51
          }
        }],
        line: 475
      },
      "12": {
        loc: {
          start: {
            line: 485,
            column: 19
          },
          end: {
            line: 485,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 485,
            column: 28
          },
          end: {
            line: 485,
            column: 46
          }
        }, {
          start: {
            line: 485,
            column: 49
          },
          end: {
            line: 485,
            column: 51
          }
        }],
        line: 485
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb4b4b1b25ab874d6c185a24a262fd53e9549e07"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2cvxia03yw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2cvxia03yw();
cov_2cvxia03yw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2cvxia03yw().s[1]++;
exports.monitoringService = exports.MonitoringService = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_2cvxia03yw().s[2]++, require("../config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_2cvxia03yw().s[3]++, require("../config/redis"));
const User_1 =
/* istanbul ignore next */
(cov_2cvxia03yw().s[4]++, require("../models/User"));
const LiveStream_1 =
/* istanbul ignore next */
(cov_2cvxia03yw().s[5]++, require("../models/LiveStream"));
const Transaction_1 =
/* istanbul ignore next */
(cov_2cvxia03yw().s[6]++, require("../models/Transaction"));
class MonitoringService {
  logger =
  /* istanbul ignore next */
  (cov_2cvxia03yw().s[7]++, logger_1.logger);
  alertRules =
  /* istanbul ignore next */
  (cov_2cvxia03yw().s[8]++, [{
    id: 'high_cpu',
    name: 'High CPU Usage',
    condition: 'cpu > 80',
    threshold: 80,
    severity: 'high',
    enabled: true
  }, {
    id: 'high_memory',
    name: 'High Memory Usage',
    condition: 'memory > 85',
    threshold: 85,
    severity: 'high',
    enabled: true
  }, {
    id: 'database_slow',
    name: 'Slow Database Queries',
    condition: 'slowQueries > 10',
    threshold: 10,
    severity: 'medium',
    enabled: true
  }, {
    id: 'redis_down',
    name: 'Redis Connection Lost',
    condition: 'redis.connected == false',
    threshold: 0,
    severity: 'critical',
    enabled: true
  }]);
  /**
   * Perform health check
   */
  async performHealthCheck() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[0]++;
    const checks =
    /* istanbul ignore next */
    (cov_2cvxia03yw().s[9]++, []);
    // Database health check
    /* istanbul ignore next */
    cov_2cvxia03yw().s[10]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[11]++, Date.now());
      /* istanbul ignore next */
      cov_2cvxia03yw().s[12]++;
      await User_1.User.findOne().limit(1);
      const responseTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[13]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[14]++;
      checks.push({
        service: 'database',
        status: responseTime < 1000 ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[0][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[0][1]++, 'degraded'),
        responseTime,
        lastCheck: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[15]++;
      checks.push({
        service: 'database',
        status: 'unhealthy',
        responseTime: 0,
        lastCheck: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[1][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[1][1]++, 'Unknown error')
      });
    }
    // Redis health check
    /* istanbul ignore next */
    cov_2cvxia03yw().s[16]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[17]++, Date.now());
      /* istanbul ignore next */
      cov_2cvxia03yw().s[18]++;
      await (0, redis_1.setCache)('health_check', 'test', 10);
      const responseTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[19]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[20]++;
      checks.push({
        service: 'redis',
        status: responseTime < 100 ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[2][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[2][1]++, 'degraded'),
        responseTime,
        lastCheck: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[21]++;
      checks.push({
        service: 'redis',
        status: 'unhealthy',
        responseTime: 0,
        lastCheck: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[3][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[3][1]++, 'Unknown error')
      });
    }
    // External services health check
    /* istanbul ignore next */
    cov_2cvxia03yw().s[22]++;
    try {
      const startTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[23]++, Date.now());
      // Check Agora service
      const agoraResponse =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[24]++, await this.checkAgoraService());
      const responseTime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[25]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[26]++;
      checks.push({
        service: 'agora',
        status: agoraResponse ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[4][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[4][1]++, 'unhealthy'),
        responseTime,
        lastCheck: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[27]++;
      checks.push({
        service: 'agora',
        status: 'unhealthy',
        responseTime: 0,
        lastCheck: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2cvxia03yw().b[5][1]++, 'Unknown error')
      });
    }
    /* istanbul ignore next */
    cov_2cvxia03yw().s[28]++;
    return checks;
  }
  /**
   * Collect system metrics
   */
  async collectSystemMetrics() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[1]++;
    cov_2cvxia03yw().s[29]++;
    try {
      const metrics =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[30]++, {
        timestamp: new Date(),
        cpu: await this.getCPUUsage(),
        memory: await this.getMemoryUsage(),
        disk: await this.getDiskUsage(),
        network: await this.getNetworkStats(),
        database: await this.getDatabaseStats(),
        redis: await this.getRedisStats()
      });
      // Store metrics in cache
      /* istanbul ignore next */
      cov_2cvxia03yw().s[31]++;
      await (0, redis_1.setCache)('system_metrics', metrics, 300); // 5 minutes
      // Check for alerts
      /* istanbul ignore next */
      cov_2cvxia03yw().s[32]++;
      await this.checkAlerts(metrics);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[33]++;
      return metrics;
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[34]++;
      this.logger.error('Error collecting system metrics:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[35]++;
      throw error;
    }
  }
  /**
   * Get application metrics
   */
  async getApplicationMetrics() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[2]++;
    cov_2cvxia03yw().s[36]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[37]++, new Date());
      const oneHourAgo =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[38]++, new Date(now.getTime() - 60 * 60 * 1000));
      const oneDayAgo =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[39]++, new Date(now.getTime() - 24 * 60 * 60 * 1000));
      const metrics =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[40]++, {
        timestamp: now,
        users: {
          total: await User_1.User.countDocuments(),
          active: await User_1.User.countDocuments({
            lastActiveAt: {
              $gte: oneHourAgo
            }
          }),
          newToday: await User_1.User.countDocuments({
            createdAt: {
              $gte: oneDayAgo
            }
          }),
          verified: await User_1.User.countDocuments({
            isVerified: true
          }),
          banned: await User_1.User.countDocuments({
            isBanned: true
          })
        },
        streams: {
          total: await LiveStream_1.LiveStream.countDocuments(),
          active: await LiveStream_1.LiveStream.countDocuments({
            status: 'live'
          }),
          today: await LiveStream_1.LiveStream.countDocuments({
            createdAt: {
              $gte: oneDayAgo
            }
          })
        },
        transactions: {
          total: await Transaction_1.Transaction.countDocuments(),
          today: await Transaction_1.Transaction.countDocuments({
            createdAt: {
              $gte: oneDayAgo
            }
          }),
          pending: await Transaction_1.Transaction.countDocuments({
            status: 'pending'
          }),
          failed: await Transaction_1.Transaction.countDocuments({
            status: 'failed'
          })
        },
        performance: {
          avgResponseTime: await this.getAverageResponseTime(),
          errorRate: await this.getErrorRate(),
          throughput: await this.getThroughput()
        }
      });
      /* istanbul ignore next */
      cov_2cvxia03yw().s[41]++;
      return metrics;
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[42]++;
      this.logger.error('Error getting application metrics:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[43]++;
      throw error;
    }
  }
  /**
   * Send alert
   */
  async sendAlert(rule, metrics) {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[3]++;
    cov_2cvxia03yw().s[44]++;
    try {
      const alert =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[45]++, {
        id: `${rule.id}_${Date.now()}`,
        rule: rule.name,
        severity: rule.severity,
        message: `Alert: ${rule.name} - Condition: ${rule.condition}`,
        metrics: metrics,
        timestamp: new Date()
      });
      // Store alert
      /* istanbul ignore next */
      cov_2cvxia03yw().s[46]++;
      await (0, redis_1.setCache)(`alert:${alert.id}`, alert, 24 * 60 * 60); // 24 hours
      // Send notification (email, Slack, etc.)
      /* istanbul ignore next */
      cov_2cvxia03yw().s[47]++;
      await this.sendNotification(alert);
      // Update rule last triggered
      /* istanbul ignore next */
      cov_2cvxia03yw().s[48]++;
      rule.lastTriggered = new Date();
      /* istanbul ignore next */
      cov_2cvxia03yw().s[49]++;
      this.logger.warn(`Alert triggered: ${rule.name}`, alert);
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[50]++;
      this.logger.error('Error sending alert:', error);
    }
  }
  /**
   * Get dashboard data
   */
  async getDashboardData() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[4]++;
    cov_2cvxia03yw().s[51]++;
    try {
      const [healthChecks, systemMetrics, appMetrics] =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[52]++, await Promise.all([this.performHealthCheck(), this.collectSystemMetrics(), this.getApplicationMetrics()]));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[53]++;
      return {
        healthChecks,
        systemMetrics,
        appMetrics,
        alerts: await this.getRecentAlerts(),
        uptime: await this.getUptime()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[54]++;
      this.logger.error('Error getting dashboard data:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[55]++;
      throw error;
    }
  }
  /**
   * Check Agora service
   */
  async checkAgoraService() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[5]++;
    cov_2cvxia03yw().s[56]++;
    try {
      // Simple ping to Agora API
      const response =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[57]++, await fetch('https://api.agora.io/v1/apps', {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${Buffer.from(`${process.env.AGORA_APP_ID}:${process.env.AGORA_APP_CERT}`).toString('base64')}`
        }
      }));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[58]++;
      return response.ok;
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[59]++;
      return false;
    }
  }
  /**
   * Get CPU usage
   */
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[6]++;
    cov_2cvxia03yw().s[60]++;
    try {
      const os =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[61]++, require('os'));
      const cpus =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[62]++, os.cpus());
      let totalIdle =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[63]++, 0);
      let totalTick =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[64]++, 0);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[65]++;
      cpus.forEach(cpu => {
        /* istanbul ignore next */
        cov_2cvxia03yw().f[7]++;
        cov_2cvxia03yw().s[66]++;
        for (const type in cpu.times) {
          /* istanbul ignore next */
          cov_2cvxia03yw().s[67]++;
          totalTick += cpu.times[type];
        }
        /* istanbul ignore next */
        cov_2cvxia03yw().s[68]++;
        totalIdle += cpu.times.idle;
      });
      /* istanbul ignore next */
      cov_2cvxia03yw().s[69]++;
      return Math.round(100 - 100 * totalIdle / totalTick);
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[70]++;
      return 0;
    }
  }
  /**
   * Get memory usage
   */
  async getMemoryUsage() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[8]++;
    cov_2cvxia03yw().s[71]++;
    try {
      const os =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[72]++, require('os'));
      const totalMem =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[73]++, os.totalmem());
      const freeMem =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[74]++, os.freemem());
      /* istanbul ignore next */
      cov_2cvxia03yw().s[75]++;
      return Math.round((totalMem - freeMem) / totalMem * 100);
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[76]++;
      return 0;
    }
  }
  /**
   * Get disk usage
   */
  async getDiskUsage() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[9]++;
    cov_2cvxia03yw().s[77]++;
    try {
      const fs =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[78]++, require('fs'));
      const stats =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[79]++, fs.statSync('.'));
      // Simplified disk usage calculation
      /* istanbul ignore next */
      cov_2cvxia03yw().s[80]++;
      return 50; // Placeholder
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[81]++;
      return 0;
    }
  }
  /**
   * Get network stats
   */
  async getNetworkStats() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[10]++;
    cov_2cvxia03yw().s[82]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[83]++;
      // Simplified network stats
      return {
        bytesIn: 0,
        bytesOut: 0
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[84]++;
      return {
        bytesIn: 0,
        bytesOut: 0
      };
    }
  }
  /**
   * Get database stats
   */
  async getDatabaseStats() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[11]++;
    cov_2cvxia03yw().s[85]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[86]++;
      // Simplified database stats
      return {
        connections: 10,
        queries: 100,
        slowQueries: 0
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[87]++;
      return {
        connections: 0,
        queries: 0,
        slowQueries: 0
      };
    }
  }
  /**
   * Get Redis stats
   */
  async getRedisStats() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[12]++;
    cov_2cvxia03yw().s[88]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[89]++;
      // Test Redis connection
      await (0, redis_1.setCache)('test_key', 'test_value', 1);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[90]++;
      return {
        connected: true,
        memory: 0,
        keys: 0
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[91]++;
      return {
        connected: false,
        memory: 0,
        keys: 0
      };
    }
  }
  /**
   * Check alerts
   */
  async checkAlerts(metrics) {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[13]++;
    cov_2cvxia03yw().s[92]++;
    for (const rule of this.alertRules) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[93]++;
      if (!rule.enabled) {
        /* istanbul ignore next */
        cov_2cvxia03yw().b[6][0]++;
        cov_2cvxia03yw().s[94]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_2cvxia03yw().b[6][1]++;
      }
      let shouldAlert =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[95]++, false);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[96]++;
      switch (rule.id) {
        case 'high_cpu':
          /* istanbul ignore next */
          cov_2cvxia03yw().b[7][0]++;
          cov_2cvxia03yw().s[97]++;
          shouldAlert = metrics.cpu > rule.threshold;
          /* istanbul ignore next */
          cov_2cvxia03yw().s[98]++;
          break;
        case 'high_memory':
          /* istanbul ignore next */
          cov_2cvxia03yw().b[7][1]++;
          cov_2cvxia03yw().s[99]++;
          shouldAlert = metrics.memory > rule.threshold;
          /* istanbul ignore next */
          cov_2cvxia03yw().s[100]++;
          break;
        case 'database_slow':
          /* istanbul ignore next */
          cov_2cvxia03yw().b[7][2]++;
          cov_2cvxia03yw().s[101]++;
          shouldAlert = metrics.database.slowQueries > rule.threshold;
          /* istanbul ignore next */
          cov_2cvxia03yw().s[102]++;
          break;
        case 'redis_down':
          /* istanbul ignore next */
          cov_2cvxia03yw().b[7][3]++;
          cov_2cvxia03yw().s[103]++;
          shouldAlert = !metrics.redis.connected;
          /* istanbul ignore next */
          cov_2cvxia03yw().s[104]++;
          break;
      }
      /* istanbul ignore next */
      cov_2cvxia03yw().s[105]++;
      if (shouldAlert) {
        /* istanbul ignore next */
        cov_2cvxia03yw().b[8][0]++;
        cov_2cvxia03yw().s[106]++;
        await this.sendAlert(rule, metrics);
      } else
      /* istanbul ignore next */
      {
        cov_2cvxia03yw().b[8][1]++;
      }
    }
  }
  /**
   * Send notification
   */
  async sendNotification(alert) {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[14]++;
    cov_2cvxia03yw().s[107]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[108]++;
      // This would integrate with notification services
      // For now, just log the alert
      this.logger.warn('ALERT:', alert);
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[109]++;
      this.logger.error('Error sending notification:', error);
    }
  }
  /**
   * Get recent alerts
   */
  async getRecentAlerts() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[15]++;
    cov_2cvxia03yw().s[110]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[111]++;
      // This would query stored alerts
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[112]++;
      return [];
    }
  }
  /**
   * Get uptime
   */
  async getUptime() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[16]++;
    cov_2cvxia03yw().s[113]++;
    try {
      const uptime =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[114]++, process.uptime());
      /* istanbul ignore next */
      cov_2cvxia03yw().s[115]++;
      return Math.round(uptime);
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[116]++;
      return 0;
    }
  }
  /**
   * Get average response time
   */
  async getAverageResponseTime() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[17]++;
    cov_2cvxia03yw().s[117]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[118]++;
      // This would calculate from stored metrics
      return 100; // Placeholder
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[119]++;
      return 0;
    }
  }
  /**
   * Get error rate
   */
  async getErrorRate() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[18]++;
    cov_2cvxia03yw().s[120]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[121]++;
      // This would calculate from stored metrics
      return 0.1; // Placeholder
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[122]++;
      return 0;
    }
  }
  /**
   * Get throughput
   */
  async getThroughput() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[19]++;
    cov_2cvxia03yw().s[123]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[124]++;
      // This would calculate from stored metrics
      return 1000; // Placeholder
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[125]++;
      return 0;
    }
  }
  // Additional methods needed by routes
  async getHealthStatus() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[20]++;
    cov_2cvxia03yw().s[126]++;
    try {
      const healthChecks =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[127]++, await this.performHealthCheck());
      const overallStatus =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[128]++, healthChecks.every(check => {
        /* istanbul ignore next */
        cov_2cvxia03yw().f[21]++;
        cov_2cvxia03yw().s[129]++;
        return check.status === 'healthy';
      }) ?
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[9][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[9][1]++, 'degraded'));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[130]++;
      return {
        status: overallStatus,
        services: healthChecks
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[131]++;
      logger_1.logger.error('Error getting health status:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[132]++;
      return {
        status: 'unhealthy',
        services: []
      };
    }
  }
  async collectMetrics() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[22]++;
    cov_2cvxia03yw().s[133]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[134]++;
      await this.collectSystemMetrics();
      /* istanbul ignore next */
      cov_2cvxia03yw().s[135]++;
      await this.getApplicationMetrics();
      /* istanbul ignore next */
      cov_2cvxia03yw().s[136]++;
      await this.collectBusinessMetrics();
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[137]++;
      logger_1.logger.error('Error collecting metrics:', error);
    }
  }
  async getMetrics(timeRange =
  /* istanbul ignore next */
  (cov_2cvxia03yw().b[10][0]++, '1h')) {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[23]++;
    cov_2cvxia03yw().s[138]++;
    try {
      const metrics =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[139]++, await this.getCachedMetrics(timeRange));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[140]++;
      return metrics;
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[141]++;
      logger_1.logger.error('Error getting metrics:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[142]++;
      return {};
    }
  }
  async getLatestMetrics() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[24]++;
    cov_2cvxia03yw().s[143]++;
    try {
      const latest =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[144]++, await (0, redis_1.getCache)('metrics:latest'));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[145]++;
      return latest ?
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[11][0]++, JSON.parse(latest)) :
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[11][1]++, {});
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[146]++;
      logger_1.logger.error('Error getting latest metrics:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[147]++;
      return {};
    }
  }
  async getAlertConfig() {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[25]++;
    cov_2cvxia03yw().s[148]++;
    try {
      const config =
      /* istanbul ignore next */
      (cov_2cvxia03yw().s[149]++, await (0, redis_1.getCache)('alert:config'));
      /* istanbul ignore next */
      cov_2cvxia03yw().s[150]++;
      return config ?
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[12][0]++, JSON.parse(config)) :
      /* istanbul ignore next */
      (cov_2cvxia03yw().b[12][1]++, {});
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[151]++;
      logger_1.logger.error('Error getting alert config:', error);
      /* istanbul ignore next */
      cov_2cvxia03yw().s[152]++;
      return {};
    }
  }
  async updateAlertConfig(config) {
    /* istanbul ignore next */
    cov_2cvxia03yw().f[26]++;
    cov_2cvxia03yw().s[153]++;
    try {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[154]++;
      await (0, redis_1.setCache)('alert:config', JSON.stringify(config), 86400); // 24 hours
    } catch (error) {
      /* istanbul ignore next */
      cov_2cvxia03yw().s[155]++;
      logger_1.logger.error('Error updating alert config:', error);
    }
  }
}
/* istanbul ignore next */
cov_2cvxia03yw().s[156]++;
exports.MonitoringService = MonitoringService;
/* istanbul ignore next */
cov_2cvxia03yw().s[157]++;
exports.monitoringService = new MonitoringService();