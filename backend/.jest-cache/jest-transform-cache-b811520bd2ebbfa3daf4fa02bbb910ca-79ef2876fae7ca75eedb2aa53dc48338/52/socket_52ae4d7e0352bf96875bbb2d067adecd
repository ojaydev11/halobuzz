902baa2b02b80b0bd85f7cff60870968
"use strict";

/* istanbul ignore next */
function cov_29ng0qe09t() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\config\\socket.ts";
  var hash = "da422f1b5f338b38a7d511fce61948a4ae76bd4a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\config\\socket.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 249
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 59
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "6": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 36
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "9": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 67
        }
      },
      "10": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 55
        }
      },
      "11": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "12": {
        start: {
          line: 15,
          column: 36
        },
        end: {
          line: 15,
          column: 83
        }
      },
      "13": {
        start: {
          line: 16,
          column: 33
        },
        end: {
          line: 16,
          column: 77
        }
      },
      "14": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "15": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 131,
          column: 1
        }
      },
      "16": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 70
        }
      },
      "17": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "18": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 37
        }
      },
      "19": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 23,
          column: 84
        }
      },
      "20": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 80
        }
      },
      "21": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 174
        }
      },
      "22": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 52
        }
      },
      "25": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 66
        }
      },
      "26": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "27": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 40
        }
      },
      "28": {
        start: {
          line: 57,
          column: 26
        },
        end: {
          line: 57,
          column: 65
        }
      },
      "29": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 58,
          column: 47
        }
      },
      "30": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 26
        }
      },
      "31": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "32": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "33": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "34": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 67,
          column: 19
        }
      },
      "35": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "36": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 29
        }
      },
      "37": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 85
        }
      },
      "38": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "39": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "40": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 85
        }
      },
      "41": {
        start: {
          line: 75,
          column: 45
        },
        end: {
          line: 75,
          column: 83
        }
      },
      "42": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "43": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 28
        }
      },
      "44": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "45": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 59
        }
      },
      "46": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "47": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "48": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "49": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 67
        }
      },
      "50": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "51": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 67
        }
      },
      "52": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 100
        }
      },
      "53": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 71
        }
      },
      "54": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "55": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "56": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 103
        }
      },
      "57": {
        start: {
          line: 107,
          column: 36
        },
        end: {
          line: 107,
          column: 77
        }
      },
      "58": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 114,
          column: 18
        }
      },
      "59": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 55
        }
      },
      "60": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 119,
          column: 19
        }
      },
      "61": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 85
        }
      },
      "62": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 100
        }
      },
      "63": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 23
        }
      },
      "64": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 103
        }
      },
      "65": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 112
        }
      },
      "66": {
        start: {
          line: 132,
          column: 0
        },
        end: {
          line: 132,
          column: 46
        }
      },
      "67": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 138,
          column: 1
        }
      },
      "68": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 16
        }
      },
      "69": {
        start: {
          line: 139,
          column: 0
        },
        end: {
          line: 139,
          column: 34
        }
      },
      "70": {
        start: {
          line: 141,
          column: 19
        },
        end: {
          line: 148,
          column: 1
        }
      },
      "71": {
        start: {
          line: 143,
          column: 17
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "72": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 45
        }
      },
      "73": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "74": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 31
        }
      },
      "75": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 149,
          column: 32
        }
      },
      "76": {
        start: {
          line: 151,
          column: 34
        },
        end: {
          line: 161,
          column: 1
        }
      },
      "77": {
        start: {
          line: 152,
          column: 19
        },
        end: {
          line: 152,
          column: 32
        }
      },
      "78": {
        start: {
          line: 153,
          column: 21
        },
        end: {
          line: 153,
          column: 30
        }
      },
      "79": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 160,
          column: 7
        }
      },
      "80": {
        start: {
          line: 162,
          column: 0
        },
        end: {
          line: 162,
          column: 62
        }
      },
      "81": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 183,
          column: 1
        }
      },
      "82": {
        start: {
          line: 165,
          column: 19
        },
        end: {
          line: 165,
          column: 32
        }
      },
      "83": {
        start: {
          line: 166,
          column: 21
        },
        end: {
          line: 166,
          column: 30
        }
      },
      "84": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 92
        }
      },
      "85": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 57
        }
      },
      "86": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "87": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 174,
          column: 10
        }
      },
      "88": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 177,
          column: 54
        }
      },
      "89": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 182,
          column: 6
        }
      },
      "90": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 184,
          column: 40
        }
      },
      "91": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 217,
          column: 1
        }
      },
      "92": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "93": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "94": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 79
        }
      },
      "95": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "96": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "97": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 61
        }
      },
      "98": {
        start: {
          line: 199,
          column: 28
        },
        end: {
          line: 199,
          column: 68
        }
      },
      "99": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 39
        }
      },
      "100": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 51
        }
      },
      "101": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "102": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "103": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 65
        }
      },
      "104": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 64
        }
      },
      "105": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 218,
          column: 52
        }
      },
      "106": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 231,
          column: 1
        }
      },
      "107": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "108": {
        start: {
          line: 224,
          column: 23
        },
        end: {
          line: 224,
          column: 79
        }
      },
      "109": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 22
        }
      },
      "110": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "111": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "112": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 232,
          column: 48
        }
      },
      "113": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 253,
          column: 1
        }
      },
      "114": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 252,
          column: 5
        }
      },
      "115": {
        start: {
          line: 237,
          column: 23
        },
        end: {
          line: 237,
          column: 62
        }
      },
      "116": {
        start: {
          line: 237,
          column: 60
        },
        end: {
          line: 237,
          column: 61
        }
      },
      "117": {
        start: {
          line: 238,
          column: 30
        },
        end: {
          line: 238,
          column: 31
        }
      },
      "118": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "119": {
        start: {
          line: 240,
          column: 32
        },
        end: {
          line: 240,
          column: 60
        }
      },
      "120": {
        start: {
          line: 241,
          column: 29
        },
        end: {
          line: 241,
          column: 79
        }
      },
      "121": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "122": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 53
        }
      },
      "123": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 44
        }
      },
      "124": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 62
        }
      },
      "125": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 59
        }
      },
      "126": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 76
        }
      },
      "127": {
        start: {
          line: 254,
          column: 0
        },
        end: {
          line: 254,
          column: 42
        }
      },
      "128": {
        start: {
          line: 255,
          column: 22
        },
        end: {
          line: 713,
          column: 1
        }
      },
      "129": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 291,
          column: 7
        }
      },
      "130": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "131": {
        start: {
          line: 259,
          column: 26
        },
        end: {
          line: 259,
          column: 95
        }
      },
      "132": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "133": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 72
        }
      },
      "134": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 263,
          column: 88
        }
      },
      "135": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 43
        }
      },
      "136": {
        start: {
          line: 266,
          column: 29
        },
        end: {
          line: 266,
          column: 82
        }
      },
      "137": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "138": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 39
        }
      },
      "139": {
        start: {
          line: 273,
          column: 29
        },
        end: {
          line: 273,
          column: 87
        }
      },
      "140": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 35
        }
      },
      "141": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 81
        }
      },
      "142": {
        start: {
          line: 278,
          column: 36
        },
        end: {
          line: 278,
          column: 101
        }
      },
      "143": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "144": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 80
        }
      },
      "145": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 82
        }
      },
      "146": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 100
        }
      },
      "147": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "148": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 64
        }
      },
      "149": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 60
        }
      },
      "150": {
        start: {
          line: 292,
          column: 4
        },
        end: {
          line: 708,
          column: 7
        }
      },
      "151": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "152": {
        start: {
          line: 295,
          column: 36
        },
        end: {
          line: 295,
          column: 121
        }
      },
      "153": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "154": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 103
        }
      },
      "155": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 301,
          column: 19
        }
      },
      "156": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "157": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 23
        }
      },
      "158": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 100
        }
      },
      "159": {
        start: {
          line: 308,
          column: 36
        },
        end: {
          line: 308,
          column: 125
        }
      },
      "160": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 107
        }
      },
      "161": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "162": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 53
        }
      },
      "163": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "164": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "165": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 59
        }
      },
      "166": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 73
        }
      },
      "167": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 36
        }
      },
      "168": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 19
        }
      },
      "169": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 372,
          column: 11
        }
      },
      "170": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "171": {
        start: {
          line: 332,
          column: 37
        },
        end: {
          line: 332,
          column: 41
        }
      },
      "172": {
        start: {
          line: 334,
          column: 34
        },
        end: {
          line: 334,
          column: 134
        }
      },
      "173": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "174": {
        start: {
          line: 336,
          column: 20
        },
        end: {
          line: 339,
          column: 23
        }
      },
      "175": {
        start: {
          line: 340,
          column: 20
        },
        end: {
          line: 340,
          column: 27
        }
      },
      "176": {
        start: {
          line: 343,
          column: 35
        },
        end: {
          line: 343,
          column: 102
        }
      },
      "177": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 347,
          column: 17
        }
      },
      "178": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 72
        }
      },
      "179": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 346,
          column: 27
        }
      },
      "180": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 114
        }
      },
      "181": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 95
        }
      },
      "182": {
        start: {
          line: 352,
          column: 33
        },
        end: {
          line: 357,
          column: 17
        }
      },
      "183": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 113
        }
      },
      "184": {
        start: {
          line: 360,
          column: 35
        },
        end: {
          line: 360,
          column: 102
        }
      },
      "185": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "186": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 110
        }
      },
      "187": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 61
        }
      },
      "188": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 370,
          column: 75
        }
      },
      "189": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 395,
          column: 11
        }
      },
      "190": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 394,
          column: 13
        }
      },
      "191": {
        start: {
          line: 375,
          column: 37
        },
        end: {
          line: 375,
          column: 41
        }
      },
      "192": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 51
        }
      },
      "193": {
        start: {
          line: 378,
          column: 16
        },
        end: {
          line: 378,
          column: 115
        }
      },
      "194": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 98
        }
      },
      "195": {
        start: {
          line: 382,
          column: 34
        },
        end: {
          line: 386,
          column: 17
        }
      },
      "196": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 80
        }
      },
      "197": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 55
        }
      },
      "198": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 77
        }
      },
      "199": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 393,
          column: 61
        }
      },
      "200": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 482,
          column: 11
        }
      },
      "201": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 481,
          column: 13
        }
      },
      "202": {
        start: {
          line: 399,
          column: 52
        },
        end: {
          line: 399,
          column: 56
        }
      },
      "203": {
        start: {
          line: 401,
          column: 34
        },
        end: {
          line: 401,
          column: 91
        }
      },
      "204": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 409,
          column: 17
        }
      },
      "205": {
        start: {
          line: 403,
          column: 20
        },
        end: {
          line: 407,
          column: 23
        }
      },
      "206": {
        start: {
          line: 408,
          column: 20
        },
        end: {
          line: 408,
          column: 27
        }
      },
      "207": {
        start: {
          line: 411,
          column: 37
        },
        end: {
          line: 411,
          column: 135
        }
      },
      "208": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 418,
          column: 17
        }
      },
      "209": {
        start: {
          line: 413,
          column: 20
        },
        end: {
          line: 416,
          column: 23
        }
      },
      "210": {
        start: {
          line: 417,
          column: 20
        },
        end: {
          line: 417,
          column: 27
        }
      },
      "211": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 91
        }
      },
      "212": {
        start: {
          line: 422,
          column: 35
        },
        end: {
          line: 422,
          column: 91
        }
      },
      "213": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 439,
          column: 17
        }
      },
      "214": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 437,
          column: 21
        }
      },
      "215": {
        start: {
          line: 425,
          column: 24
        },
        end: {
          line: 429,
          column: 27
        }
      },
      "216": {
        start: {
          line: 431,
          column: 25
        },
        end: {
          line: 437,
          column: 21
        }
      },
      "217": {
        start: {
          line: 432,
          column: 24
        },
        end: {
          line: 436,
          column: 27
        }
      },
      "218": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 438,
          column: 27
        }
      },
      "219": {
        start: {
          line: 441,
          column: 37
        },
        end: {
          line: 447,
          column: 18
        }
      },
      "220": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 460,
          column: 19
        }
      },
      "221": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 128
        }
      },
      "222": {
        start: {
          line: 464,
          column: 36
        },
        end: {
          line: 472,
          column: 17
        }
      },
      "223": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 113
        }
      },
      "224": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 53
        }
      },
      "225": {
        start: {
          line: 476,
          column: 16
        },
        end: {
          line: 476,
          column: 105
        }
      },
      "226": {
        start: {
          line: 479,
          column: 16
        },
        end: {
          line: 479,
          column: 62
        }
      },
      "227": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 480,
          column: 76
        }
      },
      "228": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 540,
          column: 11
        }
      },
      "229": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 539,
          column: 13
        }
      },
      "230": {
        start: {
          line: 486,
          column: 55
        },
        end: {
          line: 486,
          column: 59
        }
      },
      "231": {
        start: {
          line: 488,
          column: 34
        },
        end: {
          line: 488,
          column: 88
        }
      },
      "232": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 496,
          column: 17
        }
      },
      "233": {
        start: {
          line: 490,
          column: 20
        },
        end: {
          line: 494,
          column: 23
        }
      },
      "234": {
        start: {
          line: 495,
          column: 20
        },
        end: {
          line: 495,
          column: 27
        }
      },
      "235": {
        start: {
          line: 498,
          column: 35
        },
        end: {
          line: 499,
          column: 43
        }
      },
      "236": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 534,
          column: 17
        }
      },
      "237": {
        start: {
          line: 502,
          column: 20
        },
        end: {
          line: 514,
          column: 23
        }
      },
      "238": {
        start: {
          line: 516,
          column: 37
        },
        end: {
          line: 527,
          column: 21
        }
      },
      "239": {
        start: {
          line: 528,
          column: 20
        },
        end: {
          line: 528,
          column: 115
        }
      },
      "240": {
        start: {
          line: 529,
          column: 20
        },
        end: {
          line: 529,
          column: 55
        }
      },
      "241": {
        start: {
          line: 530,
          column: 20
        },
        end: {
          line: 530,
          column: 127
        }
      },
      "242": {
        start: {
          line: 533,
          column: 20
        },
        end: {
          line: 533,
          column: 72
        }
      },
      "243": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 59
        }
      },
      "244": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 538,
          column: 73
        }
      },
      "245": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 567,
          column: 11
        }
      },
      "246": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "247": {
        start: {
          line: 544,
          column: 37
        },
        end: {
          line: 544,
          column: 41
        }
      },
      "248": {
        start: {
          line: 546,
          column: 34
        },
        end: {
          line: 546,
          column: 120
        }
      },
      "249": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 561,
          column: 17
        }
      },
      "250": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 54
        }
      },
      "251": {
        start: {
          line: 550,
          column: 39
        },
        end: {
          line: 554,
          column: 21
        }
      },
      "252": {
        start: {
          line: 555,
          column: 20
        },
        end: {
          line: 555,
          column: 87
        }
      },
      "253": {
        start: {
          line: 556,
          column: 20
        },
        end: {
          line: 556,
          column: 62
        }
      },
      "254": {
        start: {
          line: 557,
          column: 20
        },
        end: {
          line: 557,
          column: 94
        }
      },
      "255": {
        start: {
          line: 560,
          column: 20
        },
        end: {
          line: 560,
          column: 80
        }
      },
      "256": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 564,
          column: 62
        }
      },
      "257": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 76
        }
      },
      "258": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 599,
          column: 11
        }
      },
      "259": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 598,
          column: 13
        }
      },
      "260": {
        start: {
          line: 571,
          column: 61
        },
        end: {
          line: 571,
          column: 65
        }
      },
      "261": {
        start: {
          line: 573,
          column: 36
        },
        end: {
          line: 578,
          column: 18
        }
      },
      "262": {
        start: {
          line: 579,
          column: 16
        },
        end: {
          line: 593,
          column: 17
        }
      },
      "263": {
        start: {
          line: 580,
          column: 38
        },
        end: {
          line: 586,
          column: 21
        }
      },
      "264": {
        start: {
          line: 587,
          column: 20
        },
        end: {
          line: 587,
          column: 84
        }
      },
      "265": {
        start: {
          line: 588,
          column: 20
        },
        end: {
          line: 588,
          column: 59
        }
      },
      "266": {
        start: {
          line: 589,
          column: 20
        },
        end: {
          line: 589,
          column: 95
        }
      },
      "267": {
        start: {
          line: 592,
          column: 20
        },
        end: {
          line: 592,
          column: 73
        }
      },
      "268": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 596,
          column: 70
        }
      },
      "269": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 84
        }
      },
      "270": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 620,
          column: 11
        }
      },
      "271": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 619,
          column: 13
        }
      },
      "272": {
        start: {
          line: 603,
          column: 59
        },
        end: {
          line: 603,
          column: 63
        }
      },
      "273": {
        start: {
          line: 605,
          column: 36
        },
        end: {
          line: 611,
          column: 17
        }
      },
      "274": {
        start: {
          line: 612,
          column: 16
        },
        end: {
          line: 612,
          column: 80
        }
      },
      "275": {
        start: {
          line: 613,
          column: 16
        },
        end: {
          line: 613,
          column: 55
        }
      },
      "276": {
        start: {
          line: 614,
          column: 16
        },
        end: {
          line: 614,
          column: 90
        }
      },
      "277": {
        start: {
          line: 617,
          column: 16
        },
        end: {
          line: 617,
          column: 65
        }
      },
      "278": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 618,
          column: 79
        }
      },
      "279": {
        start: {
          line: 622,
          column: 8
        },
        end: {
          line: 641,
          column: 11
        }
      },
      "280": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 640,
          column: 13
        }
      },
      "281": {
        start: {
          line: 624,
          column: 55
        },
        end: {
          line: 624,
          column: 59
        }
      },
      "282": {
        start: {
          line: 626,
          column: 31
        },
        end: {
          line: 632,
          column: 17
        }
      },
      "283": {
        start: {
          line: 633,
          column: 16
        },
        end: {
          line: 633,
          column: 71
        }
      },
      "284": {
        start: {
          line: 634,
          column: 16
        },
        end: {
          line: 634,
          column: 50
        }
      },
      "285": {
        start: {
          line: 635,
          column: 16
        },
        end: {
          line: 635,
          column: 99
        }
      },
      "286": {
        start: {
          line: 638,
          column: 16
        },
        end: {
          line: 638,
          column: 69
        }
      },
      "287": {
        start: {
          line: 639,
          column: 16
        },
        end: {
          line: 639,
          column: 83
        }
      },
      "288": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 661,
          column: 11
        }
      },
      "289": {
        start: {
          line: 644,
          column: 12
        },
        end: {
          line: 660,
          column: 13
        }
      },
      "290": {
        start: {
          line: 645,
          column: 46
        },
        end: {
          line: 645,
          column: 50
        }
      },
      "291": {
        start: {
          line: 647,
          column: 16
        },
        end: {
          line: 647,
          column: 99
        }
      },
      "292": {
        start: {
          line: 649,
          column: 36
        },
        end: {
          line: 653,
          column: 17
        }
      },
      "293": {
        start: {
          line: 654,
          column: 16
        },
        end: {
          line: 654,
          column: 84
        }
      },
      "294": {
        start: {
          line: 655,
          column: 16
        },
        end: {
          line: 655,
          column: 70
        }
      },
      "295": {
        start: {
          line: 658,
          column: 16
        },
        end: {
          line: 658,
          column: 63
        }
      },
      "296": {
        start: {
          line: 659,
          column: 16
        },
        end: {
          line: 659,
          column: 78
        }
      },
      "297": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 703,
          column: 11
        }
      },
      "298": {
        start: {
          line: 664,
          column: 12
        },
        end: {
          line: 702,
          column: 13
        }
      },
      "299": {
        start: {
          line: 665,
          column: 16
        },
        end: {
          line: 665,
          column: 86
        }
      },
      "300": {
        start: {
          line: 667,
          column: 40
        },
        end: {
          line: 667,
          column: 104
        }
      },
      "301": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 670,
          column: 17
        }
      },
      "302": {
        start: {
          line: 669,
          column: 20
        },
        end: {
          line: 669,
          column: 107
        }
      },
      "303": {
        start: {
          line: 672,
          column: 16
        },
        end: {
          line: 672,
          column: 70
        }
      },
      "304": {
        start: {
          line: 674,
          column: 16
        },
        end: {
          line: 674,
          column: 107
        }
      },
      "305": {
        start: {
          line: 676,
          column: 16
        },
        end: {
          line: 676,
          column: 105
        }
      },
      "306": {
        start: {
          line: 678,
          column: 16
        },
        end: {
          line: 678,
          column: 96
        }
      },
      "307": {
        start: {
          line: 680,
          column: 37
        },
        end: {
          line: 680,
          column: 61
        }
      },
      "308": {
        start: {
          line: 681,
          column: 16
        },
        end: {
          line: 691,
          column: 17
        }
      },
      "309": {
        start: {
          line: 682,
          column: 20
        },
        end: {
          line: 690,
          column: 21
        }
      },
      "310": {
        start: {
          line: 683,
          column: 24
        },
        end: {
          line: 683,
          column: 43
        }
      },
      "311": {
        start: {
          line: 685,
          column: 45
        },
        end: {
          line: 685,
          column: 97
        }
      },
      "312": {
        start: {
          line: 686,
          column: 24
        },
        end: {
          line: 689,
          column: 25
        }
      },
      "313": {
        start: {
          line: 687,
          column: 28
        },
        end: {
          line: 687,
          column: 104
        }
      },
      "314": {
        start: {
          line: 688,
          column: 28
        },
        end: {
          line: 688,
          column: 101
        }
      },
      "315": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 697,
          column: 19
        }
      },
      "316": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 84
        }
      },
      "317": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 75
        }
      },
      "318": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 707,
          column: 11
        }
      },
      "319": {
        start: {
          line: 706,
          column: 12
        },
        end: {
          line: 706,
          column: 49
        }
      },
      "320": {
        start: {
          line: 710,
          column: 4
        },
        end: {
          line: 712,
          column: 7
        }
      },
      "321": {
        start: {
          line: 711,
          column: 8
        },
        end: {
          line: 711,
          column: 57
        }
      },
      "322": {
        start: {
          line: 714,
          column: 0
        },
        end: {
          line: 714,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 75,
            column: 34
          },
          end: {
            line: 75,
            column: 35
          }
        },
        loc: {
          start: {
            line: 75,
            column: 45
          },
          end: {
            line: 75,
            column: 83
          }
        },
        line: 75
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 86,
            column: 30
          },
          end: {
            line: 86,
            column: 31
          }
        },
        loc: {
          start: {
            line: 86,
            column: 41
          },
          end: {
            line: 88,
            column: 9
          }
        },
        line: 86
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 89,
            column: 30
          },
          end: {
            line: 89,
            column: 31
          }
        },
        loc: {
          start: {
            line: 89,
            column: 41
          },
          end: {
            line: 91,
            column: 9
          }
        },
        line: 89
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 32
          },
          end: {
            line: 93,
            column: 33
          }
        },
        loc: {
          start: {
            line: 93,
            column: 38
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 96,
            column: 32
          },
          end: {
            line: 96,
            column: 33
          }
        },
        loc: {
          start: {
            line: 96,
            column: 38
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 96
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 21
          }
        },
        loc: {
          start: {
            line: 134,
            column: 26
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 141,
            column: 19
          },
          end: {
            line: 141,
            column: 20
          }
        },
        loc: {
          start: {
            line: 141,
            column: 37
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 141
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 143,
            column: 41
          },
          end: {
            line: 143,
            column: 42
          }
        },
        loc: {
          start: {
            line: 143,
            column: 51
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 143
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 151,
            column: 34
          },
          end: {
            line: 151,
            column: 35
          }
        },
        loc: {
          start: {
            line: 151,
            column: 52
          },
          end: {
            line: 161,
            column: 1
          }
        },
        line: 151
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 164,
            column: 23
          },
          end: {
            line: 164,
            column: 24
          }
        },
        loc: {
          start: {
            line: 164,
            column: 56
          },
          end: {
            line: 183,
            column: 1
          }
        },
        line: 164
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 30
          }
        },
        loc: {
          start: {
            line: 186,
            column: 65
          },
          end: {
            line: 217,
            column: 1
          }
        },
        line: 186
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 220,
            column: 27
          },
          end: {
            line: 220,
            column: 28
          }
        },
        loc: {
          start: {
            line: 220,
            column: 45
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 220
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 234,
            column: 24
          },
          end: {
            line: 234,
            column: 25
          }
        },
        loc: {
          start: {
            line: 234,
            column: 74
          },
          end: {
            line: 253,
            column: 1
          }
        },
        line: 234
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 237,
            column: 50
          },
          end: {
            line: 237,
            column: 51
          }
        },
        loc: {
          start: {
            line: 237,
            column: 60
          },
          end: {
            line: 237,
            column: 61
          }
        },
        line: 237
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 255,
            column: 22
          },
          end: {
            line: 255,
            column: 23
          }
        },
        loc: {
          start: {
            line: 255,
            column: 30
          },
          end: {
            line: 713,
            column: 1
          }
        },
        line: 255
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 257,
            column: 11
          },
          end: {
            line: 257,
            column: 12
          }
        },
        loc: {
          start: {
            line: 257,
            column: 35
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 257
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 292,
            column: 24
          },
          end: {
            line: 292,
            column: 25
          }
        },
        loc: {
          start: {
            line: 292,
            column: 42
          },
          end: {
            line: 708,
            column: 5
          }
        },
        line: 292
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 330,
            column: 33
          },
          end: {
            line: 330,
            column: 34
          }
        },
        loc: {
          start: {
            line: 330,
            column: 49
          },
          end: {
            line: 372,
            column: 9
          }
        },
        line: 330
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 373,
            column: 34
          },
          end: {
            line: 373,
            column: 35
          }
        },
        loc: {
          start: {
            line: 373,
            column: 50
          },
          end: {
            line: 395,
            column: 9
          }
        },
        line: 373
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 397,
            column: 30
          },
          end: {
            line: 397,
            column: 31
          }
        },
        loc: {
          start: {
            line: 397,
            column: 46
          },
          end: {
            line: 482,
            column: 9
          }
        },
        line: 397
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 484,
            column: 31
          },
          end: {
            line: 484,
            column: 32
          }
        },
        loc: {
          start: {
            line: 484,
            column: 47
          },
          end: {
            line: 540,
            column: 9
          }
        },
        line: 484
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 542,
            column: 36
          },
          end: {
            line: 542,
            column: 37
          }
        },
        loc: {
          start: {
            line: 542,
            column: 52
          },
          end: {
            line: 567,
            column: 9
          }
        },
        line: 542
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 569,
            column: 34
          },
          end: {
            line: 569,
            column: 35
          }
        },
        loc: {
          start: {
            line: 569,
            column: 50
          },
          end: {
            line: 599,
            column: 9
          }
        },
        line: 569
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 601,
            column: 32
          },
          end: {
            line: 601,
            column: 33
          }
        },
        loc: {
          start: {
            line: 601,
            column: 48
          },
          end: {
            line: 620,
            column: 9
          }
        },
        line: 601
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 622,
            column: 32
          },
          end: {
            line: 622,
            column: 33
          }
        },
        loc: {
          start: {
            line: 622,
            column: 48
          },
          end: {
            line: 641,
            column: 9
          }
        },
        line: 622
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 643,
            column: 36
          },
          end: {
            line: 643,
            column: 37
          }
        },
        loc: {
          start: {
            line: 643,
            column: 52
          },
          end: {
            line: 661,
            column: 9
          }
        },
        line: 643
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 663,
            column: 32
          },
          end: {
            line: 663,
            column: 33
          }
        },
        loc: {
          start: {
            line: 663,
            column: 50
          },
          end: {
            line: 703,
            column: 9
          }
        },
        line: 663
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 705,
            column: 27
          },
          end: {
            line: 705,
            column: 28
          }
        },
        loc: {
          start: {
            line: 705,
            column: 38
          },
          end: {
            line: 707,
            column: 9
          }
        },
        line: 705
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 710,
            column: 37
          },
          end: {
            line: 710,
            column: 38
          }
        },
        loc: {
          start: {
            line: 710,
            column: 46
          },
          end: {
            line: 712,
            column: 5
          }
        },
        line: 710
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 42
          }
        }, {
          start: {
            line: 20,
            column: 46
          },
          end: {
            line: 20,
            column: 70
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 23,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 23,
            column: 51
          }
        }, {
          start: {
            line: 23,
            column: 55
          },
          end: {
            line: 23,
            column: 84
          }
        }],
        line: 23
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 37
          }
        }, {
          start: {
            line: 25,
            column: 41
          },
          end: {
            line: 25,
            column: 67
          }
        }, {
          start: {
            line: 25,
            column: 71
          },
          end: {
            line: 25,
            column: 80
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 26,
            column: 111
          },
          end: {
            line: 26,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 111
          },
          end: {
            line: 26,
            column: 119
          }
        }, {
          start: {
            line: 26,
            column: 124
          },
          end: {
            line: 26,
            column: 150
          }
        }],
        line: 26
      },
      "7": {
        loc: {
          start: {
            line: 26,
            column: 124
          },
          end: {
            line: 26,
            column: 150
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 135
          },
          end: {
            line: 26,
            column: 141
          }
        }, {
          start: {
            line: 26,
            column: 144
          },
          end: {
            line: 26,
            column: 150
          }
        }],
        line: 26
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: 53,
            column: 13
          },
          end: {
            line: 55,
            column: 9
          }
        }],
        line: 42
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 39
          },
          end: {
            line: 44,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 39
          },
          end: {
            line: 44,
            column: 57
          }
        }, {
          start: {
            line: 44,
            column: 61
          },
          end: {
            line: 44,
            column: 65
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 74,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 74,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "11": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 167,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 38
          },
          end: {
            line: 167,
            column: 61
          }
        }, {
          start: {
            line: 167,
            column: 64
          },
          end: {
            line: 167,
            column: 92
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 168,
            column: 20
          },
          end: {
            line: 168,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 20
          },
          end: {
            line: 168,
            column: 52
          }
        }, {
          start: {
            line: 168,
            column: 56
          },
          end: {
            line: 168,
            column: 57
          }
        }],
        line: 168
      },
      "14": {
        loc: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "15": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "16": {
        loc: {
          start: {
            line: 224,
            column: 23
          },
          end: {
            line: 224,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 23
          },
          end: {
            line: 224,
            column: 74
          }
        }, {
          start: {
            line: 224,
            column: 78
          },
          end: {
            line: 224,
            column: 79
          }
        }],
        line: 224
      },
      "17": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "18": {
        loc: {
          start: {
            line: 259,
            column: 26
          },
          end: {
            line: 259,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 26
          },
          end: {
            line: 259,
            column: 53
          }
        }, {
          start: {
            line: 259,
            column: 57
          },
          end: {
            line: 259,
            column: 95
          }
        }],
        line: 259
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 276,
            column: 13
          }
        }, {
          start: {
            line: 270,
            column: 17
          },
          end: {
            line: 276,
            column: 13
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 278,
            column: 36
          },
          end: {
            line: 278,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 36
          },
          end: {
            line: 278,
            column: 96
          }
        }, {
          start: {
            line: 278,
            column: 100
          },
          end: {
            line: 278,
            column: 101
          }
        }],
        line: 278
      },
      "22": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "23": {
        loc: {
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "24": {
        loc: {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "25": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "26": {
        loc: {
          start: {
            line: 335,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 16
          },
          end: {
            line: 341,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "27": {
        loc: {
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "28": {
        loc: {
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "29": {
        loc: {
          start: {
            line: 412,
            column: 16
          },
          end: {
            line: 418,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 16
          },
          end: {
            line: 418,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      },
      "30": {
        loc: {
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "31": {
        loc: {
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 437,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 437,
            column: 21
          }
        }, {
          start: {
            line: 431,
            column: 25
          },
          end: {
            line: 437,
            column: 21
          }
        }],
        line: 424
      },
      "32": {
        loc: {
          start: {
            line: 431,
            column: 25
          },
          end: {
            line: 437,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 25
          },
          end: {
            line: 437,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "33": {
        loc: {
          start: {
            line: 455,
            column: 33
          },
          end: {
            line: 455,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 51
          },
          end: {
            line: 455,
            column: 57
          }
        }, {
          start: {
            line: 455,
            column: 60
          },
          end: {
            line: 455,
            column: 66
          }
        }],
        line: 455
      },
      "34": {
        loc: {
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 496,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 496,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "35": {
        loc: {
          start: {
            line: 500,
            column: 16
          },
          end: {
            line: 534,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 16
          },
          end: {
            line: 534,
            column: 17
          }
        }, {
          start: {
            line: 532,
            column: 21
          },
          end: {
            line: 534,
            column: 17
          }
        }],
        line: 500
      },
      "36": {
        loc: {
          start: {
            line: 500,
            column: 20
          },
          end: {
            line: 500,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 500,
            column: 20
          },
          end: {
            line: 500,
            column: 38
          }
        }, {
          start: {
            line: 500,
            column: 42
          },
          end: {
            line: 500,
            column: 61
          }
        }],
        line: 500
      },
      "37": {
        loc: {
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 561,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 547,
            column: 16
          },
          end: {
            line: 561,
            column: 17
          }
        }, {
          start: {
            line: 559,
            column: 21
          },
          end: {
            line: 561,
            column: 17
          }
        }],
        line: 547
      },
      "38": {
        loc: {
          start: {
            line: 579,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 579,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        }, {
          start: {
            line: 591,
            column: 21
          },
          end: {
            line: 593,
            column: 17
          }
        }],
        line: 579
      },
      "39": {
        loc: {
          start: {
            line: 667,
            column: 40
          },
          end: {
            line: 667,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 667,
            column: 40
          },
          end: {
            line: 667,
            column: 99
          }
        }, {
          start: {
            line: 667,
            column: 103
          },
          end: {
            line: 667,
            column: 104
          }
        }],
        line: 667
      },
      "40": {
        loc: {
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 670,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 668,
            column: 16
          },
          end: {
            line: 670,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 668
      },
      "41": {
        loc: {
          start: {
            line: 682,
            column: 20
          },
          end: {
            line: 690,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 20
          },
          end: {
            line: 690,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "42": {
        loc: {
          start: {
            line: 686,
            column: 24
          },
          end: {
            line: 689,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 686,
            column: 24
          },
          end: {
            line: 689,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 686
      },
      "43": {
        loc: {
          start: {
            line: 687,
            column: 68
          },
          end: {
            line: 687,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 687,
            column: 68
          },
          end: {
            line: 687,
            column: 92
          }
        }, {
          start: {
            line: 687,
            column: 96
          },
          end: {
            line: 687,
            column: 97
          }
        }],
        line: 687
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "da422f1b5f338b38a7d511fce61948a4ae76bd4a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29ng0qe09t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29ng0qe09t();
var __importDefault =
/* istanbul ignore next */
(cov_29ng0qe09t().s[0]++,
/* istanbul ignore next */
(cov_29ng0qe09t().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_29ng0qe09t().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_29ng0qe09t().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[0]++;
  cov_29ng0qe09t().s[1]++;
  return /* istanbul ignore next */(cov_29ng0qe09t().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_29ng0qe09t().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29ng0qe09t().s[3]++;
exports.setupSocketIO = exports.broadcastToRoom = exports.getRoomMemberCount = exports.joinRoomWithSharding = exports.checkRateLimit = exports.initializeSocketRateLimit = exports.getShardId = exports.getSocketIO = exports.setupRedisAdapter = void 0;
const redis_adapter_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[4]++, require("@socket.io/redis-adapter"));
const redis_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[5]++, require("redis"));
const jsonwebtoken_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[6]++, __importDefault(require("jsonwebtoken")));
const logger_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[7]++, require("./logger"));
const redis_2 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[8]++, require("./redis"));
const liveStreamService_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[9]++, require("@/services/liveStreamService"));
const chatService_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[10]++, require("@/services/chatService"));
const SocketSecurityService_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[11]++, require("@/services/SocketSecurityService"));
const MessagePersistenceService_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[12]++, require("@/services/MessagePersistenceService"));
const GiftTransactionService_1 =
/* istanbul ignore next */
(cov_29ng0qe09t().s[13]++, require("@/services/GiftTransactionService"));
const logger =
/* istanbul ignore next */
(cov_29ng0qe09t().s[14]++, (0, logger_1.setupLogger)());
// Enhanced Redis adapter setup for massive scaling (10K+ connections)
/* istanbul ignore next */
cov_29ng0qe09t().s[15]++;
const setupRedisAdapter = async io => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[1]++;
  const redisUrl =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[16]++,
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[3][0]++, process.env.REDIS_URL) ||
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[3][1]++, 'redis://localhost:6379'));
  /* istanbul ignore next */
  cov_29ng0qe09t().s[17]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[18]++, new URL(redisUrl));
    const isSecure =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[19]++,
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[4][0]++, url.protocol === 'rediss:') ||
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[4][1]++, url.protocol === 'redis+tls:'));
    // Extract password from URL if present, otherwise use environment variable
    const password =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[20]++,
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[5][0]++, url.password) ||
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[5][1]++, process.env.REDIS_PASSWORD) ||
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[5][2]++, undefined));
    /* istanbul ignore next */
    cov_29ng0qe09t().s[21]++;
    logger.info(`Setting up enhanced Redis adapter for massive scaling: ${url.protocol}//${url.hostname}:${
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[6][0]++, url.port) ||
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[6][1]++, isSecure ?
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[7][0]++, '6380') :
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[7][1]++, '6379'))} (SSL: ${isSecure})`);
    // Enhanced Redis client configuration for high-performance scaling
    const clientConfig =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[22]++, {
      password: password,
      socket: {
        connectTimeout: 5000,
        // Reduced timeout for faster failover
        lazyConnect: false,
        // Eager connection
        keepAlive: true,
        keepAliveInitialDelay: 0
      },
      // Connection pooling for high concurrency
      maxRetriesPerRequest: null,
      // Disable retries for pub/sub
      retryDelayOnFailover: 100,
      enableReadyCheck: true
    });
    // Handle SSL/TLS configuration for Redis adapter
    /* istanbul ignore next */
    cov_29ng0qe09t().s[23]++;
    if (isSecure) {
      /* istanbul ignore next */
      cov_29ng0qe09t().b[8][0]++;
      cov_29ng0qe09t().s[24]++;
      clientConfig.socket.host = url.hostname;
      /* istanbul ignore next */
      cov_29ng0qe09t().s[25]++;
      clientConfig.socket.port =
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[9][0]++, parseInt(url.port)) ||
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[9][1]++, 6380);
      /* istanbul ignore next */
      cov_29ng0qe09t().s[26]++;
      clientConfig.socket.tls = {
        rejectUnauthorized: false,
        servername: url.hostname,
        // Enhanced TLS settings for performance
        ciphers: 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384',
        secureProtocol: 'TLSv1_2_method'
      };
    } else {
      /* istanbul ignore next */
      cov_29ng0qe09t().b[8][1]++;
      cov_29ng0qe09t().s[27]++;
      clientConfig.url = redisUrl;
    }
    // Create Redis clients for pub/sub with enhanced configuration
    const pubClient =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[28]++, (0, redis_1.createClient)(clientConfig));
    const subClient =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[29]++, pubClient.duplicate());
    // Enhanced connection handling with retries
    let retryCount =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[30]++, 0);
    const maxRetries =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[31]++, 3);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[32]++;
    while (retryCount < maxRetries) {
      /* istanbul ignore next */
      cov_29ng0qe09t().s[33]++;
      try {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[34]++;
        await Promise.all([pubClient.connect(), subClient.connect()]);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[35]++;
        break;
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[36]++;
        retryCount++;
        /* istanbul ignore next */
        cov_29ng0qe09t().s[37]++;
        logger.warn(`Redis connection attempt ${retryCount} failed:`, error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[38]++;
        if (retryCount >= maxRetries) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[10][0]++;
          cov_29ng0qe09t().s[39]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[10][1]++;
        }
        cov_29ng0qe09t().s[40]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_29ng0qe09t().f[2]++;
          cov_29ng0qe09t().s[41]++;
          return setTimeout(resolve, 1000 * retryCount);
        });
      }
    }
    // Set up the Redis adapter with enhanced configuration
    const adapter =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[42]++, (0, redis_adapter_1.createAdapter)(pubClient, subClient, {
      // Enhanced adapter options for massive scaling
      key: 'socket.io',
      // Namespace for Redis keys
      requestsTimeout: 5000 // Timeout for requests
    }));
    /* istanbul ignore next */
    cov_29ng0qe09t().s[43]++;
    io.adapter(adapter);
    // Add connection monitoring
    /* istanbul ignore next */
    cov_29ng0qe09t().s[44]++;
    pubClient.on('error', error => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[3]++;
      cov_29ng0qe09t().s[45]++;
      logger.error('Redis pub client error:', error);
    });
    /* istanbul ignore next */
    cov_29ng0qe09t().s[46]++;
    subClient.on('error', error => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[4]++;
      cov_29ng0qe09t().s[47]++;
      logger.error('Redis sub client error:', error);
    });
    // Monitor connection health
    /* istanbul ignore next */
    cov_29ng0qe09t().s[48]++;
    pubClient.on('connect', () => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[5]++;
      cov_29ng0qe09t().s[49]++;
      logger.info('Redis pub client connected successfully');
    });
    /* istanbul ignore next */
    cov_29ng0qe09t().s[50]++;
    subClient.on('connect', () => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[6]++;
      cov_29ng0qe09t().s[51]++;
      logger.info('Redis sub client connected successfully');
    });
    /* istanbul ignore next */
    cov_29ng0qe09t().s[52]++;
    logger.info('Enhanced Socket.IO Redis adapter configured successfully for massive scaling');
  } catch (error) {
    /* istanbul ignore next */
    cov_29ng0qe09t().s[53]++;
    logger.error('Failed to setup enhanced Redis adapter:', error);
    // If SSL connection failed, try without SSL as fallback
    /* istanbul ignore next */
    cov_29ng0qe09t().s[54]++;
    if (redisUrl.includes('rediss://')) {
      /* istanbul ignore next */
      cov_29ng0qe09t().b[11][0]++;
      cov_29ng0qe09t().s[55]++;
      try {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[56]++;
        logger.info('Attempting enhanced Redis adapter connection without SSL as fallback...');
        const fallbackUrl =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[57]++, redisUrl.replace('rediss://', 'redis://'));
        const pubClient =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[58]++, (0, redis_1.createClient)({
          url: fallbackUrl,
          socket: {
            connectTimeout: 5000,
            keepAlive: 5000
          }
        }));
        const subClient =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[59]++, pubClient.duplicate());
        /* istanbul ignore next */
        cov_29ng0qe09t().s[60]++;
        await Promise.all([pubClient.connect(), subClient.connect()]);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[61]++;
        io.adapter((0, redis_adapter_1.createAdapter)(pubClient, subClient));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[62]++;
        logger.info('Enhanced Socket.IO Redis adapter configured successfully without SSL');
        /* istanbul ignore next */
        cov_29ng0qe09t().s[63]++;
        return;
      } catch (fallbackError) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[64]++;
        logger.error('Enhanced Redis adapter fallback connection also failed:', fallbackError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_29ng0qe09t().b[11][1]++;
    }
    // Continue without Redis adapter in case of failure
    cov_29ng0qe09t().s[65]++;
    logger.warn('Continuing without Redis adapter - real-time features will be limited to single instance');
  }
};
/* istanbul ignore next */
cov_29ng0qe09t().s[66]++;
exports.setupRedisAdapter = setupRedisAdapter;
// Export function to get socket.io instance
/* istanbul ignore next */
cov_29ng0qe09t().s[67]++;
const getSocketIO = () => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[7]++;
  cov_29ng0qe09t().s[68]++;
  // This would typically return the global io instance
  // For now, return null as it's not set up globally
  return null;
};
/* istanbul ignore next */
cov_29ng0qe09t().s[69]++;
exports.getSocketIO = getSocketIO;
// Enhanced room sharding for massive scale
/* istanbul ignore next */
cov_29ng0qe09t().s[70]++;
const getShardId = async userId => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[8]++;
  // Simple hash-based sharding for consistent room distribution
  const hash =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[71]++, userId.split('').reduce((a, b) => {
    /* istanbul ignore next */
    cov_29ng0qe09t().f[9]++;
    cov_29ng0qe09t().s[72]++;
    a = (a << 5) - a + b.charCodeAt(0);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[73]++;
    return a & a;
  }, 0));
  /* istanbul ignore next */
  cov_29ng0qe09t().s[74]++;
  return Math.abs(hash) % 10; // 10 shards
};
/* istanbul ignore next */
cov_29ng0qe09t().s[75]++;
exports.getShardId = getShardId;
// Initialize rate limiting for socket
/* istanbul ignore next */
cov_29ng0qe09t().s[76]++;
const initializeSocketRateLimit = async socket => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[10]++;
  const userId =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[77]++, socket.userId);
  const socketId =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[78]++, socket.id);
  // Initialize rate limit counters
  /* istanbul ignore next */
  cov_29ng0qe09t().s[79]++;
  await Promise.all([(0, redis_2.setCache)(`rate:${socketId}:messages`, 0, 60),
  // 1 minute window
  (0, redis_2.setCache)(`rate:${socketId}:gifts`, 0, 60), (0, redis_2.setCache)(`rate:${socketId}:joins`, 0, 60), (0, redis_2.setCache)(`rate:${userId}:global`, 0, 60) // Global user rate limit
  ]);
};
/* istanbul ignore next */
cov_29ng0qe09t().s[80]++;
exports.initializeSocketRateLimit = initializeSocketRateLimit;
// Check and update rate limits
/* istanbul ignore next */
cov_29ng0qe09t().s[81]++;
const checkRateLimit = async (socket, action, limit) => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[11]++;
  const userId =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[82]++, socket.userId);
  const socketId =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[83]++, socket.id);
  const key =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[84]++, action === 'global' ?
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[12][0]++, `rate:${userId}:global`) :
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[12][1]++, `rate:${socketId}:${action}`));
  const current =
  /* istanbul ignore next */
  (cov_29ng0qe09t().s[85]++,
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[13][0]++, await (0, redis_2.getCache)(key)) ||
  /* istanbul ignore next */
  (cov_29ng0qe09t().b[13][1]++, 0));
  /* istanbul ignore next */
  cov_29ng0qe09t().s[86]++;
  if (current >= limit) {
    /* istanbul ignore next */
    cov_29ng0qe09t().b[14][0]++;
    cov_29ng0qe09t().s[87]++;
    return {
      allowed: false,
      remaining: 0,
      resetTime: Date.now() + 60000 // 1 minute from now
    };
  } else
  /* istanbul ignore next */
  {
    cov_29ng0qe09t().b[14][1]++;
  }
  // Increment counter
  cov_29ng0qe09t().s[88]++;
  await (0, redis_2.setCache)(key, current + 1, 60);
  /* istanbul ignore next */
  cov_29ng0qe09t().s[89]++;
  return {
    allowed: true,
    remaining: limit - current - 1,
    resetTime: Date.now() + 60000
  };
};
/* istanbul ignore next */
cov_29ng0qe09t().s[90]++;
exports.checkRateLimit = checkRateLimit;
// Enhanced room management with sharding
/* istanbul ignore next */
cov_29ng0qe09t().s[91]++;
const joinRoomWithSharding = async (socket, roomId, roomType) => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[12]++;
  cov_29ng0qe09t().s[92]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[93]++, socket.userId);
    // Check rate limit for room joins
    const rateCheck =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[94]++, await (0, exports.checkRateLimit)(socket, 'joins', 5));
    /* istanbul ignore next */
    cov_29ng0qe09t().s[95]++;
    if (!rateCheck.allowed) {
      /* istanbul ignore next */
      cov_29ng0qe09t().b[15][0]++;
      cov_29ng0qe09t().s[96]++;
      return {
        success: false,
        error: `Rate limit exceeded. Try again in ${Math.ceil((rateCheck.resetTime - Date.now()) / 1000)} seconds`
      };
    } else
    /* istanbul ignore next */
    {
      cov_29ng0qe09t().b[15][1]++;
    }
    // Get shard for this room
    const shardId =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[97]++, await (0, exports.getShardId)(roomId));
    const shardedRoom =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[98]++, `${roomType}:${roomId}:shard:${shardId}`);
    // Join the sharded room
    /* istanbul ignore next */
    cov_29ng0qe09t().s[99]++;
    await socket.join(shardedRoom);
    // Also join the main room for backward compatibility
    /* istanbul ignore next */
    cov_29ng0qe09t().s[100]++;
    await socket.join(`${roomType}:${roomId}`);
    // Update room metadata
    /* istanbul ignore next */
    cov_29ng0qe09t().s[101]++;
    await (0, redis_2.setCache)(`room:${roomId}:metadata`, {
      shardId,
      roomType,
      createdAt: new Date().toISOString(),
      memberCount: await (0, exports.getRoomMemberCount)(shardedRoom)
    }, 3600);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[102]++;
    return {
      success: true,
      shardId
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29ng0qe09t().s[103]++;
    logger.error('Error joining room with sharding:', error);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[104]++;
    return {
      success: false,
      error: 'Failed to join room'
    };
  }
};
/* istanbul ignore next */
cov_29ng0qe09t().s[105]++;
exports.joinRoomWithSharding = joinRoomWithSharding;
// Get room member count (approximate for Redis adapter)
/* istanbul ignore next */
cov_29ng0qe09t().s[106]++;
const getRoomMemberCount = async roomId => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[13]++;
  cov_29ng0qe09t().s[107]++;
  try {
    // This would typically use the Redis adapter to get room size
    // For now, return a cached value or estimate
    const cached =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[108]++,
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[16][0]++, await (0, redis_2.getCache)(`room:${roomId}:count`)) ||
    /* istanbul ignore next */
    (cov_29ng0qe09t().b[16][1]++, 0));
    /* istanbul ignore next */
    cov_29ng0qe09t().s[109]++;
    return cached;
  } catch (error) {
    /* istanbul ignore next */
    cov_29ng0qe09t().s[110]++;
    logger.error('Error getting room member count:', error);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[111]++;
    return 0;
  }
};
/* istanbul ignore next */
cov_29ng0qe09t().s[112]++;
exports.getRoomMemberCount = getRoomMemberCount;
// Enhanced message broadcasting with rate limiting
/* istanbul ignore next */
cov_29ng0qe09t().s[113]++;
const broadcastToRoom = async (io, roomId, event, data, excludeSocket) => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[14]++;
  cov_29ng0qe09t().s[114]++;
  try {
    // Get all shards for this room
    const shards =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[115]++, Array.from({
      length: 10
    }, (_, i) => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[15]++;
      cov_29ng0qe09t().s[116]++;
      return i;
    }));
    let totalRecipients =
    /* istanbul ignore next */
    (cov_29ng0qe09t().s[117]++, 0);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[118]++;
    for (const shardId of shards) {
      const shardedRoom =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[119]++, `${roomId}:shard:${shardId}`);
      const roomSize =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[120]++, await (0, exports.getRoomMemberCount)(shardedRoom));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[121]++;
      if (roomSize > 0) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[17][0]++;
        cov_29ng0qe09t().s[122]++;
        io.to(shardedRoom).emit(event, data);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[123]++;
        totalRecipients += roomSize;
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[17][1]++;
      }
    }
    /* istanbul ignore next */
    cov_29ng0qe09t().s[124]++;
    return {
      success: true,
      recipients: totalRecipients
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_29ng0qe09t().s[125]++;
    logger.error('Error broadcasting to room:', error);
    /* istanbul ignore next */
    cov_29ng0qe09t().s[126]++;
    return {
      success: false,
      recipients: 0,
      error: 'Broadcast failed'
    };
  }
};
/* istanbul ignore next */
cov_29ng0qe09t().s[127]++;
exports.broadcastToRoom = broadcastToRoom;
/* istanbul ignore next */
cov_29ng0qe09t().s[128]++;
const setupSocketIO = io => {
  /* istanbul ignore next */
  cov_29ng0qe09t().f[16]++;
  cov_29ng0qe09t().s[129]++;
  // Enhanced authentication middleware with connection limits
  io.use(async (socket, next) => {
    /* istanbul ignore next */
    cov_29ng0qe09t().f[17]++;
    cov_29ng0qe09t().s[130]++;
    try {
      const token =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[131]++,
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[18][0]++, socket.handshake.auth.token) ||
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[18][1]++, socket.handshake.headers.authorization));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[132]++;
      if (!token) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[19][0]++;
        cov_29ng0qe09t().s[133]++;
        return next(new Error('Authentication token required'));
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[19][1]++;
      }
      const decoded =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[134]++, jsonwebtoken_1.default.verify(token, process.env.JWT_SECRET));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[135]++;
      socket.userId = decoded.userId;
      // Enhanced user data caching with TTL
      const userData =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[136]++, await (0, redis_2.getCache)(`user:${decoded.userId}`));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[137]++;
      if (userData) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[20][0]++;
        cov_29ng0qe09t().s[138]++;
        socket.user = userData;
      } else {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[20][1]++;
        // Cache miss - fetch from database and cache for 5 minutes
        // This would typically fetch from User model
        const user =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[139]++, {
          id: decoded.userId,
          username: `user_${decoded.userId}`
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[140]++;
        socket.user = user;
        /* istanbul ignore next */
        cov_29ng0qe09t().s[141]++;
        await (0, redis_2.setCache)(`user:${decoded.userId}`, user, 300); // 5 minutes TTL
      }
      // Check connection limits per user (max 5 concurrent connections)
      const connectionCount =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[142]++,
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[21][0]++, await (0, redis_2.getCache)(`connections:${decoded.userId}`)) ||
      /* istanbul ignore next */
      (cov_29ng0qe09t().b[21][1]++, 0));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[143]++;
      if (connectionCount >= 5) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[22][0]++;
        cov_29ng0qe09t().s[144]++;
        logger.warn(`User ${decoded.userId} exceeded connection limit`);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[145]++;
        return next(new Error('Maximum concurrent connections exceeded'));
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[22][1]++;
      }
      // Increment connection count
      cov_29ng0qe09t().s[146]++;
      await (0, redis_2.setCache)(`connections:${decoded.userId}`, connectionCount + 1, 3600); // 1 hour TTL
      /* istanbul ignore next */
      cov_29ng0qe09t().s[147]++;
      next();
    } catch (error) {
      /* istanbul ignore next */
      cov_29ng0qe09t().s[148]++;
      logger.error('Socket authentication error:', error);
      /* istanbul ignore next */
      cov_29ng0qe09t().s[149]++;
      next(new Error('Invalid authentication token'));
    }
  });
  /* istanbul ignore next */
  cov_29ng0qe09t().s[150]++;
  io.on('connection', async socket => {
    /* istanbul ignore next */
    cov_29ng0qe09t().f[18]++;
    cov_29ng0qe09t().s[151]++;
    try {
      // Check if connection is allowed
      const connectionCheck =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[152]++, await SocketSecurityService_1.socketSecurityService.canConnect(socket, socket.userId));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[153]++;
      if (!connectionCheck.allowed) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[23][0]++;
        cov_29ng0qe09t().s[154]++;
        logger.warn(`Connection blocked for user ${socket.userId}: ${connectionCheck.reason}`);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[155]++;
        socket.emit('error', {
          message: connectionCheck.reason,
          limits: connectionCheck.limits
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[156]++;
        socket.disconnect(true);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[157]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[23][1]++;
      }
      // Register the connection
      cov_29ng0qe09t().s[158]++;
      SocketSecurityService_1.socketSecurityService.registerConnection(socket, socket.userId);
      // Mark user as online and deliver offline messages
      const offlineMessages =
      /* istanbul ignore next */
      (cov_29ng0qe09t().s[159]++, await MessagePersistenceService_1.messagePersistenceService.markUserOnline(socket.userId));
      /* istanbul ignore next */
      cov_29ng0qe09t().s[160]++;
      logger.info(`User ${socket.userId} connected with ${offlineMessages.length} offline messages`);
      // Join user to their personal room
      /* istanbul ignore next */
      cov_29ng0qe09t().s[161]++;
      if (socket.userId) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[24][0]++;
        cov_29ng0qe09t().s[162]++;
        socket.join(`user:${socket.userId}`);
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[24][1]++;
      }
      // Send offline messages to user
      cov_29ng0qe09t().s[163]++;
      if (offlineMessages.length > 0) {
        /* istanbul ignore next */
        cov_29ng0qe09t().b[25][0]++;
        cov_29ng0qe09t().s[164]++;
        socket.emit('offline_messages', {
          messages: offlineMessages,
          count: offlineMessages.length,
          timestamp: new Date().toISOString()
        });
      } else
      /* istanbul ignore next */
      {
        cov_29ng0qe09t().b[25][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_29ng0qe09t().s[165]++;
      logger.error('Connection setup error:', error);
      /* istanbul ignore next */
      cov_29ng0qe09t().s[166]++;
      socket.emit('error', {
        message: 'Connection setup failed'
      });
      /* istanbul ignore next */
      cov_29ng0qe09t().s[167]++;
      socket.disconnect(true);
      /* istanbul ignore next */
      cov_29ng0qe09t().s[168]++;
      return;
    }
    // Enhanced stream events with sharding and rate limiting
    /* istanbul ignore next */
    cov_29ng0qe09t().s[169]++;
    socket.on('stream:join', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[19]++;
      cov_29ng0qe09t().s[170]++;
      try {
        const {
          streamId
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[171]++, data);
        // Check if user can join room
        const roomCheck =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[172]++, await SocketSecurityService_1.socketSecurityService.canJoinRoom(socket.userId, `stream:${streamId}`));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[173]++;
        if (!roomCheck.allowed) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[26][0]++;
          cov_29ng0qe09t().s[174]++;
          socket.emit('error', {
            message: roomCheck.reason,
            limits: roomCheck.limits
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[175]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[26][1]++;
        }
        // Use enhanced room joining with sharding
        const joinResult =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[176]++, await (0, exports.joinRoomWithSharding)(socket, streamId, 'stream'));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[177]++;
        if (!joinResult.success) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[27][0]++;
          cov_29ng0qe09t().s[178]++;
          socket.emit('error', {
            message: joinResult.error
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[179]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[27][1]++;
        }
        cov_29ng0qe09t().s[180]++;
        SocketSecurityService_1.socketSecurityService.recordRoomJoin(socket.userId, `stream:${streamId}`);
        // Update viewer count
        /* istanbul ignore next */
        cov_29ng0qe09t().s[181]++;
        await liveStreamService_1.LiveStreamService.addViewer(streamId, socket.userId);
        // Broadcast join event using enhanced broadcasting
        const joinData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[182]++, {
          userId: socket.userId,
          username: socket.user?.username,
          timestamp: new Date(),
          shardId: joinResult.shardId
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[183]++;
        await (0, exports.broadcastToRoom)(io, `stream:${streamId}`, 'stream:join', joinData, socket.id);
        // Send current stream info to the new viewer with shard info
        const streamInfo =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[184]++, await liveStreamService_1.LiveStreamService.getStreamInfo(streamId));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[185]++;
        socket.emit('stream:join', {
          ...streamInfo,
          shardId: joinResult.shardId,
          roomSize: await (0, exports.getRoomMemberCount)(`stream:${streamId}`)
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[186]++;
        logger.info(`User ${socket.userId} joined stream ${streamId} on shard ${joinResult.shardId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[187]++;
        logger.error('Error joining stream:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[188]++;
        socket.emit('error', {
          message: 'Failed to join stream'
        });
      }
    });
    /* istanbul ignore next */
    cov_29ng0qe09t().s[189]++;
    socket.on('stream:leave', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[20]++;
      cov_29ng0qe09t().s[190]++;
      try {
        const {
          streamId
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[191]++, data);
        // Leave the live stream room
        /* istanbul ignore next */
        cov_29ng0qe09t().s[192]++;
        socket.leave(`stream:${streamId}`);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[193]++;
        SocketSecurityService_1.socketSecurityService.recordRoomLeave(socket.userId, `stream:${streamId}`);
        // Update viewer count
        /* istanbul ignore next */
        cov_29ng0qe09t().s[194]++;
        await liveStreamService_1.LiveStreamService.removeViewer(streamId, socket.userId);
        // Broadcast leave event to others
        const leaveData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[195]++, {
          userId: socket.userId,
          username: socket.user?.username,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[196]++;
        socket.to(`stream:${streamId}`).emit('stream:leave', leaveData);
        // Acknowledge to leaver
        /* istanbul ignore next */
        cov_29ng0qe09t().s[197]++;
        socket.emit('stream:leave', leaveData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[198]++;
        logger.info(`User ${socket.userId} left stream ${streamId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[199]++;
        logger.error('Error leaving stream:', error);
      }
    });
    // Enhanced chat events with advanced rate limiting
    /* istanbul ignore next */
    cov_29ng0qe09t().s[200]++;
    socket.on('chat:new', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[21]++;
      cov_29ng0qe09t().s[201]++;
      try {
        const {
          streamId,
          message,
          type
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[202]++, data);
        // Enhanced rate limiting for messages
        const rateCheck =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[203]++, await (0, exports.checkRateLimit)(socket, 'messages', 30)); // 30 messages per minute
        /* istanbul ignore next */
        cov_29ng0qe09t().s[204]++;
        if (!rateCheck.allowed) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[28][0]++;
          cov_29ng0qe09t().s[205]++;
          socket.emit('error', {
            message: `Rate limit exceeded. Try again in ${Math.ceil((rateCheck.resetTime - Date.now()) / 1000)} seconds`,
            remaining: rateCheck.remaining,
            resetTime: rateCheck.resetTime
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[206]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[28][1]++;
        }
        // Check if message can be sent
        const messageCheck =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[207]++, await SocketSecurityService_1.socketSecurityService.canSendMessage(socket, socket.userId, message));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[208]++;
        if (!messageCheck.allowed) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[29][0]++;
          cov_29ng0qe09t().s[209]++;
          socket.emit('error', {
            message: messageCheck.reason,
            limits: messageCheck.limits
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[210]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[29][1]++;
        }
        // Record the message
        cov_29ng0qe09t().s[211]++;
        SocketSecurityService_1.socketSecurityService.recordMessage(socket.userId);
        // Process message through AI moderation
        const moderation =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[212]++, await chatService_1.ChatService.moderateMessage(message));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[213]++;
        if (moderation.blocked) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[30][0]++;
          cov_29ng0qe09t().s[214]++;
          if (moderation.action === 'warn') {
            /* istanbul ignore next */
            cov_29ng0qe09t().b[31][0]++;
            cov_29ng0qe09t().s[215]++;
            socket.emit('ai:warning', {
              message: 'Message contains inappropriate content',
              type: 'content_moderation',
              score: moderation.score
            });
          } else {
            /* istanbul ignore next */
            cov_29ng0qe09t().b[31][1]++;
            cov_29ng0qe09t().s[216]++;
            if (moderation.action === 'ban') {
              /* istanbul ignore next */
              cov_29ng0qe09t().b[32][0]++;
              cov_29ng0qe09t().s[217]++;
              socket.emit('ai:warning', {
                message: 'Severe content detected. You have been temporarily restricted.',
                type: 'content_ban',
                score: moderation.score
              });
            } else
            /* istanbul ignore next */
            {
              cov_29ng0qe09t().b[32][1]++;
            }
          }
          /* istanbul ignore next */
          cov_29ng0qe09t().s[218]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[30][1]++;
        }
        // Save message to database
        const savedMessage =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[219]++, await chatService_1.ChatService.saveMessage({
          streamId,
          userId: socket.userId,
          message,
          type,
          timestamp: new Date()
        }));
        // Persist message for offline users
        /* istanbul ignore next */
        cov_29ng0qe09t().s[220]++;
        await MessagePersistenceService_1.messagePersistenceService.persistMessage({
          id: savedMessage._id,
          userId: socket.userId,
          channelId: streamId,
          channelType: 'stream',
          message,
          messageType: type === 'gift' ?
          /* istanbul ignore next */
          (cov_29ng0qe09t().b[33][0]++, 'gift') :
          /* istanbul ignore next */
          (cov_29ng0qe09t().b[33][1]++, 'text'),
          timestamp: savedMessage.timestamp,
          metadata: {
            moderationScore: moderation.score
          }
        });
        // Add user to channel for offline message delivery
        /* istanbul ignore next */
        cov_29ng0qe09t().s[221]++;
        await MessagePersistenceService_1.messagePersistenceService.addUserToChannel(socket.userId, streamId, 'stream');
        // Broadcast message to stream room with canonical event name
        const messageData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[222]++, {
          id: savedMessage._id,
          userId: socket.userId,
          username: socket.user?.username,
          message,
          type,
          timestamp: savedMessage.timestamp,
          userAvatar: socket.user?.avatar
        });
        // Use enhanced broadcasting
        /* istanbul ignore next */
        cov_29ng0qe09t().s[223]++;
        await (0, exports.broadcastToRoom)(io, `stream:${streamId}`, 'chat:new', messageData, socket.id);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[224]++;
        socket.emit('chat:new', messageData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[225]++;
        logger.info(`Message sent and persisted in stream ${streamId} by user ${socket.userId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[226]++;
        logger.error('Error sending message:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[227]++;
        socket.emit('error', {
          message: 'Failed to send message'
        });
      }
    });
    // Enhanced gift events with atomic transactions and rate limiting
    /* istanbul ignore next */
    cov_29ng0qe09t().s[228]++;
    socket.on('gift:sent', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[22]++;
      cov_29ng0qe09t().s[229]++;
      try {
        const {
          streamId,
          giftId,
          quantity
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[230]++, data);
        // Enhanced rate limiting for gifts (10 per minute)
        const rateCheck =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[231]++, await (0, exports.checkRateLimit)(socket, 'gifts', 10));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[232]++;
        if (!rateCheck.allowed) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[34][0]++;
          cov_29ng0qe09t().s[233]++;
          socket.emit('error', {
            message: `Gift rate limit exceeded. Try again in ${Math.ceil((rateCheck.resetTime - Date.now()) / 1000)} seconds`,
            remaining: rateCheck.remaining,
            resetTime: rateCheck.resetTime
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[234]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[34][1]++;
        }
        // Process gift transaction with atomic operations
        const giftResult =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[235]++, await GiftTransactionService_1.giftTransactionService.processGiftTransaction(socket.userId, streamId,
        // Using streamId as receiverId for now
        streamId, giftId, quantity));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[236]++;
        if (
        /* istanbul ignore next */
        (cov_29ng0qe09t().b[36][0]++, giftResult.success) &&
        /* istanbul ignore next */
        (cov_29ng0qe09t().b[36][1]++, giftResult.giftData)) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[35][0]++;
          cov_29ng0qe09t().s[237]++;
          // Persist gift message
          await MessagePersistenceService_1.messagePersistenceService.persistMessage({
            id: giftResult.transactionId,
            userId: socket.userId,
            channelId: streamId,
            channelType: 'stream',
            message: `Sent ${quantity} ${giftResult.giftData.giftName}`,
            messageType: 'gift',
            timestamp: new Date(),
            metadata: {
              giftId: giftResult.giftData.giftId,
              giftQuantity: quantity
            }
          });
          // Broadcast gift using enhanced broadcasting
          const giftData =
          /* istanbul ignore next */
          (cov_29ng0qe09t().s[238]++, {
            senderId: socket.userId,
            senderName: socket.user?.username,
            giftId: giftResult.giftData.giftId,
            giftName: giftResult.giftData.giftName,
            quantity,
            animation: giftResult.giftData.animation,
            timestamp: new Date(),
            transactionId: giftResult.transactionId,
            rarity: giftResult.giftData.rarity,
            coinCost: giftResult.giftData.coinCost
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[239]++;
          await (0, exports.broadcastToRoom)(io, `stream:${streamId}`, 'gift:sent', giftData, socket.id);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[240]++;
          socket.emit('gift:sent', giftData);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[241]++;
          logger.info(`Gift sent in stream ${streamId} by user ${socket.userId} (txn: ${giftResult.transactionId})`);
        } else {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[35][1]++;
          cov_29ng0qe09t().s[242]++;
          socket.emit('error', {
            message: giftResult.error
          });
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[243]++;
        logger.error('Error sending gift:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[244]++;
        socket.emit('error', {
          message: 'Failed to send gift'
        });
      }
    });
    // Throne events
    /* istanbul ignore next */
    cov_29ng0qe09t().s[245]++;
    socket.on('throne:claimed', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[23]++;
      cov_29ng0qe09t().s[246]++;
      try {
        const {
          streamId
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[247]++, data);
        // Check if user has throne access
        const hasAccess =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[248]++, await liveStreamService_1.LiveStreamService.checkThroneAccess(socket.userId, streamId));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[249]++;
        if (hasAccess) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[37][0]++;
          cov_29ng0qe09t().s[250]++;
          socket.join(`throne:${streamId}`);
          // Broadcast throne claim
          const throneData =
          /* istanbul ignore next */
          (cov_29ng0qe09t().s[251]++, {
            userId: socket.userId,
            username: socket.user?.username,
            timestamp: new Date()
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[252]++;
          socket.to(`stream:${streamId}`).emit('throne:claimed', throneData);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[253]++;
          socket.emit('throne:claimed', throneData);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[254]++;
          logger.info(`User ${socket.userId} claimed throne in stream ${streamId}`);
        } else {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[37][1]++;
          cov_29ng0qe09t().s[255]++;
          socket.emit('error', {
            message: 'Throne access required'
          });
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[256]++;
        logger.error('Error claiming throne:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[257]++;
        socket.emit('error', {
          message: 'Failed to claim throne'
        });
      }
    });
    // Battle events
    /* istanbul ignore next */
    cov_29ng0qe09t().s[258]++;
    socket.on('battle:boost', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[24]++;
      cov_29ng0qe09t().s[259]++;
      try {
        const {
          streamId,
          boostType,
          boostAmount
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[260]++, data);
        // Process battle boost
        const boostResult =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[261]++, await liveStreamService_1.LiveStreamService.processBattleBoost({
          streamId,
          userId: socket.userId,
          boostType,
          boostAmount
        }));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[262]++;
        if (boostResult.success) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[38][0]++;
          const boostData =
          /* istanbul ignore next */
          (cov_29ng0qe09t().s[263]++, {
            userId: socket.userId,
            username: socket.user?.username,
            boostType,
            boostAmount,
            timestamp: new Date()
          });
          /* istanbul ignore next */
          cov_29ng0qe09t().s[264]++;
          socket.to(`stream:${streamId}`).emit('battle:boost', boostData);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[265]++;
          socket.emit('battle:boost', boostData);
          /* istanbul ignore next */
          cov_29ng0qe09t().s[266]++;
          logger.info(`Battle boost in stream ${streamId} by user ${socket.userId}`);
        } else {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[38][1]++;
          cov_29ng0qe09t().s[267]++;
          socket.emit('error', {
            message: boostResult.error
          });
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[268]++;
        logger.error('Error processing battle boost:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[269]++;
        socket.emit('error', {
          message: 'Failed to process battle boost'
        });
      }
    });
    // AI events
    /* istanbul ignore next */
    cov_29ng0qe09t().s[270]++;
    socket.on('ai:warning', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[25]++;
      cov_29ng0qe09t().s[271]++;
      try {
        const {
          streamId,
          warningType,
          message
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[272]++, data);
        // Broadcast AI warning to stream room
        const warningData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[273]++, {
          userId: socket.userId,
          username: socket.user?.username,
          warningType,
          message,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[274]++;
        socket.to(`stream:${streamId}`).emit('ai:warning', warningData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[275]++;
        socket.emit('ai:warning', warningData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[276]++;
        logger.info(`AI warning in stream ${streamId} for user ${socket.userId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[277]++;
        logger.error('Error sending AI warning:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[278]++;
        socket.emit('error', {
          message: 'Failed to send AI warning'
        });
      }
    });
    // OG events
    /* istanbul ignore next */
    cov_29ng0qe09t().s[279]++;
    socket.on('og:changed', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[26]++;
      cov_29ng0qe09t().s[280]++;
      try {
        const {
          userId,
          oldLevel,
          newLevel
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[281]++, data);
        // Broadcast OG level change
        const ogData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[282]++, {
          userId,
          username: socket.user?.username,
          oldLevel,
          newLevel,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[283]++;
        socket.to(`user:${userId}`).emit('og:changed', ogData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[284]++;
        socket.emit('og:changed', ogData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[285]++;
        logger.info(`OG level changed for user ${userId} from ${oldLevel} to ${newLevel}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[286]++;
        logger.error('Error broadcasting OG change:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[287]++;
        socket.emit('error', {
          message: 'Failed to broadcast OG change'
        });
      }
    });
    // Metrics events
    /* istanbul ignore next */
    cov_29ng0qe09t().s[288]++;
    socket.on('metrics:update', async data => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[27]++;
      cov_29ng0qe09t().s[289]++;
      try {
        const {
          streamId,
          metrics
        } =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[290]++, data);
        // Update stream metrics
        /* istanbul ignore next */
        cov_29ng0qe09t().s[291]++;
        await liveStreamService_1.LiveStreamService.updateStreamMetrics(streamId, metrics);
        // Broadcast metrics update to stream room
        const metricsData =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[292]++, {
          streamId,
          metrics,
          timestamp: new Date()
        });
        /* istanbul ignore next */
        cov_29ng0qe09t().s[293]++;
        socket.to(`stream:${streamId}`).emit('metrics:update', metricsData);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[294]++;
        logger.info(`Metrics updated for stream ${streamId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[295]++;
        logger.error('Error updating metrics:', error);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[296]++;
        socket.emit('error', {
          message: 'Failed to update metrics'
        });
      }
    });
    // Enhanced disconnection handling with cleanup
    /* istanbul ignore next */
    cov_29ng0qe09t().s[297]++;
    socket.on('disconnect', async reason => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[28]++;
      cov_29ng0qe09t().s[298]++;
      try {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[299]++;
        logger.info(`User ${socket.userId} disconnected (reason: ${reason})`);
        // Decrement connection count
        const connectionCount =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[300]++,
        /* istanbul ignore next */
        (cov_29ng0qe09t().b[39][0]++, await (0, redis_2.getCache)(`connections:${socket.userId}`)) ||
        /* istanbul ignore next */
        (cov_29ng0qe09t().b[39][1]++, 0));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[301]++;
        if (connectionCount > 0) {
          /* istanbul ignore next */
          cov_29ng0qe09t().b[40][0]++;
          cov_29ng0qe09t().s[302]++;
          await (0, redis_2.setCache)(`connections:${socket.userId}`, connectionCount - 1, 3600);
        } else
        /* istanbul ignore next */
        {
          cov_29ng0qe09t().b[40][1]++;
        }
        // Clean up socket metadata
        cov_29ng0qe09t().s[303]++;
        await (0, redis_2.deleteCache)(`socket:${socket.id}`);
        // Mark user as offline
        /* istanbul ignore next */
        cov_29ng0qe09t().s[304]++;
        await MessagePersistenceService_1.messagePersistenceService.markUserOffline(socket.userId);
        // Handle socket security cleanup
        /* istanbul ignore next */
        cov_29ng0qe09t().s[305]++;
        SocketSecurityService_1.socketSecurityService.handleDisconnection(socket.userId, socket);
        // Clean up any active sessions
        /* istanbul ignore next */
        cov_29ng0qe09t().s[306]++;
        await liveStreamService_1.LiveStreamService.handleUserDisconnect(socket.userId);
        // Enhanced room cleanup with sharding
        const roomsToLeave =
        /* istanbul ignore next */
        (cov_29ng0qe09t().s[307]++, Array.from(socket.rooms));
        /* istanbul ignore next */
        cov_29ng0qe09t().s[308]++;
        for (const room of roomsToLeave) {
          /* istanbul ignore next */
          cov_29ng0qe09t().s[309]++;
          if (room !== socket.id) {
            /* istanbul ignore next */
            cov_29ng0qe09t().b[41][0]++;
            cov_29ng0qe09t().s[310]++;
            socket.leave(room);
            // Update room metadata
            const roomMetadata =
            /* istanbul ignore next */
            (cov_29ng0qe09t().s[311]++, await (0, redis_2.getCache)(`room:${room}:metadata`));
            /* istanbul ignore next */
            cov_29ng0qe09t().s[312]++;
            if (roomMetadata) {
              /* istanbul ignore next */
              cov_29ng0qe09t().b[42][0]++;
              cov_29ng0qe09t().s[313]++;
              roomMetadata.memberCount = Math.max(0, (
              /* istanbul ignore next */
              (cov_29ng0qe09t().b[43][0]++, roomMetadata.memberCount) ||
              /* istanbul ignore next */
              (cov_29ng0qe09t().b[43][1]++, 1)) - 1);
              /* istanbul ignore next */
              cov_29ng0qe09t().s[314]++;
              await (0, redis_2.setCache)(`room:${room}:metadata`, roomMetadata, 3600);
            } else
            /* istanbul ignore next */
            {
              cov_29ng0qe09t().b[42][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_29ng0qe09t().b[41][1]++;
          }
        }
        // Clean up rate limiting data
        /* istanbul ignore next */
        cov_29ng0qe09t().s[315]++;
        await Promise.all([(0, redis_2.deleteCache)(`rate:${socket.id}:messages`), (0, redis_2.deleteCache)(`rate:${socket.id}:gifts`), (0, redis_2.deleteCache)(`rate:${socket.id}:joins`)]);
        /* istanbul ignore next */
        cov_29ng0qe09t().s[316]++;
        logger.info(`Enhanced cleanup completed for user ${socket.userId}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_29ng0qe09t().s[317]++;
        logger.error('Error handling enhanced disconnect:', error);
      }
    });
    // Error handling
    /* istanbul ignore next */
    cov_29ng0qe09t().s[318]++;
    socket.on('error', error => {
      /* istanbul ignore next */
      cov_29ng0qe09t().f[29]++;
      cov_29ng0qe09t().s[319]++;
      logger.error('Socket error:', error);
    });
  });
  // Global error handling
  /* istanbul ignore next */
  cov_29ng0qe09t().s[320]++;
  io.engine.on('connection_error', err => {
    /* istanbul ignore next */
    cov_29ng0qe09t().f[30]++;
    cov_29ng0qe09t().s[321]++;
    logger.error('Socket.IO connection error:', err);
  });
};
/* istanbul ignore next */
cov_29ng0qe09t().s[322]++;
exports.setupSocketIO = setupSocketIO;