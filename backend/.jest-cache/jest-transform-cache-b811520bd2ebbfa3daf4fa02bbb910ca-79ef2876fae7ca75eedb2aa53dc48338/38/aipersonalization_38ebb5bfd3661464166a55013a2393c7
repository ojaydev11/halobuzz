d96345b08e103be5de946bedb4b0953a
"use strict";

/* istanbul ignore next */
function cov_akypuj0yv() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\ai-personalization.ts";
  var hash = "0c9da542aa56b6e228990ff45accc359ff5f0d21";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\ai-personalization.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 39
        },
        end: {
          line: 8,
          column: 90
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "10": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "11": {
        start: {
          line: 15,
          column: 32
        },
        end: {
          line: 15,
          column: 125
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 84
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "15": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "16": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "17": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "18": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 115
        }
      },
      "19": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 79
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "22": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "23": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "24": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "25": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 51,
          column: 36
        }
      },
      "26": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 120
        }
      },
      "27": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 73
        }
      },
      "29": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "30": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "31": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "32": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 69,
          column: 38
        }
      },
      "33": {
        start: {
          line: 70,
          column: 25
        },
        end: {
          line: 70,
          column: 111
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "35": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 69
        }
      },
      "36": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "37": {
        start: {
          line: 85,
          column: 0
        },
        end: {
          line: 102,
          column: 3
        }
      },
      "38": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "39": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 38
        }
      },
      "40": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 88,
          column: 36
        }
      },
      "41": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 106
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "43": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 74
        }
      },
      "44": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "45": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 120,
          column: 3
        }
      },
      "46": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "47": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "48": {
        start: {
          line: 107,
          column: 27
        },
        end: {
          line: 107,
          column: 115
        }
      },
      "49": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "50": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 79
        }
      },
      "51": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "52": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 138,
          column: 3
        }
      },
      "53": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "54": {
        start: {
          line: 124,
          column: 23
        },
        end: {
          line: 124,
          column: 38
        }
      },
      "55": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 117
        }
      },
      "56": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "58": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "59": {
        start: {
          line: 139,
          column: 0
        },
        end: {
          line: 139,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 54
          },
          end: {
            line: 12,
            column: 55
          }
        },
        loc: {
          start: {
            line: 12,
            column: 74
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 49
          },
          end: {
            line: 30,
            column: 50
          }
        },
        loc: {
          start: {
            line: 30,
            column: 69
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 51
          },
          end: {
            line: 48,
            column: 52
          }
        },
        loc: {
          start: {
            line: 48,
            column: 71
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 47
          },
          end: {
            line: 67,
            column: 48
          }
        },
        loc: {
          start: {
            line: 67,
            column: 67
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 51
          },
          end: {
            line: 85,
            column: 52
          }
        },
        loc: {
          start: {
            line: 85,
            column: 71
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 104,
            column: 50
          }
        },
        loc: {
          start: {
            line: 104,
            column: 69
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 122,
            column: 51
          },
          end: {
            line: 122,
            column: 52
          }
        },
        loc: {
          start: {
            line: 122,
            column: 71
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 122
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0c9da542aa56b6e228990ff45accc359ff5f0d21"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_akypuj0yv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_akypuj0yv();
var __importDefault =
/* istanbul ignore next */
(cov_akypuj0yv().s[0]++,
/* istanbul ignore next */
(cov_akypuj0yv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_akypuj0yv().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_akypuj0yv().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_akypuj0yv().f[0]++;
  cov_akypuj0yv().s[1]++;
  return /* istanbul ignore next */(cov_akypuj0yv().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_akypuj0yv().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_akypuj0yv().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_akypuj0yv().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_akypuj0yv().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_akypuj0yv().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_akypuj0yv().s[4]++, require("../middleware/auth"));
const AIHyperPersonalizationEngine_1 =
/* istanbul ignore next */
(cov_akypuj0yv().s[5]++, require("../services/AIHyperPersonalizationEngine"));
const logger_1 =
/* istanbul ignore next */
(cov_akypuj0yv().s[6]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_akypuj0yv().s[7]++, express_1.default.Router());
// Get personalized content recommendations
/* istanbul ignore next */
cov_akypuj0yv().s[8]++;
router.get('/recommendations', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[1]++;
  cov_akypuj0yv().s[9]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[10]++, req.user.userId);
    const recommendations =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[11]++, await AIHyperPersonalizationEngine_1.aiPersonalization.getPersonalizedRecommendations(userId));
    /* istanbul ignore next */
    cov_akypuj0yv().s[12]++;
    res.json({
      success: true,
      data: recommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[13]++;
    logger_1.logger.error('Error getting personalized recommendations:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[14]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get recommendations'
    });
  }
});
// Get personalized user experience
/* istanbul ignore next */
cov_akypuj0yv().s[15]++;
router.get('/experience', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[2]++;
  cov_akypuj0yv().s[16]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[17]++, req.user.userId);
    const experience =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[18]++, await AIHyperPersonalizationEngine_1.aiPersonalization.getPersonalizedExperience(userId));
    /* istanbul ignore next */
    cov_akypuj0yv().s[19]++;
    res.json({
      success: true,
      data: experience
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[20]++;
    logger_1.logger.error('Error getting personalized experience:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[21]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get experience'
    });
  }
});
// Update user preferences for personalization
/* istanbul ignore next */
cov_akypuj0yv().s[22]++;
router.post('/preferences', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[3]++;
  cov_akypuj0yv().s[23]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[24]++, req.user.userId);
    const preferences =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[25]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[26]++, await AIHyperPersonalizationEngine_1.aiPersonalization.updateUserPreferences(userId, preferences));
    /* istanbul ignore next */
    cov_akypuj0yv().s[27]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[28]++;
    logger_1.logger.error('Error updating user preferences:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[29]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update preferences'
    });
  }
});
// Get user behavior insights
/* istanbul ignore next */
cov_akypuj0yv().s[30]++;
router.get('/insights', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[4]++;
  cov_akypuj0yv().s[31]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[32]++, req.user.userId);
    const insights =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[33]++, await AIHyperPersonalizationEngine_1.aiPersonalization.getUserBehaviorInsights(userId));
    /* istanbul ignore next */
    cov_akypuj0yv().s[34]++;
    res.json({
      success: true,
      data: insights
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[35]++;
    logger_1.logger.error('Error getting user insights:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[36]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get insights'
    });
  }
});
// Record user interaction for learning
/* istanbul ignore next */
cov_akypuj0yv().s[37]++;
router.post('/interaction', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[5]++;
  cov_akypuj0yv().s[38]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[39]++, req.user.userId);
    const interaction =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[40]++, req.body);
    /* istanbul ignore next */
    cov_akypuj0yv().s[41]++;
    await AIHyperPersonalizationEngine_1.aiPersonalization.recordUserInteraction(userId, interaction);
    /* istanbul ignore next */
    cov_akypuj0yv().s[42]++;
    res.json({
      success: true,
      message: 'Interaction recorded successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[43]++;
    logger_1.logger.error('Error recording user interaction:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[44]++;
    res.status(500).json({
      success: false,
      error: 'Failed to record interaction'
    });
  }
});
// Get personalized challenges
/* istanbul ignore next */
cov_akypuj0yv().s[45]++;
router.get('/challenges', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[6]++;
  cov_akypuj0yv().s[46]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[47]++, req.user.userId);
    const challenges =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[48]++, await AIHyperPersonalizationEngine_1.aiPersonalization.getPersonalizedChallenges(userId));
    /* istanbul ignore next */
    cov_akypuj0yv().s[49]++;
    res.json({
      success: true,
      data: challenges
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[50]++;
    logger_1.logger.error('Error getting personalized challenges:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[51]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get challenges'
    });
  }
});
// Get engagement optimization
/* istanbul ignore next */
cov_akypuj0yv().s[52]++;
router.get('/optimization', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_akypuj0yv().f[7]++;
  cov_akypuj0yv().s[53]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[54]++, req.user.userId);
    const optimization =
    /* istanbul ignore next */
    (cov_akypuj0yv().s[55]++, await AIHyperPersonalizationEngine_1.aiPersonalization.getEngagementOptimization(userId));
    /* istanbul ignore next */
    cov_akypuj0yv().s[56]++;
    res.json({
      success: true,
      data: optimization
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_akypuj0yv().s[57]++;
    logger_1.logger.error('Error getting engagement optimization:', error);
    /* istanbul ignore next */
    cov_akypuj0yv().s[58]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get optimization'
    });
  }
});
/* istanbul ignore next */
cov_akypuj0yv().s[59]++;
exports.default = router;