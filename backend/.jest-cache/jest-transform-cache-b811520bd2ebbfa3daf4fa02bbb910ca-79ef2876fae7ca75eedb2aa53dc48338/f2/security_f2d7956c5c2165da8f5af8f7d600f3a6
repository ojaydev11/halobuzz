b645563e5f6a145c92112f737d2286ca
"use strict";

/* istanbul ignore next */
function cov_2k1mtstuly() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\security.ts";
  var hash = "a0dca3ac31def30bcd453ec0167378bd3ab026d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\security.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 73
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "9": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 84
        }
      },
      "12": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 20,
          column: 97
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 25,
          column: 11
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 63
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "16": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 57,
          column: 3
        }
      },
      "17": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "18": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 102
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "20": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 69
        }
      },
      "23": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "24": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "25": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "26": {
        start: {
          line: 61,
          column: 29
        },
        end: {
          line: 61,
          column: 102
        }
      },
      "27": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "28": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "29": {
        start: {
          line: 69,
          column: 32
        },
        end: {
          line: 69,
          column: 66
        }
      },
      "30": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 70,
          column: 91
        }
      },
      "31": {
        start: {
          line: 70,
          column: 58
        },
        end: {
          line: 70,
          column: 83
        }
      },
      "32": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 71,
          column: 83
        }
      },
      "33": {
        start: {
          line: 71,
          column: 54
        },
        end: {
          line: 71,
          column: 75
        }
      },
      "34": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 87
        }
      },
      "35": {
        start: {
          line: 72,
          column: 56
        },
        end: {
          line: 72,
          column: 79
        }
      },
      "36": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 81
        }
      },
      "37": {
        start: {
          line: 73,
          column: 53
        },
        end: {
          line: 73,
          column: 73
        }
      },
      "38": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "39": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "40": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "41": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 74
        }
      },
      "42": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "43": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 173,
          column: 3
        }
      },
      "44": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "45": {
        start: {
          line: 111,
          column: 32
        },
        end: {
          line: 160,
          column: 9
        }
      },
      "46": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "47": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 80
        }
      },
      "48": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "49": {
        start: {
          line: 175,
          column: 0
        },
        end: {
          line: 201,
          column: 3
        }
      },
      "50": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 200,
          column: 5
        }
      },
      "51": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "52": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "53": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 72
        }
      },
      "54": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "55": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 202,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 17,
            column: 27
          }
        },
        loc: {
          start: {
            line: 17,
            column: 46
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 29
          },
          end: {
            line: 36,
            column: 30
          }
        },
        loc: {
          start: {
            line: 36,
            column: 49
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 25
          },
          end: {
            line: 59,
            column: 26
          }
        },
        loc: {
          start: {
            line: 59,
            column: 45
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 70,
            column: 53
          },
          end: {
            line: 70,
            column: 54
          }
        },
        loc: {
          start: {
            line: 70,
            column: 58
          },
          end: {
            line: 70,
            column: 83
          }
        },
        line: 70
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 49
          },
          end: {
            line: 71,
            column: 50
          }
        },
        loc: {
          start: {
            line: 71,
            column: 54
          },
          end: {
            line: 71,
            column: 75
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 72,
            column: 51
          },
          end: {
            line: 72,
            column: 52
          }
        },
        loc: {
          start: {
            line: 72,
            column: 56
          },
          end: {
            line: 72,
            column: 79
          }
        },
        line: 72
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 73,
            column: 48
          },
          end: {
            line: 73,
            column: 49
          }
        },
        loc: {
          start: {
            line: 73,
            column: 53
          },
          end: {
            line: 73,
            column: 73
          }
        },
        line: 73
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 109,
            column: 31
          },
          end: {
            line: 109,
            column: 32
          }
        },
        loc: {
          start: {
            line: 109,
            column: 51
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 109
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 175,
            column: 24
          }
        },
        loc: {
          start: {
            line: 175,
            column: 43
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 175
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 32
          },
          end: {
            line: 69,
            column: 60
          }
        }, {
          start: {
            line: 69,
            column: 64
          },
          end: {
            line: 69,
            column: 66
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 92,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 92,
            column: 57
          }
        }, {
          start: {
            line: 92,
            column: 61
          },
          end: {
            line: 92,
            column: 63
          }
        }],
        line: 92
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a0dca3ac31def30bcd453ec0167378bd3ab026d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2k1mtstuly = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2k1mtstuly();
cov_2k1mtstuly().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2k1mtstuly().s[1]++, require("express"));
const SecurityAuditService_1 =
/* istanbul ignore next */
(cov_2k1mtstuly().s[2]++, require("@/services/SecurityAuditService"));
const auth_1 =
/* istanbul ignore next */
(cov_2k1mtstuly().s[3]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_2k1mtstuly().s[4]++, require("@/middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_2k1mtstuly().s[5]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_2k1mtstuly().s[6]++, (0, express_1.Router)());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_2k1mtstuly().s[7]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_2k1mtstuly().s[8]++;
router.use(security_1.socialLimiter);
/**
 * Security Routes
 * Provides security audit and monitoring endpoints
 */
// Run security audit (Admin only)
/* istanbul ignore next */
cov_2k1mtstuly().s[9]++;
router.post('/audit/run', async (req, res) => {
  /* istanbul ignore next */
  cov_2k1mtstuly().f[0]++;
  cov_2k1mtstuly().s[10]++;
  try {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[11]++;
    logger_1.logger.info('Security audit requested by admin:', req.user?.email);
    const auditResults =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[12]++, await SecurityAuditService_1.SecurityAuditService.runSecurityAudit());
    /* istanbul ignore next */
    cov_2k1mtstuly().s[13]++;
    return res.json({
      success: true,
      message: 'Security audit completed successfully',
      data: auditResults
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[14]++;
    logger_1.logger.error('Security audit failed:', error);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[15]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to run security audit'
    });
  }
});
// Get latest security audit results (Admin only)
/* istanbul ignore next */
cov_2k1mtstuly().s[16]++;
router.get('/audit/results', async (req, res) => {
  /* istanbul ignore next */
  cov_2k1mtstuly().f[1]++;
  cov_2k1mtstuly().s[17]++;
  try {
    const auditResults =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[18]++, await SecurityAuditService_1.SecurityAuditService.getLatestAuditResults());
    /* istanbul ignore next */
    cov_2k1mtstuly().s[19]++;
    if (!auditResults) {
      /* istanbul ignore next */
      cov_2k1mtstuly().b[0][0]++;
      cov_2k1mtstuly().s[20]++;
      return res.status(404).json({
        success: false,
        error: 'No security audit results found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2k1mtstuly().b[0][1]++;
    }
    cov_2k1mtstuly().s[21]++;
    return res.json({
      success: true,
      data: auditResults
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[22]++;
    logger_1.logger.error('Failed to get audit results:', error);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[23]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to retrieve security audit results'
    });
  }
});
// Get security dashboard data (Admin only)
/* istanbul ignore next */
cov_2k1mtstuly().s[24]++;
router.get('/dashboard', async (req, res) => {
  /* istanbul ignore next */
  cov_2k1mtstuly().f[2]++;
  cov_2k1mtstuly().s[25]++;
  try {
    const auditResults =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[26]++, await SecurityAuditService_1.SecurityAuditService.getLatestAuditResults());
    /* istanbul ignore next */
    cov_2k1mtstuly().s[27]++;
    if (!auditResults) {
      /* istanbul ignore next */
      cov_2k1mtstuly().b[1][0]++;
      cov_2k1mtstuly().s[28]++;
      return res.status(404).json({
        success: false,
        error: 'No security audit data available'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2k1mtstuly().b[1][1]++;
    }
    // Calculate vulnerability counts by severity
    const vulnerabilities =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[29]++,
    /* istanbul ignore next */
    (cov_2k1mtstuly().b[2][0]++, auditResults.vulnerabilities) ||
    /* istanbul ignore next */
    (cov_2k1mtstuly().b[2][1]++, []));
    const criticalVulns =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[30]++, vulnerabilities.filter(v => {
      /* istanbul ignore next */
      cov_2k1mtstuly().f[3]++;
      cov_2k1mtstuly().s[31]++;
      return v.severity === 'critical';
    }).length);
    const highVulns =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[32]++, vulnerabilities.filter(v => {
      /* istanbul ignore next */
      cov_2k1mtstuly().f[4]++;
      cov_2k1mtstuly().s[33]++;
      return v.severity === 'high';
    }).length);
    const mediumVulns =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[34]++, vulnerabilities.filter(v => {
      /* istanbul ignore next */
      cov_2k1mtstuly().f[5]++;
      cov_2k1mtstuly().s[35]++;
      return v.severity === 'medium';
    }).length);
    const lowVulns =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[36]++, vulnerabilities.filter(v => {
      /* istanbul ignore next */
      cov_2k1mtstuly().f[6]++;
      cov_2k1mtstuly().s[37]++;
      return v.severity === 'low';
    }).length);
    // Generate security trends (mock data for now)
    const securityTrends =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[38]++, [{
      date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
      score: 85,
      vulnerabilities: 8
    }, {
      date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(),
      score: 82,
      vulnerabilities: 10
    }, {
      date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      score: 80,
      vulnerabilities: 12
    }, {
      date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
      score: 78,
      vulnerabilities: 14
    }, {
      date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
      score: 75,
      vulnerabilities: 16
    }, {
      date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
      score: 72,
      vulnerabilities: 18
    }, {
      date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
      score: 70,
      vulnerabilities: 20
    }, {
      date: auditResults.timestamp,
      score: auditResults.score,
      vulnerabilities: vulnerabilities.length
    }]);
    const dashboardData =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[39]++, {
      overallScore: auditResults.score,
      criticalVulnerabilities: criticalVulns,
      highVulnerabilities: highVulns,
      mediumVulnerabilities: mediumVulns,
      lowVulnerabilities: lowVulns,
      lastAuditDate: auditResults.timestamp,
      recommendations:
      /* istanbul ignore next */
      (cov_2k1mtstuly().b[3][0]++, auditResults.recommendations) ||
      /* istanbul ignore next */
      (cov_2k1mtstuly().b[3][1]++, []),
      securityTrends
    });
    /* istanbul ignore next */
    cov_2k1mtstuly().s[40]++;
    return res.json({
      success: true,
      data: dashboardData
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[41]++;
    logger_1.logger.error('Failed to get security dashboard:', error);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[42]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to retrieve security dashboard data'
    });
  }
});
// Get security recommendations (Admin only)
/* istanbul ignore next */
cov_2k1mtstuly().s[43]++;
router.get('/recommendations', async (req, res) => {
  /* istanbul ignore next */
  cov_2k1mtstuly().f[7]++;
  cov_2k1mtstuly().s[44]++;
  try {
    const recommendations =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[45]++, [{
      category: 'Authentication',
      priority: 'High',
      title: 'Enable Multi-Factor Authentication',
      description: 'Implement MFA for all admin accounts to prevent unauthorized access',
      action: 'Configure TOTP-based MFA for admin users',
      estimatedTime: '2-4 hours'
    }, {
      category: 'Dependencies',
      priority: 'Medium',
      title: 'Update Vulnerable Dependencies',
      description: 'Update packages with known security vulnerabilities',
      action: 'Run npm audit fix and update packages manually',
      estimatedTime: '1-2 hours'
    }, {
      category: 'Configuration',
      priority: 'High',
      title: 'Strengthen JWT Configuration',
      description: 'Use stronger JWT secrets and implement proper token rotation',
      action: 'Generate new JWT secret and implement token refresh',
      estimatedTime: '1 hour'
    }, {
      category: 'Monitoring',
      priority: 'Medium',
      title: 'Implement Security Monitoring',
      description: 'Set up real-time security monitoring and alerting',
      action: 'Configure security event logging and alerting system',
      estimatedTime: '4-6 hours'
    }, {
      category: 'Network',
      priority: 'High',
      title: 'Enable HTTPS Everywhere',
      description: 'Ensure all communications are encrypted with HTTPS',
      action: 'Configure SSL/TLS certificates and redirect HTTP to HTTPS',
      estimatedTime: '2-3 hours'
    }, {
      category: 'Data Protection',
      priority: 'High',
      title: 'Implement Data Encryption',
      description: 'Encrypt sensitive data at rest and in transit',
      action: 'Configure database encryption and implement field-level encryption',
      estimatedTime: '6-8 hours'
    }]);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[46]++;
    return res.json({
      success: true,
      data: recommendations
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[47]++;
    logger_1.logger.error('Failed to get security recommendations:', error);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[48]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to retrieve security recommendations'
    });
  }
});
// Get security metrics (Admin only)
/* istanbul ignore next */
cov_2k1mtstuly().s[49]++;
router.get('/metrics', async (req, res) => {
  /* istanbul ignore next */
  cov_2k1mtstuly().f[8]++;
  cov_2k1mtstuly().s[50]++;
  try {
    // This would typically fetch from a security metrics database
    // For now, we'll return mock data
    const metrics =
    /* istanbul ignore next */
    (cov_2k1mtstuly().s[51]++, {
      totalUsers: 1250,
      usersWithMFA: 89,
      adminUsers: 5,
      adminUsersWithMFA: 3,
      failedLoginAttempts: 23,
      securityEvents: 156,
      lastSecurityAudit: new Date().toISOString(),
      securityScore: 78
    });
    /* istanbul ignore next */
    cov_2k1mtstuly().s[52]++;
    return res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2k1mtstuly().s[53]++;
    logger_1.logger.error('Failed to get security metrics:', error);
    /* istanbul ignore next */
    cov_2k1mtstuly().s[54]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to retrieve security metrics'
    });
  }
});
/* istanbul ignore next */
cov_2k1mtstuly().s[55]++;
exports.default = router;