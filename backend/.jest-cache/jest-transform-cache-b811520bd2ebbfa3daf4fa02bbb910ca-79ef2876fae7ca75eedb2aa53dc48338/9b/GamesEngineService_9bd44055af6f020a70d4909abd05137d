2025031299c70ae19b143ab0df890526
"use strict";

/* istanbul ignore next */
function cov_2jmnw7d9ls() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\GamesEngineService.ts";
  var hash = "ef6e44440838ef7e9e0b54658c0476e9806df135";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\GamesEngineService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "6": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 79
        }
      },
      "7": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "8": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "10": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "11": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 52
        }
      },
      "12": {
        start: {
          line: 33,
          column: 22
        },
        end: {
          line: 33,
          column: 61
        }
      },
      "13": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "14": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 60
        }
      },
      "15": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 68
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "17": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "18": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "19": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 48
        }
      },
      "20": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 24
        }
      },
      "21": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 81
        }
      },
      "22": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 47,
          column: 62
        }
      },
      "23": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 21
        }
      },
      "25": {
        start: {
          line: 67,
          column: 22
        },
        end: {
          line: 67,
          column: 70
        }
      },
      "26": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "27": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "28": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "29": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "30": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 33
        }
      },
      "31": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 27
        }
      },
      "32": {
        start: {
          line: 77,
          column: 22
        },
        end: {
          line: 77,
          column: 37
        }
      },
      "33": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 78,
          column: 42
        }
      },
      "34": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 35
        }
      },
      "35": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 82,
          column: 48
        }
      },
      "36": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 83,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 62
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 56
          }
        }, {
          start: {
            line: 18,
            column: 60
          },
          end: {
            line: 18,
            column: 78
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 38,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 69,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 69,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 71,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef6e44440838ef7e9e0b54658c0476e9806df135"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jmnw7d9ls = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jmnw7d9ls();
var __importDefault =
/* istanbul ignore next */
(cov_2jmnw7d9ls().s[0]++,
/* istanbul ignore next */
(cov_2jmnw7d9ls().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2jmnw7d9ls().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2jmnw7d9ls().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2jmnw7d9ls().f[0]++;
  cov_2jmnw7d9ls().s[1]++;
  return /* istanbul ignore next */(cov_2jmnw7d9ls().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2jmnw7d9ls().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2jmnw7d9ls().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2jmnw7d9ls().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2jmnw7d9ls().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2jmnw7d9ls().s[3]++;
exports.gamesEngineService = exports.GamesEngineService = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_2jmnw7d9ls().s[4]++, __importDefault(require("crypto")));
const GameRound_1 =
/* istanbul ignore next */
(cov_2jmnw7d9ls().s[5]++, require("@/models/GameRound"));
/**
 * GamesEngineService
 * - Generates global deterministic outcomes per time-bucketed round
 * - Targets long-run user win ratio ~60% and house 40% by biasing round outcomes
 */
class GamesEngineService {
  static instance;
  secretKey;
  constructor() {
    /* istanbul ignore next */
    cov_2jmnw7d9ls().f[1]++;
    cov_2jmnw7d9ls().s[6]++;
    this.secretKey =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().b[3][0]++, process.env.GAMES_ENGINE_SECRET) ||
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().b[3][1]++, 'dev-games-secret');
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2jmnw7d9ls().f[2]++;
    cov_2jmnw7d9ls().s[7]++;
    if (!GamesEngineService.instance) {
      /* istanbul ignore next */
      cov_2jmnw7d9ls().b[4][0]++;
      cov_2jmnw7d9ls().s[8]++;
      GamesEngineService.instance = new GamesEngineService();
    } else
    /* istanbul ignore next */
    {
      cov_2jmnw7d9ls().b[4][1]++;
    }
    cov_2jmnw7d9ls().s[9]++;
    return GamesEngineService.instance;
  }
  /**
   * Get the current global round for a game, creating it if needed.
   * All users see the same round and same settled outcome.
   */
  async getOrCreateRound(gameId, durationSec, optionsCount) {
    /* istanbul ignore next */
    cov_2jmnw7d9ls().f[3]++;
    const now =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[10]++, Math.floor(Date.now() / 1000));
    const bucket =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[11]++, Math.floor(now / durationSec));
    const start =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[12]++, new Date(bucket * durationSec * 1000));
    const end =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[13]++, new Date((bucket + 1) * durationSec * 1000));
    const roundId =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[14]++, `${gameId}-${durationSec}-${bucket}`);
    let round =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[15]++, await GameRound_1.GameRound.findOne({
      roundId
    }));
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[16]++;
    if (round) {
      /* istanbul ignore next */
      cov_2jmnw7d9ls().b[5][0]++;
      cov_2jmnw7d9ls().s[17]++;
      return round;
    } else
    /* istanbul ignore next */
    {
      cov_2jmnw7d9ls().b[5][1]++;
    }
    // Create a provably-fair seed and precompute outcome index
    const seed =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[18]++, crypto_1.default.createHmac('sha256', this.secretKey).update(roundId).digest('hex'));
    // Bias outcome slightly toward user-favorable (to achieve ~60% long-run user win rate)
    const randomNum =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[19]++, this.hashToFloat(seed));
    const bias =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[20]++, 0.1); // small bias for users
    const biased =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[21]++, Math.min(0.999999, Math.max(0, randomNum + (bias - 0.05))));
    const outcomeIndex =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[22]++, Math.floor(biased * optionsCount));
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[23]++;
    round = await GameRound_1.GameRound.create({
      gameId,
      roundId,
      startAt: start,
      endAt: end,
      durationSec,
      seedHash: seed,
      outcomeIndex: Math.min(optionsCount - 1, Math.max(0, outcomeIndex)),
      optionsCount,
      totalStake: 0,
      payoutPool: 0,
      status: 'open'
    });
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[24]++;
    return round;
  }
  /**
   * Close and settle a round; called when endAt has passed.
   */
  async settleRound(roundId) {
    /* istanbul ignore next */
    cov_2jmnw7d9ls().f[4]++;
    const round =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[25]++, await GameRound_1.GameRound.findOne({
      roundId
    }));
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[26]++;
    if (!round) {
      /* istanbul ignore next */
      cov_2jmnw7d9ls().b[6][0]++;
      cov_2jmnw7d9ls().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2jmnw7d9ls().b[6][1]++;
    }
    cov_2jmnw7d9ls().s[28]++;
    if (round.status !== 'open') {
      /* istanbul ignore next */
      cov_2jmnw7d9ls().b[7][0]++;
      cov_2jmnw7d9ls().s[29]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2jmnw7d9ls().b[7][1]++;
    }
    cov_2jmnw7d9ls().s[30]++;
    round.status = 'settled';
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[31]++;
    await round.save();
  }
  hashToFloat(hex) {
    /* istanbul ignore next */
    cov_2jmnw7d9ls().f[5]++;
    // Take first 8 bytes to uint32 and normalize
    const slice =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[32]++, hex.slice(0, 8));
    const intVal =
    /* istanbul ignore next */
    (cov_2jmnw7d9ls().s[33]++, parseInt(slice, 16));
    /* istanbul ignore next */
    cov_2jmnw7d9ls().s[34]++;
    return intVal / 0xffffffff;
  }
}
/* istanbul ignore next */
cov_2jmnw7d9ls().s[35]++;
exports.GamesEngineService = GamesEngineService;
/* istanbul ignore next */
cov_2jmnw7d9ls().s[36]++;
exports.gamesEngineService = GamesEngineService.getInstance();