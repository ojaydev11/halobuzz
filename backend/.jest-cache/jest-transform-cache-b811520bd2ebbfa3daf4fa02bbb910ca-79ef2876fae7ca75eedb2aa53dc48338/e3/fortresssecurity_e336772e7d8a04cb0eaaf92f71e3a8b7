dd9c71c8168e5091adbdf22ff7da6ec3
"use strict";

/* istanbul ignore next */
function cov_2c0ys58pih() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\fortress-security.ts";
  var hash = "0d8e94d2d730b733f68280b0e3a9c3407147a74c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\fortress-security.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 33
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "10": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 14,
          column: 96
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 74
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 11
        }
      },
      "14": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "15": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "16": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 98
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 72
        }
      },
      "19": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "20": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "21": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "22": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 48,
          column: 96
        }
      },
      "23": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "24": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 74
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "26": {
        start: {
          line: 63,
          column: 0
        },
        end: {
          line: 79,
          column: 3
        }
      },
      "27": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "28": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 65,
          column: 38
        }
      },
      "29": {
        start: {
          line: 66,
          column: 31
        },
        end: {
          line: 66,
          column: 111
        }
      },
      "30": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "31": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 71
        }
      },
      "32": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "33": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "34": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "35": {
        start: {
          line: 83,
          column: 58
        },
        end: {
          line: 83,
          column: 66
        }
      },
      "36": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "37": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 85,
          column: 144
        }
      },
      "38": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "39": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 75
        }
      },
      "40": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "41": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "42": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "43": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 90
        }
      },
      "44": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 11
        }
      },
      "45": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 71
        }
      },
      "46": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "47": {
        start: {
          line: 117,
          column: 0
        },
        end: {
          line: 133,
          column: 3
        }
      },
      "48": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "49": {
        start: {
          line: 119,
          column: 23
        },
        end: {
          line: 119,
          column: 31
        }
      },
      "50": {
        start: {
          line: 120,
          column: 23
        },
        end: {
          line: 120,
          column: 99
        }
      },
      "51": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "52": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 72
        }
      },
      "53": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "54": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 150,
          column: 3
        }
      },
      "55": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "56": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 90
        }
      },
      "57": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "58": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 67
        }
      },
      "59": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "60": {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 168,
          column: 3
        }
      },
      "61": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "62": {
        start: {
          line: 154,
          column: 41
        },
        end: {
          line: 154,
          column: 49
        }
      },
      "63": {
        start: {
          line: 155,
          column: 23
        },
        end: {
          line: 155,
          column: 100
        }
      },
      "64": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "65": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 59
        }
      },
      "66": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "67": {
        start: {
          line: 170,
          column: 0
        },
        end: {
          line: 185,
          column: 3
        }
      },
      "68": {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "69": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 172,
          column: 92
        }
      },
      "70": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "71": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 72
        }
      },
      "72": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "73": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 186,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 48
          },
          end: {
            line: 12,
            column: 49
          }
        },
        loc: {
          start: {
            line: 12,
            column: 68
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 46
          },
          end: {
            line: 29,
            column: 47
          }
        },
        loc: {
          start: {
            line: 29,
            column: 66
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 48
          },
          end: {
            line: 46,
            column: 49
          }
        },
        loc: {
          start: {
            line: 46,
            column: 68
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 63,
            column: 45
          }
        },
        loc: {
          start: {
            line: 63,
            column: 64
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 81,
            column: 48
          },
          end: {
            line: 81,
            column: 49
          }
        },
        loc: {
          start: {
            line: 81,
            column: 68
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 81
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 45
          },
          end: {
            line: 100,
            column: 46
          }
        },
        loc: {
          start: {
            line: 100,
            column: 65
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 117,
            column: 46
          },
          end: {
            line: 117,
            column: 47
          }
        },
        loc: {
          start: {
            line: 117,
            column: 66
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 117
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 135,
            column: 50
          },
          end: {
            line: 135,
            column: 51
          }
        },
        loc: {
          start: {
            line: 135,
            column: 70
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 135
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 152,
            column: 48
          },
          end: {
            line: 152,
            column: 49
          }
        },
        loc: {
          start: {
            line: 152,
            column: 68
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 152
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 46
          },
          end: {
            line: 170,
            column: 47
          }
        },
        loc: {
          start: {
            line: 170,
            column: 66
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 170
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d8e94d2d730b733f68280b0e3a9c3407147a74c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2c0ys58pih = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c0ys58pih();
var __importDefault =
/* istanbul ignore next */
(cov_2c0ys58pih().s[0]++,
/* istanbul ignore next */
(cov_2c0ys58pih().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2c0ys58pih().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2c0ys58pih().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[0]++;
  cov_2c0ys58pih().s[1]++;
  return /* istanbul ignore next */(cov_2c0ys58pih().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2c0ys58pih().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2c0ys58pih().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2c0ys58pih().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2c0ys58pih().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2c0ys58pih().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_2c0ys58pih().s[4]++, require("../middleware/auth"));
const FortressSecuritySystem_1 =
/* istanbul ignore next */
(cov_2c0ys58pih().s[5]++, require("../services/FortressSecuritySystem"));
const logger_1 =
/* istanbul ignore next */
(cov_2c0ys58pih().s[6]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_2c0ys58pih().s[7]++, express_1.default.Router());
// Get security dashboard
/* istanbul ignore next */
cov_2c0ys58pih().s[8]++;
router.get('/dashboard', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[1]++;
  cov_2c0ys58pih().s[9]++;
  try {
    const dashboard =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[10]++, await FortressSecuritySystem_1.fortressSecurity.getSecurityDashboard());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[11]++;
    res.json({
      success: true,
      data: dashboard
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[12]++;
    logger_1.logger.error('Error getting security dashboard:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[13]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get security dashboard'
    });
  }
});
// Get threat detection status
/* istanbul ignore next */
cov_2c0ys58pih().s[14]++;
router.get('/threats', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[2]++;
  cov_2c0ys58pih().s[15]++;
  try {
    const threats =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[16]++, await FortressSecuritySystem_1.fortressSecurity.getThreatDetectionStatus());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[17]++;
    res.json({
      success: true,
      data: threats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[18]++;
    logger_1.logger.error('Error getting threat detection:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[19]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get threat detection'
    });
  }
});
// Get security analytics
/* istanbul ignore next */
cov_2c0ys58pih().s[20]++;
router.get('/analytics', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[3]++;
  cov_2c0ys58pih().s[21]++;
  try {
    const analytics =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[22]++, await FortressSecuritySystem_1.fortressSecurity.getSecurityAnalytics());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[23]++;
    res.json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[24]++;
    logger_1.logger.error('Error getting security analytics:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[25]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get analytics'
    });
  }
});
// Get fraud detection results
/* istanbul ignore next */
cov_2c0ys58pih().s[26]++;
router.get('/fraud', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[4]++;
  cov_2c0ys58pih().s[27]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[28]++, req.user.userId);
    const fraudDetection =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[29]++, await FortressSecuritySystem_1.fortressSecurity.getFraudDetectionResults(userId));
    /* istanbul ignore next */
    cov_2c0ys58pih().s[30]++;
    res.json({
      success: true,
      data: fraudDetection
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[31]++;
    logger_1.logger.error('Error getting fraud detection:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[32]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get fraud detection'
    });
  }
});
// Report security incident
/* istanbul ignore next */
cov_2c0ys58pih().s[33]++;
router.post('/incident', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[5]++;
  cov_2c0ys58pih().s[34]++;
  try {
    const {
      type,
      description,
      severity,
      metadata
    } =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[35]++, req.body);
    const reporterId =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[36]++, req.user.userId);
    const result =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[37]++, await FortressSecuritySystem_1.fortressSecurity.reportSecurityIncident(type, description, severity, reporterId, metadata));
    /* istanbul ignore next */
    cov_2c0ys58pih().s[38]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[39]++;
    logger_1.logger.error('Error reporting security incident:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[40]++;
    res.status(500).json({
      success: false,
      error: 'Failed to report incident'
    });
  }
});
// Get security alerts
/* istanbul ignore next */
cov_2c0ys58pih().s[41]++;
router.get('/alerts', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[6]++;
  cov_2c0ys58pih().s[42]++;
  try {
    const alerts =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[43]++, await FortressSecuritySystem_1.fortressSecurity.getSecurityAlerts());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[44]++;
    res.json({
      success: true,
      data: alerts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[45]++;
    logger_1.logger.error('Error getting security alerts:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[46]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get alerts'
    });
  }
});
// Update security configuration
/* istanbul ignore next */
cov_2c0ys58pih().s[47]++;
router.post('/config', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[7]++;
  cov_2c0ys58pih().s[48]++;
  try {
    const config =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[49]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[50]++, await FortressSecuritySystem_1.fortressSecurity.updateSecurityConfig(config));
    /* istanbul ignore next */
    cov_2c0ys58pih().s[51]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[52]++;
    logger_1.logger.error('Error updating security config:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[53]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update config'
    });
  }
});
// Get blocked IPs
/* istanbul ignore next */
cov_2c0ys58pih().s[54]++;
router.get('/blocked-ips', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[8]++;
  cov_2c0ys58pih().s[55]++;
  try {
    const blockedIPs =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[56]++, await FortressSecuritySystem_1.fortressSecurity.getBlockedIPs());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[57]++;
    res.json({
      success: true,
      data: blockedIPs
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[58]++;
    logger_1.logger.error('Error getting blocked IPs:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[59]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get blocked IPs'
    });
  }
});
// Block IP address
/* istanbul ignore next */
cov_2c0ys58pih().s[60]++;
router.post('/block-ip', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[9]++;
  cov_2c0ys58pih().s[61]++;
  try {
    const {
      ip,
      reason,
      duration
    } =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[62]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[63]++, await FortressSecuritySystem_1.fortressSecurity.blockIP(ip, reason, duration));
    /* istanbul ignore next */
    cov_2c0ys58pih().s[64]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[65]++;
    logger_1.logger.error('Error blocking IP:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[66]++;
    res.status(500).json({
      success: false,
      error: 'Failed to block IP'
    });
  }
});
// Get security metrics
/* istanbul ignore next */
cov_2c0ys58pih().s[67]++;
router.get('/metrics', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_2c0ys58pih().f[10]++;
  cov_2c0ys58pih().s[68]++;
  try {
    const metrics =
    /* istanbul ignore next */
    (cov_2c0ys58pih().s[69]++, await FortressSecuritySystem_1.fortressSecurity.getSecurityMetrics());
    /* istanbul ignore next */
    cov_2c0ys58pih().s[70]++;
    res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2c0ys58pih().s[71]++;
    logger_1.logger.error('Error getting security metrics:', error);
    /* istanbul ignore next */
    cov_2c0ys58pih().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get metrics'
    });
  }
});
/* istanbul ignore next */
cov_2c0ys58pih().s[73]++;
exports.default = router;