31bdfef57360dc9e2824a421dd158fe5
"use strict";

/* istanbul ignore next */
function cov_17a2v6hcgk() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\advanced-games.ts";
  var hash = "52627b8f14de2e3bd9610ce239f6c358050f06b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\advanced-games.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 74
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 75
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "9": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "10": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "11": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "12": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "13": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 35,
          column: 85
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "15": {
        start: {
          line: 38,
          column: 38
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 76
        }
      },
      "17": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "18": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "19": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "20": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 70,
          column: 39
        }
      },
      "21": {
        start: {
          line: 71,
          column: 22
        },
        end: {
          line: 71,
          column: 85
        }
      },
      "22": {
        start: {
          line: 72,
          column: 21
        },
        end: {
          line: 72,
          column: 57
        }
      },
      "23": {
        start: {
          line: 72,
          column: 37
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "26": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "27": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 69
        }
      },
      "28": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "29": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 181,
          column: 3
        }
      },
      "30": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "31": {
        start: {
          line: 111,
          column: 29
        },
        end: {
          line: 111,
          column: 39
        }
      },
      "32": {
        start: {
          line: 112,
          column: 26
        },
        end: {
          line: 112,
          column: 34
        }
      },
      "33": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 35
        }
      },
      "34": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "35": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 118,
          column: 15
        }
      },
      "36": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "37": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "38": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "39": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 85
        }
      },
      "40": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 57
        }
      },
      "41": {
        start: {
          line: 136,
          column: 37
        },
        end: {
          line: 136,
          column: 56
        }
      },
      "42": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "43": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "44": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "45": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "46": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 98
        }
      },
      "47": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "48": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "49": {
        start: {
          line: 159,
          column: 72
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "50": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 60
        }
      },
      "51": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "52": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 226,
          column: 3
        }
      },
      "53": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "54": {
        start: {
          line: 188,
          column: 30
        },
        end: {
          line: 188,
          column: 40
        }
      },
      "55": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 89
        }
      },
      "56": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "57": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "58": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      },
      "59": {
        start: {
          line: 202,
          column: 72
        },
        end: {
          line: 209,
          column: 17
        }
      },
      "60": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 64
        }
      },
      "61": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "62": {
        start: {
          line: 231,
          column: 0
        },
        end: {
          line: 261,
          column: 3
        }
      },
      "63": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "64": {
        start: {
          line: 233,
          column: 30
        },
        end: {
          line: 233,
          column: 40
        }
      },
      "65": {
        start: {
          line: 234,
          column: 27
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "66": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 35
        }
      },
      "67": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "68": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 15
        }
      },
      "69": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "70": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "71": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 104
        }
      },
      "72": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "73": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 65
        }
      },
      "74": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 259,
          column: 11
        }
      },
      "75": {
        start: {
          line: 266,
          column: 0
        },
        end: {
          line: 293,
          column: 3
        }
      },
      "76": {
        start: {
          line: 267,
          column: 4
        },
        end: {
          line: 292,
          column: 5
        }
      },
      "77": {
        start: {
          line: 268,
          column: 29
        },
        end: {
          line: 268,
          column: 39
        }
      },
      "78": {
        start: {
          line: 269,
          column: 47
        },
        end: {
          line: 269,
          column: 56
        }
      },
      "79": {
        start: {
          line: 271,
          column: 32
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "80": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 284,
          column: 11
        }
      },
      "81": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "82": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 291,
          column: 11
        }
      },
      "83": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 348,
          column: 3
        }
      },
      "84": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 347,
          column: 5
        }
      },
      "85": {
        start: {
          line: 301,
          column: 36
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "86": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 339,
          column: 11
        }
      },
      "87": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 68
        }
      },
      "88": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 346,
          column: 11
        }
      },
      "89": {
        start: {
          line: 353,
          column: 0
        },
        end: {
          line: 378,
          column: 3
        }
      },
      "90": {
        start: {
          line: 354,
          column: 4
        },
        end: {
          line: 377,
          column: 5
        }
      },
      "91": {
        start: {
          line: 355,
          column: 33
        },
        end: {
          line: 355,
          column: 43
        }
      },
      "92": {
        start: {
          line: 356,
          column: 23
        },
        end: {
          line: 356,
          column: 35
        }
      },
      "93": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "94": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 361,
          column: 15
        }
      },
      "95": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 89
        }
      },
      "96": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 369,
          column: 11
        }
      },
      "97": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 74
        }
      },
      "98": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 376,
          column: 11
        }
      },
      "99": {
        start: {
          line: 383,
          column: 0
        },
        end: {
          line: 408,
          column: 3
        }
      },
      "100": {
        start: {
          line: 384,
          column: 4
        },
        end: {
          line: 407,
          column: 5
        }
      },
      "101": {
        start: {
          line: 385,
          column: 30
        },
        end: {
          line: 385,
          column: 40
        }
      },
      "102": {
        start: {
          line: 386,
          column: 24
        },
        end: {
          line: 386,
          column: 89
        }
      },
      "103": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "104": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 391,
          column: 15
        }
      },
      "105": {
        start: {
          line: 394,
          column: 29
        },
        end: {
          line: 394,
          column: 54
        }
      },
      "106": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 399,
          column: 11
        }
      },
      "107": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 71
        }
      },
      "108": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 406,
          column: 11
        }
      },
      "109": {
        start: {
          line: 409,
          column: 0
        },
        end: {
          line: 409,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 33,
            column: 21
          }
        },
        loc: {
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 29
          },
          end: {
            line: 38,
            column: 30
          }
        },
        loc: {
          start: {
            line: 38,
            column: 38
          },
          end: {
            line: 53,
            column: 13
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 25
          },
          end: {
            line: 68,
            column: 26
          }
        },
        loc: {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 72,
            column: 33
          }
        },
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 56
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 109,
            column: 72
          },
          end: {
            line: 109,
            column: 73
          }
        },
        loc: {
          start: {
            line: 109,
            column: 92
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 109
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 136,
            column: 32
          },
          end: {
            line: 136,
            column: 33
          }
        },
        loc: {
          start: {
            line: 136,
            column: 37
          },
          end: {
            line: 136,
            column: 56
          }
        },
        line: 136
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 159,
            column: 66
          },
          end: {
            line: 159,
            column: 67
          }
        },
        loc: {
          start: {
            line: 159,
            column: 72
          },
          end: {
            line: 166,
            column: 17
          }
        },
        line: 159
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 186,
            column: 60
          },
          end: {
            line: 186,
            column: 61
          }
        },
        loc: {
          start: {
            line: 186,
            column: 80
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 186
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 202,
            column: 66
          },
          end: {
            line: 202,
            column: 67
          }
        },
        loc: {
          start: {
            line: 202,
            column: 72
          },
          end: {
            line: 209,
            column: 17
          }
        },
        line: 202
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 231,
            column: 81
          },
          end: {
            line: 231,
            column: 82
          }
        },
        loc: {
          start: {
            line: 231,
            column: 101
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 231
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 266,
            column: 37
          },
          end: {
            line: 266,
            column: 38
          }
        },
        loc: {
          start: {
            line: 266,
            column: 57
          },
          end: {
            line: 293,
            column: 1
          }
        },
        line: 266
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 298,
            column: 36
          },
          end: {
            line: 298,
            column: 37
          }
        },
        loc: {
          start: {
            line: 298,
            column: 56
          },
          end: {
            line: 348,
            column: 1
          }
        },
        line: 298
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 353,
            column: 77
          },
          end: {
            line: 353,
            column: 78
          }
        },
        loc: {
          start: {
            line: 353,
            column: 97
          },
          end: {
            line: 378,
            column: 1
          }
        },
        line: 353
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 383,
            column: 67
          },
          end: {
            line: 383,
            column: 68
          }
        },
        loc: {
          start: {
            line: 383,
            column: 87
          },
          end: {
            line: 408,
            column: 1
          }
        },
        line: 383
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "6": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 120,
            column: 18
          }
        }, {
          start: {
            line: 120,
            column: 22
          },
          end: {
            line: 120,
            column: 32
          }
        }],
        line: 120
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 22
          },
          end: {
            line: 129,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 22
          },
          end: {
            line: 129,
            column: 40
          }
        }, {
          start: {
            line: 129,
            column: 44
          },
          end: {
            line: 129,
            column: 52
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "9": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "10": {
        loc: {
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 19
          },
          end: {
            line: 178,
            column: 32
          }
        }, {
          start: {
            line: 178,
            column: 36
          },
          end: {
            line: 178,
            column: 57
          }
        }],
        line: 178
      },
      "11": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "12": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 241,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "13": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "14": {
        loc: {
          start: {
            line: 258,
            column: 19
          },
          end: {
            line: 258,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 19
          },
          end: {
            line: 258,
            column: 32
          }
        }, {
          start: {
            line: 258,
            column: 36
          },
          end: {
            line: 258,
            column: 62
          }
        }],
        line: 258
      },
      "15": {
        loc: {
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 269,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 269,
            column: 24
          },
          end: {
            line: 269,
            column: 26
          }
        }],
        line: 269
      },
      "16": {
        loc: {
          start: {
            line: 269,
            column: 28
          },
          end: {
            line: 269,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 269,
            column: 37
          },
          end: {
            line: 269,
            column: 42
          }
        }],
        line: 269
      },
      "17": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "18": {
        loc: {
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 8
          },
          end: {
            line: 392,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "52627b8f14de2e3bd9610ce239f6c358050f06b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17a2v6hcgk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17a2v6hcgk();
var __importDefault =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[0]++,
/* istanbul ignore next */
(cov_17a2v6hcgk().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_17a2v6hcgk().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_17a2v6hcgk().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[0]++;
  cov_17a2v6hcgk().s[1]++;
  return /* istanbul ignore next */(cov_17a2v6hcgk().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_17a2v6hcgk().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_17a2v6hcgk().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_17a2v6hcgk().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_17a2v6hcgk().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[3]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[4]++, require("../middleware/auth"));
const AdvancedGamesService_1 =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[5]++, require("../services/AdvancedGamesService"));
const logger_1 =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[6]++, require("../config/logger"));
const express_rate_limit_1 =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[7]++, __importDefault(require("express-rate-limit")));
const router =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[8]++, (0, express_1.Router)());
// Rate limiting for advanced games
const gameJoinLimit =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[9]++, (0, express_rate_limit_1.default)({
  windowMs: 60000,
  // 1 minute
  max: 5,
  // 5 game joins per minute
  message: {
    success: false,
    error: 'Too many game join attempts. Please wait before trying again.'
  }
}));
const actionLimit =
/* istanbul ignore next */
(cov_17a2v6hcgk().s[10]++, (0, express_rate_limit_1.default)({
  windowMs: 1000,
  // 1 second
  max: 10,
  // 10 actions per second
  message: {
    success: false,
    error: 'Action rate limit exceeded. Please slow down.'
  }
}));
/**
 * GET /advanced-games/list
 * Get all available advanced games
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[11]++;
router.get('/list', async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[1]++;
  cov_17a2v6hcgk().s[12]++;
  try {
    const games =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[13]++, AdvancedGamesService_1.advancedGamesService.getAvailableGames());
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[14]++;
    res.json({
      success: true,
      games: games.map(game => {
        /* istanbul ignore next */
        cov_17a2v6hcgk().f[2]++;
        cov_17a2v6hcgk().s[15]++;
        return {
          _id: game.id,
          name: game.name,
          code: game.code,
          description: `Advanced ${game.type.replace('-', ' ')} game with ${game.playerCapacity} players`,
          type: game.type,
          category: game.category,
          minStake: 10,
          // Base minimum
          maxStake: 10000,
          duration: game.duration / 1000,
          // Convert to seconds
          playerCount: game.playerCapacity,
          difficulty: game.difficulty,
          features: game.features,
          rewards: game.rewards,
          requirements: game.requirements
        };
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[16]++;
    logger_1.logger.error('Error fetching advanced games list:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[17]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch games list'
    });
  }
});
/**
 * GET /advanced-games/:gameCode
 * Get specific game details
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[18]++;
router.get('/:gameCode', async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[3]++;
  cov_17a2v6hcgk().s[19]++;
  try {
    const {
      gameCode
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[20]++, req.params);
    const games =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[21]++, AdvancedGamesService_1.advancedGamesService.getAvailableGames());
    const game =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[22]++, games.find(g => {
      /* istanbul ignore next */
      cov_17a2v6hcgk().f[4]++;
      cov_17a2v6hcgk().s[23]++;
      return g.code === gameCode;
    }));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[24]++;
    if (!game) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[3][0]++;
      cov_17a2v6hcgk().s[25]++;
      return res.status(404).json({
        success: false,
        error: 'Game not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[3][1]++;
    }
    cov_17a2v6hcgk().s[26]++;
    res.json({
      success: true,
      game: {
        _id: game.id,
        name: game.name,
        code: game.code,
        description: `Advanced ${game.type.replace('-', ' ')} game`,
        type: game.type,
        category: game.category,
        playerCapacity: game.playerCapacity,
        duration: game.duration,
        difficulty: game.difficulty,
        features: game.features,
        rewards: game.rewards,
        requirements: game.requirements
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[27]++;
    logger_1.logger.error('Error fetching game details:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[28]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch game details'
    });
  }
});
/**
 * POST /advanced-games/:gameCode/join
 * Join an advanced game session
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[29]++;
router.post('/:gameCode/join', auth_1.authenticateToken, gameJoinLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[5]++;
  cov_17a2v6hcgk().s[30]++;
  try {
    const {
      gameCode
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[31]++, req.params);
    const {
      stake
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[32]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[33]++, req.user?.id);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[34]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[4][0]++;
      cov_17a2v6hcgk().s[35]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[4][1]++;
    }
    cov_17a2v6hcgk().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_17a2v6hcgk().b[6][0]++, !stake) ||
    /* istanbul ignore next */
    (cov_17a2v6hcgk().b[6][1]++, stake < 10)) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[5][0]++;
      cov_17a2v6hcgk().s[37]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid stake amount'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[5][1]++;
    }
    // Mock user data (in production, fetch from database)
    const user =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[38]++, {
      id: userId,
      username:
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[7][0]++, req.user?.username) ||
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[7][1]++, 'Player'),
      level: 10,
      avatar: '🎮',
      stake: stake
    });
    // Check if user meets requirements (mock check)
    const games =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[39]++, AdvancedGamesService_1.advancedGamesService.getAvailableGames());
    const game =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[40]++, games.find(g => {
      /* istanbul ignore next */
      cov_17a2v6hcgk().f[6]++;
      cov_17a2v6hcgk().s[41]++;
      return g.code === gameCode;
    }));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[42]++;
    if (!game) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[8][0]++;
      cov_17a2v6hcgk().s[43]++;
      return res.status(404).json({
        success: false,
        error: 'Game not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[8][1]++;
    }
    // Mock requirements check
    cov_17a2v6hcgk().s[44]++;
    if (user.level < game.requirements.level) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[9][0]++;
      cov_17a2v6hcgk().s[45]++;
      return res.status(403).json({
        success: false,
        error: `Level ${game.requirements.level} required. You are level ${user.level}.`
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[9][1]++;
    }
    // Join the game
    const session =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[46]++, await AdvancedGamesService_1.advancedGamesService.joinGame(gameCode, user));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[47]++;
    logger_1.logger.info(`User ${userId} joined game ${gameCode} with stake ${stake}`);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[48]++;
    res.json({
      success: true,
      session: {
        sessionId: session.sessionId,
        gameId: session.gameId,
        status: session.status,
        players: Array.from(session.players.values()).map(p => {
          /* istanbul ignore next */
          cov_17a2v6hcgk().f[7]++;
          cov_17a2v6hcgk().s[49]++;
          return {
            id: p.id,
            username: p.username,
            level: p.level,
            score: p.score,
            rank: p.rank,
            status: p.status
          };
        }),
        timeRemaining: session.timeRemaining,
        currentRound: session.currentRound,
        totalRounds: session.totalRounds,
        totalPot: session.totalPot
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[50]++;
    logger_1.logger.error('Error joining game:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[51]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[10][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[10][1]++, 'Failed to join game')
    });
  }
});
/**
 * GET /advanced-games/session/:sessionId
 * Get game session status
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[52]++;
router.get('/session/:sessionId', auth_1.authenticateToken, async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[8]++;
  cov_17a2v6hcgk().s[53]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[54]++, req.params);
    const session =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[55]++, AdvancedGamesService_1.advancedGamesService.getSession(sessionId));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[56]++;
    if (!session) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[11][0]++;
      cov_17a2v6hcgk().s[57]++;
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[11][1]++;
    }
    cov_17a2v6hcgk().s[58]++;
    res.json({
      success: true,
      session: {
        sessionId: session.sessionId,
        gameId: session.gameId,
        status: session.status,
        players: Array.from(session.players.values()).map(p => {
          /* istanbul ignore next */
          cov_17a2v6hcgk().f[9]++;
          cov_17a2v6hcgk().s[59]++;
          return {
            id: p.id,
            username: p.username,
            level: p.level,
            score: p.score,
            rank: p.rank,
            status: p.status
          };
        }),
        timeRemaining: session.timeRemaining,
        currentRound: session.currentRound,
        totalRounds: session.totalRounds,
        totalPot: session.totalPot,
        startTime: session.startTime,
        endTime: session.endTime
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[60]++;
    logger_1.logger.error('Error fetching session:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[61]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch session'
    });
  }
});
/**
 * POST /advanced-games/session/:sessionId/action
 * Perform action in game session
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[62]++;
router.post('/session/:sessionId/action', auth_1.authenticateToken, actionLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[10]++;
  cov_17a2v6hcgk().s[63]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[64]++, req.params);
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[65]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[66]++, req.user?.id);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[67]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[12][0]++;
      cov_17a2v6hcgk().s[68]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[12][1]++;
    }
    cov_17a2v6hcgk().s[69]++;
    if (!action) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[13][0]++;
      cov_17a2v6hcgk().s[70]++;
      return res.status(400).json({
        success: false,
        error: 'Action required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[13][1]++;
    }
    cov_17a2v6hcgk().s[71]++;
    await AdvancedGamesService_1.advancedGamesService.handlePlayerAction(sessionId, userId, action);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[72]++;
    res.json({
      success: true,
      message: 'Action processed successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[73]++;
    logger_1.logger.error('Error processing action:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[74]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[14][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[14][1]++, 'Failed to process action')
    });
  }
});
/**
 * GET /advanced-games/:gameCode/leaderboard
 * Get game leaderboard
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[75]++;
router.get('/:gameCode/leaderboard', async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[11]++;
  cov_17a2v6hcgk().s[76]++;
  try {
    const {
      gameCode
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[77]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[15][0]++, 50),
      period =
      /* istanbul ignore next */
      (cov_17a2v6hcgk().b[16][0]++, 'all')
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[78]++, req.query);
    // Mock leaderboard data
    const mockLeaderboard =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[79]++, [{
      rank: 1,
      username: 'GameMaster',
      score: 15000,
      winRate: 0.85,
      level: 25,
      coinsEarned: 50000
    }, {
      rank: 2,
      username: 'ProGamer',
      score: 14200,
      winRate: 0.82,
      level: 23,
      coinsEarned: 45000
    }, {
      rank: 3,
      username: 'ElitePlayer',
      score: 13800,
      winRate: 0.79,
      level: 22,
      coinsEarned: 42000
    }, {
      rank: 4,
      username: 'Champion',
      score: 13200,
      winRate: 0.76,
      level: 21,
      coinsEarned: 38000
    }, {
      rank: 5,
      username: 'Warrior',
      score: 12800,
      winRate: 0.73,
      level: 20,
      coinsEarned: 35000
    }]);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[80]++;
    res.json({
      success: true,
      leaderboard: mockLeaderboard.slice(0, Number(limit)),
      gameCode,
      period,
      total: mockLeaderboard.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[81]++;
    logger_1.logger.error('Error fetching leaderboard:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[82]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch leaderboard'
    });
  }
});
/**
 * GET /advanced-games/tournaments/upcoming
 * Get upcoming tournaments
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[83]++;
router.get('/tournaments/upcoming', async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[12]++;
  cov_17a2v6hcgk().s[84]++;
  try {
    // Mock tournament data
    const upcomingTournaments =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[85]++, [{
      id: 'tournament_1',
      name: 'Weekly Chess Championship',
      gameCode: 'speed-chess',
      startTime: new Date(Date.now() + 3600000).toISOString(),
      // 1 hour from now
      entryFee: 100,
      prizePool: 10000,
      maxPlayers: 64,
      registeredPlayers: 32,
      status: 'open'
    }, {
      id: 'tournament_2',
      name: 'Battle Royale Showdown',
      gameCode: 'crypto-battle-royale',
      startTime: new Date(Date.now() + 7200000).toISOString(),
      // 2 hours from now
      entryFee: 250,
      prizePool: 50000,
      maxPlayers: 100,
      registeredPlayers: 78,
      status: 'open'
    }, {
      id: 'tournament_3',
      name: 'Strategy Masters Cup',
      gameCode: 'strategy-empire',
      startTime: new Date(Date.now() + 86400000).toISOString(),
      // 1 day from now
      entryFee: 500,
      prizePool: 100000,
      maxPlayers: 16,
      registeredPlayers: 8,
      status: 'open'
    }]);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[86]++;
    res.json({
      success: true,
      tournaments: upcomingTournaments
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[87]++;
    logger_1.logger.error('Error fetching tournaments:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[88]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch tournaments'
    });
  }
});
/**
 * POST /advanced-games/tournaments/:tournamentId/register
 * Register for a tournament
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[89]++;
router.post('/tournaments/:tournamentId/register', auth_1.authenticateToken, async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[13]++;
  cov_17a2v6hcgk().s[90]++;
  try {
    const {
      tournamentId
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[91]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[92]++, req.user?.id);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[93]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[17][0]++;
      cov_17a2v6hcgk().s[94]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[17][1]++;
    }
    // Mock tournament registration
    cov_17a2v6hcgk().s[95]++;
    logger_1.logger.info(`User ${userId} registered for tournament ${tournamentId}`);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[96]++;
    res.json({
      success: true,
      message: 'Successfully registered for tournament',
      tournamentId
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[97]++;
    logger_1.logger.error('Error registering for tournament:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[98]++;
    res.status(500).json({
      success: false,
      error: 'Failed to register for tournament'
    });
  }
});
/**
 * WebSocket support for real-time game updates
 * This would typically be handled by Socket.IO
 */
/* istanbul ignore next */
cov_17a2v6hcgk().s[99]++;
router.get('/session/:sessionId/events', auth_1.authenticateToken, async (req, res) => {
  /* istanbul ignore next */
  cov_17a2v6hcgk().f[14]++;
  cov_17a2v6hcgk().s[100]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[101]++, req.params);
    const session =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[102]++, AdvancedGamesService_1.advancedGamesService.getSession(sessionId));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[103]++;
    if (!session) {
      /* istanbul ignore next */
      cov_17a2v6hcgk().b[18][0]++;
      cov_17a2v6hcgk().s[104]++;
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_17a2v6hcgk().b[18][1]++;
    }
    // Return recent events
    const recentEvents =
    /* istanbul ignore next */
    (cov_17a2v6hcgk().s[105]++, session.events.slice(-10));
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[106]++;
    res.json({
      success: true,
      events: recentEvents,
      sessionStatus: session.status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[107]++;
    logger_1.logger.error('Error fetching session events:', error);
    /* istanbul ignore next */
    cov_17a2v6hcgk().s[108]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch session events'
    });
  }
});
/* istanbul ignore next */
cov_17a2v6hcgk().s[109]++;
exports.default = router;