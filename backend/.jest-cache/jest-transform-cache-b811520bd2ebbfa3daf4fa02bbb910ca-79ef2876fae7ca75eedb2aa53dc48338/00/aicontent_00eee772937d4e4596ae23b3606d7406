35d0ce82bf6a6a3d1b66dc02628c628c
"use strict";

/* istanbul ignore next */
function cov_a3b64rqbw() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\ai-content.ts";
  var hash = "4183c29c69cf072683c665432a67a00a0c7a172d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\ai-content.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 37
        },
        end: {
          line: 8,
          column: 86
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "8": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "9": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "10": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "11": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 86
        }
      },
      "12": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "13": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "14": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 69
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "17": {
        start: {
          line: 41,
          column: 44
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "18": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 37
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 100
        }
      },
      "20": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "21": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 272
        }
      },
      "22": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 94
        }
      },
      "23": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "24": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 68
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "27": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "28": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "29": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 44
        }
      },
      "30": {
        start: {
          line: 84,
          column: 26
        },
        end: {
          line: 84,
          column: 37
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 96
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "33": {
        start: {
          line: 88,
          column: 31
        },
        end: {
          line: 88,
          column: 270
        }
      },
      "34": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 99
        }
      },
      "35": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 85
        }
      },
      "36": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "37": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 72
        }
      },
      "38": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "39": {
        start: {
          line: 108,
          column: 0
        },
        end: {
          line: 152,
          column: 3
        }
      },
      "40": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "41": {
        start: {
          line: 126,
          column: 44
        },
        end: {
          line: 126,
          column: 52
        }
      },
      "42": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 127,
          column: 37
        }
      },
      "43": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 100
        }
      },
      "44": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "45": {
        start: {
          line: 130,
          column: 31
        },
        end: {
          line: 130,
          column: 275
        }
      },
      "46": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 94
        }
      },
      "47": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "48": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "49": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 68
        }
      },
      "50": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "51": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 181,
          column: 3
        }
      },
      "52": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "53": {
        start: {
          line: 165,
          column: 39
        },
        end: {
          line: 165,
          column: 47
        }
      },
      "54": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 166,
          column: 37
        }
      },
      "55": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 98
        }
      },
      "56": {
        start: {
          line: 168,
          column: 23
        },
        end: {
          line: 168,
          column: 83
        }
      },
      "57": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 172,
          column: 11
        }
      },
      "58": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 71
        }
      },
      "59": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "60": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 207,
          column: 3
        }
      },
      "61": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "62": {
        start: {
          line: 187,
          column: 30
        },
        end: {
          line: 187,
          column: 40
        }
      },
      "63": {
        start: {
          line: 188,
          column: 26
        },
        end: {
          line: 188,
          column: 37
        }
      },
      "64": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "65": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 73
        }
      },
      "66": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      },
      "67": {
        start: {
          line: 209,
          column: 0
        },
        end: {
          line: 237,
          column: 3
        }
      },
      "68": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 236,
          column: 5
        }
      },
      "69": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 213,
          column: 37
        }
      },
      "70": {
        start: {
          line: 214,
          column: 21
        },
        end: {
          line: 214,
          column: 50
        }
      },
      "71": {
        start: {
          line: 215,
          column: 22
        },
        end: {
          line: 215,
          column: 53
        }
      },
      "72": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "73": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 74
        }
      },
      "74": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 235,
          column: 11
        }
      },
      "75": {
        start: {
          line: 238,
          column: 0
        },
        end: {
          line: 238,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 3
          },
          end: {
            line: 32,
            column: 4
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 81,
            column: 3
          },
          end: {
            line: 81,
            column: 4
          }
        },
        loc: {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 81
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 124,
            column: 3
          },
          end: {
            line: 124,
            column: 4
          }
        },
        loc: {
          start: {
            line: 124,
            column: 23
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 124
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 163,
            column: 3
          },
          end: {
            line: 163,
            column: 4
          }
        },
        loc: {
          start: {
            line: 163,
            column: 23
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 163
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 185,
            column: 3
          },
          end: {
            line: 185,
            column: 4
          }
        },
        loc: {
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 207,
            column: 1
          }
        },
        line: 185
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 211,
            column: 3
          },
          end: {
            line: 211,
            column: 4
          }
        },
        loc: {
          start: {
            line: 211,
            column: 23
          },
          end: {
            line: 237,
            column: 1
          }
        },
        line: 211
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 45,
            column: 37
          }
        }, {
          start: {
            line: 45,
            column: 42
          },
          end: {
            line: 45,
            column: 71
          }
        }, {
          start: {
            line: 45,
            column: 75
          },
          end: {
            line: 45,
            column: 103
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 206
          },
          end: {
            line: 46,
            column: 267
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 206
          },
          end: {
            line: 46,
            column: 235
          }
        }, {
          start: {
            line: 46,
            column: 239
          },
          end: {
            line: 46,
            column: 267
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 51
          },
          end: {
            line: 47,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 51
          },
          end: {
            line: 47,
            column: 71
          }
        }, {
          start: {
            line: 47,
            column: 75
          },
          end: {
            line: 47,
            column: 90
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 13
          },
          end: {
            line: 93,
            column: 9
          }
        }],
        line: 87
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 87,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 87,
            column: 37
          }
        }, {
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 71
          }
        }, {
          start: {
            line: 87,
            column: 75
          },
          end: {
            line: 87,
            column: 103
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 88,
            column: 204
          },
          end: {
            line: 88,
            column: 265
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 204
          },
          end: {
            line: 88,
            column: 233
          }
        }, {
          start: {
            line: 88,
            column: 237
          },
          end: {
            line: 88,
            column: 265
          }
        }],
        line: 88
      },
      "11": {
        loc: {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 89,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 89,
            column: 53
          }
        }, {
          start: {
            line: 89,
            column: 57
          },
          end: {
            line: 89,
            column: 92
          }
        }, {
          start: {
            line: 89,
            column: 96
          },
          end: {
            line: 89,
            column: 98
          }
        }],
        line: 89
      },
      "12": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "13": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 129,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 129,
            column: 37
          }
        }, {
          start: {
            line: 129,
            column: 42
          },
          end: {
            line: 129,
            column: 71
          }
        }, {
          start: {
            line: 129,
            column: 75
          },
          end: {
            line: 129,
            column: 103
          }
        }],
        line: 129
      },
      "14": {
        loc: {
          start: {
            line: 130,
            column: 209
          },
          end: {
            line: 130,
            column: 270
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 209
          },
          end: {
            line: 130,
            column: 238
          }
        }, {
          start: {
            line: 130,
            column: 242
          },
          end: {
            line: 130,
            column: 270
          }
        }],
        line: 130
      },
      "15": {
        loc: {
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 131,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 51
          },
          end: {
            line: 131,
            column: 71
          }
        }, {
          start: {
            line: 131,
            column: 75
          },
          end: {
            line: 131,
            column: 90
          }
        }],
        line: 131
      },
      "16": {
        loc: {
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 214,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 21
          },
          end: {
            line: 214,
            column: 45
          }
        }, {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 50
          }
        }],
        line: 214
      },
      "17": {
        loc: {
          start: {
            line: 215,
            column: 22
          },
          end: {
            line: 215,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 22
          },
          end: {
            line: 215,
            column: 47
          }
        }, {
          start: {
            line: 215,
            column: 51
          },
          end: {
            line: 215,
            column: 53
          }
        }],
        line: 215
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4183c29c69cf072683c665432a67a00a0c7a172d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_a3b64rqbw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_a3b64rqbw();
var __importDefault =
/* istanbul ignore next */
(cov_a3b64rqbw().s[0]++,
/* istanbul ignore next */
(cov_a3b64rqbw().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_a3b64rqbw().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_a3b64rqbw().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[0]++;
  cov_a3b64rqbw().s[1]++;
  return /* istanbul ignore next */(cov_a3b64rqbw().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_a3b64rqbw().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_a3b64rqbw().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_a3b64rqbw().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_a3b64rqbw().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[4]++, require("express-validator"));
const AIContentGenerationService_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[5]++, require("../services/AIContentGenerationService"));
const auth_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[6]++, require("../middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[7]++, require("../middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[8]++, require("../config/logger"));
const axios_1 =
/* istanbul ignore next */
(cov_a3b64rqbw().s[9]++, __importDefault(require("axios")));
const router =
/* istanbul ignore next */
(cov_a3b64rqbw().s[10]++, express_1.default.Router());
const aiContentService =
/* istanbul ignore next */
(cov_a3b64rqbw().s[11]++, new AIContentGenerationService_1.AIContentGenerationService());
// Generate AI video
/* istanbul ignore next */
cov_a3b64rqbw().s[12]++;
router.post('/generate-video', [auth_1.authMiddleware, security_1.globalLimiter,
// 10 requests per minute
(0, express_validator_1.body)('prompt').isString().trim().isLength({
  min: 10,
  max: 500
}).withMessage('Prompt must be 10-500 characters'), (0, express_validator_1.body)('style').optional().isIn(['cinematic', 'documentary', 'animated', 'realistic']).withMessage('Invalid style'), (0, express_validator_1.body)('duration').optional().isInt({
  min: 5,
  max: 60
}).withMessage('Duration must be 5-60 seconds')], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[1]++;
  cov_a3b64rqbw().s[13]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[14]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_a3b64rqbw().s[15]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_a3b64rqbw().b[3][0]++;
      cov_a3b64rqbw().s[16]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_a3b64rqbw().b[3][1]++;
    }
    const {
      prompt,
      style,
      duration
    } =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[17]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[18]++, req.user.id);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[19]++;
    logger_1.logger.info('AI video generation request', {
      creatorId,
      prompt,
      style,
      duration
    });
    // Prefer calling AI Engine if configured; fallback to local service
    /* istanbul ignore next */
    cov_a3b64rqbw().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[5][0]++, process.env.AI_ENGINE_URL) && (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[5][1]++, process.env.AI_SERVICE_SECRET) ||
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[5][2]++, process.env.AI_ENGINE_SECRET))) {
      /* istanbul ignore next */
      cov_a3b64rqbw().b[4][0]++;
      const aiResponse =
      /* istanbul ignore next */
      (cov_a3b64rqbw().s[21]++, await axios_1.default.post(`${process.env.AI_ENGINE_URL}/api/ai/content-generation/text-to-video`, {
        prompt,
        userId: creatorId,
        duration,
        style
      }, {
        headers: {
          'x-ai-secret':
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[6][0]++, process.env.AI_SERVICE_SECRET) ||
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[6][1]++, process.env.AI_ENGINE_SECRET)
        }
      }));
      /* istanbul ignore next */
      cov_a3b64rqbw().s[22]++;
      return res.json({
        success: true,
        data:
        /* istanbul ignore next */
        (cov_a3b64rqbw().b[7][0]++, aiResponse.data.data) ||
        /* istanbul ignore next */
        (cov_a3b64rqbw().b[7][1]++, aiResponse.data)
      });
    } else
    /* istanbul ignore next */
    {
      cov_a3b64rqbw().b[4][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[23]++, await aiContentService.generateVideo({
      prompt,
      contentType: 'video',
      style,
      duration,
      creatorId
    }));
    /* istanbul ignore next */
    cov_a3b64rqbw().s[24]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[25]++;
    logger_1.logger.error('AI video generation failed:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[26]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate AI video'
    });
  }
});
// Generate AI thumbnail
/* istanbul ignore next */
cov_a3b64rqbw().s[27]++;
router.post('/generate-thumbnail', [auth_1.authMiddleware, security_1.globalLimiter, (0, express_validator_1.body)('videoId').isString().withMessage('Video ID is required'), (0, express_validator_1.body)('prompt').isString().trim().isLength({
  min: 5,
  max: 200
}).withMessage('Prompt must be 5-200 characters')], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[2]++;
  cov_a3b64rqbw().s[28]++;
  try {
    const {
      videoId,
      prompt
    } =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[29]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[30]++, req.user.id);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[31]++;
    logger_1.logger.info('AI thumbnail generation request', {
      creatorId,
      videoId,
      prompt
    });
    let thumbnailUrl;
    /* istanbul ignore next */
    cov_a3b64rqbw().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[9][0]++, process.env.AI_ENGINE_URL) && (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[9][1]++, process.env.AI_SERVICE_SECRET) ||
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[9][2]++, process.env.AI_ENGINE_SECRET))) {
      /* istanbul ignore next */
      cov_a3b64rqbw().b[8][0]++;
      const aiResponse =
      /* istanbul ignore next */
      (cov_a3b64rqbw().s[33]++, await axios_1.default.post(`${process.env.AI_ENGINE_URL}/api/ai/content-generation/thumbnail`, {
        prompt,
        userId: creatorId,
        streamId: videoId
      }, {
        headers: {
          'x-ai-secret':
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[10][0]++, process.env.AI_SERVICE_SECRET) ||
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[10][1]++, process.env.AI_ENGINE_SECRET)
        }
      }));
      /* istanbul ignore next */
      cov_a3b64rqbw().s[34]++;
      thumbnailUrl =
      /* istanbul ignore next */
      (cov_a3b64rqbw().b[11][0]++, aiResponse.data?.data?.url) ||
      /* istanbul ignore next */
      (cov_a3b64rqbw().b[11][1]++, aiResponse.data?.data?.thumbnailUrl) ||
      /* istanbul ignore next */
      (cov_a3b64rqbw().b[11][2]++, '');
    } else {
      /* istanbul ignore next */
      cov_a3b64rqbw().b[8][1]++;
      cov_a3b64rqbw().s[35]++;
      thumbnailUrl = await aiContentService.generateThumbnail(videoId, prompt);
    }
    /* istanbul ignore next */
    cov_a3b64rqbw().s[36]++;
    res.json({
      success: true,
      data: {
        thumbnailUrl
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[37]++;
    logger_1.logger.error('AI thumbnail generation failed:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[38]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate AI thumbnail'
    });
  }
});
// Generate AI music
/* istanbul ignore next */
cov_a3b64rqbw().s[39]++;
router.post('/generate-music', [auth_1.authMiddleware, security_1.globalLimiter, (0, express_validator_1.body)('prompt').isString().trim().isLength({
  min: 5,
  max: 200
}).withMessage('Prompt must be 5-200 characters'), (0, express_validator_1.body)('style').optional().isIn(['upbeat', 'calm', 'energetic', 'melancholic', 'epic']).withMessage('Invalid music style'), (0, express_validator_1.body)('duration').optional().isInt({
  min: 10,
  max: 300
}).withMessage('Duration must be 10-300 seconds')], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[3]++;
  cov_a3b64rqbw().s[40]++;
  try {
    const {
      prompt,
      style,
      duration
    } =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[41]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[42]++, req.user.id);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[43]++;
    logger_1.logger.info('AI music generation request', {
      creatorId,
      prompt,
      style,
      duration
    });
    /* istanbul ignore next */
    cov_a3b64rqbw().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[13][0]++, process.env.AI_ENGINE_URL) && (
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[13][1]++, process.env.AI_SERVICE_SECRET) ||
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[13][2]++, process.env.AI_ENGINE_SECRET))) {
      /* istanbul ignore next */
      cov_a3b64rqbw().b[12][0]++;
      const aiResponse =
      /* istanbul ignore next */
      (cov_a3b64rqbw().s[45]++, await axios_1.default.post(`${process.env.AI_ENGINE_URL}/api/ai/content-generation/background-music`, {
        prompt,
        userId: creatorId,
        duration,
        style
      }, {
        headers: {
          'x-ai-secret':
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[14][0]++, process.env.AI_SERVICE_SECRET) ||
          /* istanbul ignore next */
          (cov_a3b64rqbw().b[14][1]++, process.env.AI_ENGINE_SECRET)
        }
      }));
      /* istanbul ignore next */
      cov_a3b64rqbw().s[46]++;
      return res.json({
        success: true,
        data:
        /* istanbul ignore next */
        (cov_a3b64rqbw().b[15][0]++, aiResponse.data.data) ||
        /* istanbul ignore next */
        (cov_a3b64rqbw().b[15][1]++, aiResponse.data)
      });
    } else
    /* istanbul ignore next */
    {
      cov_a3b64rqbw().b[12][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[47]++, await aiContentService.generateMusic({
      prompt,
      contentType: 'music',
      style,
      duration,
      creatorId
    }));
    /* istanbul ignore next */
    cov_a3b64rqbw().s[48]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[49]++;
    logger_1.logger.error('AI music generation failed:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[50]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate AI music'
    });
  }
});
// Generate AI subtitles
/* istanbul ignore next */
cov_a3b64rqbw().s[51]++;
router.post('/generate-subtitles', [auth_1.authMiddleware, security_1.globalLimiter, (0, express_validator_1.body)('videoId').isString().withMessage('Video ID is required'), (0, express_validator_1.body)('languages').isArray({
  min: 1,
  max: 10
}).withMessage('Languages must be an array with 1-10 items')], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[4]++;
  cov_a3b64rqbw().s[52]++;
  try {
    const {
      videoId,
      languages
    } =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[53]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[54]++, req.user.id);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[55]++;
    logger_1.logger.info('AI subtitle generation request', {
      creatorId,
      videoId,
      languages
    });
    const result =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[56]++, await aiContentService.generateSubtitles(videoId, languages));
    /* istanbul ignore next */
    cov_a3b64rqbw().s[57]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[58]++;
    logger_1.logger.error('AI subtitle generation failed:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[59]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate AI subtitles'
    });
  }
});
// Get AI content generation status
/* istanbul ignore next */
cov_a3b64rqbw().s[60]++;
router.get('/status/:contentId', [auth_1.authMiddleware], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[5]++;
  cov_a3b64rqbw().s[61]++;
  try {
    const {
      contentId
    } =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[62]++, req.params);
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[63]++, req.user.id);
    // In a real implementation, this would check the actual processing status
    /* istanbul ignore next */
    cov_a3b64rqbw().s[64]++;
    res.json({
      success: true,
      data: {
        contentId,
        status: 'completed',
        progress: 100,
        estimatedTimeRemaining: 0
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[65]++;
    logger_1.logger.error('Failed to get AI content status:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[66]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get content status'
    });
  }
});
// Get AI content generation history
/* istanbul ignore next */
cov_a3b64rqbw().s[67]++;
router.get('/history', [auth_1.authMiddleware], async (req, res) => {
  /* istanbul ignore next */
  cov_a3b64rqbw().f[6]++;
  cov_a3b64rqbw().s[68]++;
  try {
    const creatorId =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[69]++, req.user.id);
    const page =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[70]++,
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[16][0]++, parseInt(req.query.page)) ||
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[16][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_a3b64rqbw().s[71]++,
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[17][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_a3b64rqbw().b[17][1]++, 20));
    // In a real implementation, this would fetch from database
    /* istanbul ignore next */
    cov_a3b64rqbw().s[72]++;
    res.json({
      success: true,
      data: {
        content: [],
        pagination: {
          page,
          limit,
          total: 0,
          totalPages: 0
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a3b64rqbw().s[73]++;
    logger_1.logger.error('Failed to get AI content history:', error);
    /* istanbul ignore next */
    cov_a3b64rqbw().s[74]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get content history'
    });
  }
});
/* istanbul ignore next */
cov_a3b64rqbw().s[75]++;
exports.default = router;