bf5b87c7b49ed6930d50e2acf4b6bea2
"use strict";

/* istanbul ignore next */
function cov_tripxk1bj() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\PaymentFraudService.ts";
  var hash = "bf92868d18b3a5086bfef72402624bebfd46f395";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\PaymentFraudService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 140
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 55
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 39
        }
      },
      "7": {
        start: {
          line: 11,
          column: 25
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "8": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 47,
          column: 2
        }
      },
      "9": {
        start: {
          line: 48,
          column: 30
        },
        end: {
          line: 62,
          column: 2
        }
      },
      "10": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 82,
          column: 2
        }
      },
      "11": {
        start: {
          line: 83,
          column: 19
        },
        end: {
          line: 83,
          column: 75
        }
      },
      "12": {
        start: {
          line: 84,
          column: 0
        },
        end: {
          line: 84,
          column: 32
        }
      },
      "13": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 96
        }
      },
      "14": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 86,
          column: 46
        }
      },
      "15": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 87,
          column: 90
        }
      },
      "16": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 88,
          column: 42
        }
      },
      "17": {
        start: {
          line: 89,
          column: 26
        },
        end: {
          line: 89,
          column: 96
        }
      },
      "18": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 90,
          column: 46
        }
      },
      "19": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "20": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 28
        }
      },
      "21": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 99,
          column: 25
        }
      },
      "22": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "23": {
        start: {
          line: 102,
          column: 32
        },
        end: {
          line: 102,
          column: 34
        }
      },
      "24": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 29
        }
      },
      "25": {
        start: {
          line: 105,
          column: 34
        },
        end: {
          line: 105,
          column: 94
        }
      },
      "26": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "27": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 112,
          column: 18
        }
      },
      "28": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 58
        }
      },
      "29": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "30": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "31": {
        start: {
          line: 118,
          column: 36
        },
        end: {
          line: 118,
          column: 76
        }
      },
      "32": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "33": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 57
        }
      },
      "34": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "35": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 49
        }
      },
      "36": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 32
        }
      },
      "37": {
        start: {
          line: 129,
          column: 29
        },
        end: {
          line: 129,
          column: 62
        }
      },
      "38": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 40
        }
      },
      "39": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 50
        }
      },
      "40": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "41": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 48
        }
      },
      "42": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 32
        }
      },
      "43": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "44": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 53
        }
      },
      "45": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 32
        }
      },
      "46": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 54
        }
      },
      "47": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "48": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "49": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 49
        }
      },
      "50": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "51": {
        start: {
          line: 148,
          column: 35
        },
        end: {
          line: 148,
          column: 81
        }
      },
      "52": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "53": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 74
        }
      },
      "54": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "55": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "56": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "57": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "58": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 73
        }
      },
      "59": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "60": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "61": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 75
        }
      },
      "62": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 200,
          column: 29
        }
      },
      "63": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 30
        }
      },
      "64": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "65": {
        start: {
          line: 204,
          column: 36
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "66": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "67": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 65
        }
      },
      "68": {
        start: {
          line: 214,
          column: 31
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "69": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 230,
          column: 67
        }
      },
      "70": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "71": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 60
        }
      },
      "72": {
        start: {
          line: 235,
          column: 35
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "73": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "74": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 64
        }
      },
      "75": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 247,
          column: 14
        }
      },
      "76": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 76
        }
      },
      "77": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 54
        }
      },
      "78": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "79": {
        start: {
          line: 256,
          column: 27
        },
        end: {
          line: 256,
          column: 72
        }
      },
      "80": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 44
        }
      },
      "81": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 78
        }
      },
      "82": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 22
        }
      },
      "83": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "84": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 34
        }
      },
      "85": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 284,
          column: 33
        }
      },
      "86": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 79
        }
      },
      "87": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "88": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 292,
          column: 30
        }
      },
      "89": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 25
        }
      },
      "90": {
        start: {
          line: 295,
          column: 35
        },
        end: {
          line: 299,
          column: 14
        }
      },
      "91": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 303,
          column: 13
        }
      },
      "92": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 48
        }
      },
      "93": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 45
        }
      },
      "94": {
        start: {
          line: 305,
          column: 35
        },
        end: {
          line: 309,
          column: 14
        }
      },
      "95": {
        start: {
          line: 310,
          column: 35
        },
        end: {
          line: 314,
          column: 14
        }
      },
      "96": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "97": {
        start: {
          line: 316,
          column: 36
        },
        end: {
          line: 316,
          column: 67
        }
      },
      "98": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "99": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 54
        }
      },
      "100": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 319,
          column: 32
        }
      },
      "101": {
        start: {
          line: 323,
          column: 25
        },
        end: {
          line: 323,
          column: 59
        }
      },
      "102": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "103": {
        start: {
          line: 325,
          column: 35
        },
        end: {
          line: 325,
          column: 72
        }
      },
      "104": {
        start: {
          line: 326,
          column: 42
        },
        end: {
          line: 326,
          column: 76
        }
      },
      "105": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 334,
          column: 17
        }
      },
      "106": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 48
        }
      },
      "107": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 32
        }
      },
      "108": {
        start: {
          line: 331,
          column: 21
        },
        end: {
          line: 334,
          column: 17
        }
      },
      "109": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 332,
          column: 50
        }
      },
      "110": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 32
        }
      },
      "111": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 60
        }
      },
      "112": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 71
        }
      },
      "113": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 45
        }
      },
      "114": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 346,
          column: 26
        }
      },
      "115": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 347,
          column: 21
        }
      },
      "116": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "117": {
        start: {
          line: 350,
          column: 35
        },
        end: {
          line: 354,
          column: 14
        }
      },
      "118": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "119": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 51
        }
      },
      "120": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 28
        }
      },
      "121": {
        start: {
          line: 360,
          column: 32
        },
        end: {
          line: 363,
          column: 14
        }
      },
      "122": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "123": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 365,
          column: 50
        }
      },
      "124": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 28
        }
      },
      "125": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 59
        }
      },
      "126": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 69
        }
      },
      "127": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 45
        }
      },
      "128": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "129": {
        start: {
          line: 377,
          column: 24
        },
        end: {
          line: 377,
          column: 34
        }
      },
      "130": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "131": {
        start: {
          line: 380,
          column: 34
        },
        end: {
          line: 380,
          column: 108
        }
      },
      "132": {
        start: {
          line: 381,
          column: 32
        },
        end: {
          line: 381,
          column: 78
        }
      },
      "133": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 397,
          column: 37
        }
      },
      "134": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "135": {
        start: {
          line: 401,
          column: 33
        },
        end: {
          line: 401,
          column: 91
        }
      },
      "136": {
        start: {
          line: 402,
          column: 31
        },
        end: {
          line: 402,
          column: 81
        }
      },
      "137": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 418,
          column: 37
        }
      },
      "138": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "139": {
        start: {
          line: 422,
          column: 34
        },
        end: {
          line: 422,
          column: 108
        }
      },
      "140": {
        start: {
          line: 423,
          column: 32
        },
        end: {
          line: 423,
          column: 78
        }
      },
      "141": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 439,
          column: 37
        }
      },
      "142": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 78
        }
      },
      "143": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 467,
          column: 9
        }
      },
      "144": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 457,
          column: 15
        }
      },
      "145": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 463,
          column: 15
        }
      },
      "146": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 79
        }
      },
      "147": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 478,
          column: 9
        }
      },
      "148": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 473,
          column: 41
        }
      },
      "149": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 75
        }
      },
      "150": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 22
        }
      },
      "151": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 496,
          column: 9
        }
      },
      "152": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 487,
          column: 15
        }
      },
      "153": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 492,
          column: 15
        }
      },
      "154": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 73
        }
      },
      "155": {
        start: {
          line: 499,
          column: 0
        },
        end: {
          line: 499,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 73
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 100
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 113
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 167
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 60
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 199
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 40
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 254
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 83
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 264
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 33
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 290
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 27
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 343
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 375,
            column: 4
          },
          end: {
            line: 375,
            column: 5
          }
        },
        loc: {
          start: {
            line: 375,
            column: 74
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 375
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 104
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 446
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 30
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 469
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 70
          },
          end: {
            line: 497,
            column: 5
          }
        },
        line: 480
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: 124,
            column: 17
          },
          end: {
            line: 127,
            column: 13
          }
        }],
        line: 117
      },
      "5": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "8": {
        loc: {
          start: {
            line: 148,
            column: 35
          },
          end: {
            line: 148,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 35
          },
          end: {
            line: 148,
            column: 69
          }
        }, {
          start: {
            line: 148,
            column: 73
          },
          end: {
            line: 148,
            column: 81
          }
        }],
        line: 148
      },
      "9": {
        loc: {
          start: {
            line: 167,
            column: 96
          },
          end: {
            line: 167,
            column: 111
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 106
          },
          end: {
            line: 167,
            column: 111
          }
        }],
        line: 167
      },
      "10": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "11": {
        loc: {
          start: {
            line: 185,
            column: 79
          },
          end: {
            line: 185,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 79
          },
          end: {
            line: 185,
            column: 85
          }
        }, {
          start: {
            line: 185,
            column: 89
          },
          end: {
            line: 185,
            column: 90
          }
        }],
        line: 185
      },
      "12": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "13": {
        loc: {
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 230,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 36
          },
          end: {
            line: 230,
            column: 62
          }
        }, {
          start: {
            line: 230,
            column: 66
          },
          end: {
            line: 230,
            column: 67
          }
        }],
        line: 230
      },
      "14": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "15": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "16": {
        loc: {
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 257,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 257,
            column: 37
          }
        }, {
          start: {
            line: 257,
            column: 41
          },
          end: {
            line: 257,
            column: 43
          }
        }],
        line: 257
      },
      "17": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 303,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "18": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "19": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "20": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "21": {
        loc: {
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 334,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 334,
            column: 17
          }
        }, {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 334,
            column: 17
          }
        }],
        line: 327
      },
      "22": {
        loc: {
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 334,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 21
          },
          end: {
            line: 334,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "23": {
        loc: {
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "24": {
        loc: {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "25": {
        loc: {
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "26": {
        loc: {
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "27": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bf92868d18b3a5086bfef72402624bebfd46f395"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tripxk1bj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tripxk1bj();
var __importDefault =
/* istanbul ignore next */
(cov_tripxk1bj().s[0]++,
/* istanbul ignore next */
(cov_tripxk1bj().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_tripxk1bj().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_tripxk1bj().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_tripxk1bj().f[0]++;
  cov_tripxk1bj().s[1]++;
  return /* istanbul ignore next */(cov_tripxk1bj().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_tripxk1bj().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_tripxk1bj().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_tripxk1bj().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_tripxk1bj().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tripxk1bj().s[3]++;
exports.TransactionReview = exports.VelocityControl = exports.DeviceFingerprint = exports.FraudEvent = exports.paymentFraudService = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_tripxk1bj().s[4]++, require("../config/logger"));
const mongoose_1 =
/* istanbul ignore next */
(cov_tripxk1bj().s[5]++, __importDefault(require("mongoose")));
const User_1 =
/* istanbul ignore next */
(cov_tripxk1bj().s[6]++, require("@/models/User"));
// Fraud detection schemas
const fraudEventSchema =
/* istanbul ignore next */
(cov_tripxk1bj().s[7]++, new mongoose_1.default.Schema({
  userId: {
    type: mongoose_1.default.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  deviceId: {
    type: String
  },
  ip: {
    type: String,
    required: true
  },
  eventType: {
    type: String,
    required: true,
    enum: ['payment_attempt', 'payment_success', 'payment_failure', 'chargeback', 'dispute']
  },
  amount: {
    type: Number
  },
  currency: {
    type: String,
    default: 'USD'
  },
  paymentMethod: {
    type: String
  },
  riskScore: {
    type: Number,
    min: 0,
    max: 100
  },
  riskFactors: [{
    type: String
  }],
  blocked: {
    type: Boolean,
    default: false
  },
  metadata: {
    type: mongoose_1.default.Schema.Types.Mixed
  },
  timestamp: {
    type: Date,
    default: Date.now
  }
}));
const deviceFingerprintSchema =
/* istanbul ignore next */
(cov_tripxk1bj().s[8]++, new mongoose_1.default.Schema({
  deviceId: {
    type: String,
    required: true,
    unique: true
  },
  userId: {
    type: mongoose_1.default.Schema.Types.ObjectId,
    ref: 'User'
  },
  firstSeen: {
    type: Date,
    default: Date.now
  },
  lastSeen: {
    type: Date,
    default: Date.now
  },
  userAgent: {
    type: String
  },
  acceptLanguage: {
    type: String
  },
  screenResolution: {
    type: String
  },
  timezone: {
    type: String
  },
  ipHistory: [{
    ip: String,
    timestamp: {
      type: Date,
      default: Date.now
    },
    country: String,
    city: String
  }],
  trustScore: {
    type: Number,
    min: 0,
    max: 100,
    default: 50
  },
  flagged: {
    type: Boolean,
    default: false
  },
  flagReason: {
    type: String
  }
}));
const velocityControlSchema =
/* istanbul ignore next */
(cov_tripxk1bj().s[9]++, new mongoose_1.default.Schema({
  userId: {
    type: mongoose_1.default.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  deviceId: {
    type: String
  },
  ip: {
    type: String
  },
  controlType: {
    type: String,
    required: true,
    enum: ['hourly_recharges', 'daily_coins', 'hourly_failures', 'daily_losses']
  },
  count: {
    type: Number,
    default: 0
  },
  amount: {
    type: Number,
    default: 0
  },
  windowStart: {
    type: Date,
    required: true
  },
  windowEnd: {
    type: Date,
    required: true
  },
  blocked: {
    type: Boolean,
    default: false
  }
}));
const transactionReviewSchema =
/* istanbul ignore next */
(cov_tripxk1bj().s[10]++, new mongoose_1.default.Schema({
  transactionId: {
    type: String,
    required: true,
    unique: true
  },
  userId: {
    type: mongoose_1.default.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  amount: {
    type: Number,
    required: true
  },
  currency: {
    type: String,
    default: 'USD'
  },
  paymentMethod: {
    type: String
  },
  riskScore: {
    type: Number,
    required: true
  },
  riskFactors: [{
    type: String
  }],
  status: {
    type: String,
    required: true,
    enum: ['pending', 'approved', 'denied', 'escalated'],
    default: 'pending'
  },
  reviewedBy: {
    type: String
  },
  reviewedAt: {
    type: Date
  },
  reviewNotes: {
    type: String
  },
  autoBlocked: {
    type: Boolean,
    default: false
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
}));
const FraudEvent =
/* istanbul ignore next */
(cov_tripxk1bj().s[11]++, mongoose_1.default.model('FraudEvent', fraudEventSchema));
/* istanbul ignore next */
cov_tripxk1bj().s[12]++;
exports.FraudEvent = FraudEvent;
const DeviceFingerprint =
/* istanbul ignore next */
(cov_tripxk1bj().s[13]++, mongoose_1.default.model('DeviceFingerprint', deviceFingerprintSchema));
/* istanbul ignore next */
cov_tripxk1bj().s[14]++;
exports.DeviceFingerprint = DeviceFingerprint;
const VelocityControl =
/* istanbul ignore next */
(cov_tripxk1bj().s[15]++, mongoose_1.default.model('VelocityControl', velocityControlSchema));
/* istanbul ignore next */
cov_tripxk1bj().s[16]++;
exports.VelocityControl = VelocityControl;
const TransactionReview =
/* istanbul ignore next */
(cov_tripxk1bj().s[17]++, mongoose_1.default.model('TransactionReview', transactionReviewSchema));
/* istanbul ignore next */
cov_tripxk1bj().s[18]++;
exports.TransactionReview = TransactionReview;
class PaymentFraudService {
  DEFAULT_VELOCITY_LIMITS =
  /* istanbul ignore next */
  (cov_tripxk1bj().s[19]++, {
    maxRechargesHr: 10,
    maxCoinsPerDay: 10000,
    maxFailuresHr: 5,
    maxLossesPerDay: 5000
  });
  HIGH_RISK_THRESHOLD =
  /* istanbul ignore next */
  (cov_tripxk1bj().s[20]++, 70);
  REVIEW_THRESHOLD =
  /* istanbul ignore next */
  (cov_tripxk1bj().s[21]++, 50);
  async assessPaymentRisk(userId, deviceId, ip, amount, paymentMethod) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[1]++;
    cov_tripxk1bj().s[22]++;
    try {
      const riskFactors =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[23]++, []);
      let riskScore =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[24]++, 0);
      // Check velocity limits
      const velocityCheck =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[25]++, await this.checkVelocityLimits(userId, deviceId, ip, amount));
      /* istanbul ignore next */
      cov_tripxk1bj().s[26]++;
      if (velocityCheck.blocked) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[3][0]++;
        cov_tripxk1bj().s[27]++;
        return {
          score: 100,
          factors: velocityCheck.violations,
          blocked: true,
          requiresReview: false
        };
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[3][1]++;
      }
      cov_tripxk1bj().s[28]++;
      riskFactors.push(...velocityCheck.violations);
      /* istanbul ignore next */
      cov_tripxk1bj().s[29]++;
      riskScore += velocityCheck.violations.length * 15;
      // Check device trust score
      /* istanbul ignore next */
      cov_tripxk1bj().s[30]++;
      if (deviceId) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[4][0]++;
        const deviceTrust =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[31]++, await this.getDeviceTrustScore(deviceId));
        /* istanbul ignore next */
        cov_tripxk1bj().s[32]++;
        if (deviceTrust < 30) {
          /* istanbul ignore next */
          cov_tripxk1bj().b[5][0]++;
          cov_tripxk1bj().s[33]++;
          riskFactors.push('low_device_trust');
          /* istanbul ignore next */
          cov_tripxk1bj().s[34]++;
          riskScore += 25;
        } else
        /* istanbul ignore next */
        {
          cov_tripxk1bj().b[5][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_tripxk1bj().b[4][1]++;
        cov_tripxk1bj().s[35]++;
        riskFactors.push('no_device_id');
        /* istanbul ignore next */
        cov_tripxk1bj().s[36]++;
        riskScore += 20;
      }
      // Check user payment history
      const userRisk =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[37]++, await this.assessUserRisk(userId));
      /* istanbul ignore next */
      cov_tripxk1bj().s[38]++;
      riskScore += userRisk.score;
      /* istanbul ignore next */
      cov_tripxk1bj().s[39]++;
      riskFactors.push(...userRisk.factors);
      // Check amount-based risk
      /* istanbul ignore next */
      cov_tripxk1bj().s[40]++;
      if (amount > 1000) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[6][0]++;
        cov_tripxk1bj().s[41]++;
        riskFactors.push('high_amount');
        /* istanbul ignore next */
        cov_tripxk1bj().s[42]++;
        riskScore += 15;
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[6][1]++;
      }
      cov_tripxk1bj().s[43]++;
      if (amount > 5000) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[7][0]++;
        cov_tripxk1bj().s[44]++;
        riskFactors.push('very_high_amount');
        /* istanbul ignore next */
        cov_tripxk1bj().s[45]++;
        riskScore += 25;
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[7][1]++;
      }
      // Check IP reputation (simplified)
      const ipRisk =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[46]++, await this.assessIPRisk(ip));
      /* istanbul ignore next */
      cov_tripxk1bj().s[47]++;
      riskScore += ipRisk.score;
      /* istanbul ignore next */
      cov_tripxk1bj().s[48]++;
      riskFactors.push(...ipRisk.factors);
      // Cap risk score at 100
      /* istanbul ignore next */
      cov_tripxk1bj().s[49]++;
      riskScore = Math.min(riskScore, 100);
      const blocked =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[50]++, riskScore >= this.HIGH_RISK_THRESHOLD);
      const requiresReview =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[51]++,
      /* istanbul ignore next */
      (cov_tripxk1bj().b[8][0]++, riskScore >= this.REVIEW_THRESHOLD) &&
      /* istanbul ignore next */
      (cov_tripxk1bj().b[8][1]++, !blocked));
      /* istanbul ignore next */
      cov_tripxk1bj().s[52]++;
      return {
        score: riskScore,
        factors: riskFactors,
        blocked,
        requiresReview
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[53]++;
      logger_1.logger.error('Error assessing payment risk:', error);
      // Fail safe - require review for unknown errors
      /* istanbul ignore next */
      cov_tripxk1bj().s[54]++;
      return {
        score: this.REVIEW_THRESHOLD,
        factors: ['assessment_error'],
        blocked: false,
        requiresReview: true
      };
    }
  }
  async recordPaymentEvent(userId, deviceId, ip, eventType, amount, paymentMethod, riskScore, blocked =
  /* istanbul ignore next */
  (cov_tripxk1bj().b[9][0]++, false)) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[2]++;
    cov_tripxk1bj().s[55]++;
    try {
      /* istanbul ignore next */
      cov_tripxk1bj().s[56]++;
      await FraudEvent.create({
        userId,
        deviceId,
        ip,
        eventType,
        amount,
        paymentMethod,
        riskScore,
        blocked,
        riskFactors: []
      });
      // Update device fingerprint
      /* istanbul ignore next */
      cov_tripxk1bj().s[57]++;
      if (deviceId) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[10][0]++;
        cov_tripxk1bj().s[58]++;
        await this.updateDeviceFingerprint(deviceId, userId, ip);
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[10][1]++;
      }
      // Update velocity controls
      cov_tripxk1bj().s[59]++;
      await this.updateVelocityControls(userId, deviceId, ip, eventType,
      /* istanbul ignore next */
      (cov_tripxk1bj().b[11][0]++, amount) ||
      /* istanbul ignore next */
      (cov_tripxk1bj().b[11][1]++, 0));
      /* istanbul ignore next */
      cov_tripxk1bj().s[60]++;
      logger_1.logger.info('Payment event recorded', {
        userId,
        deviceId,
        eventType,
        amount,
        riskScore,
        blocked
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[61]++;
      logger_1.logger.error('Error recording payment event:', error);
    }
  }
  async checkVelocityLimits(userId, deviceId, ip, amount) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[3]++;
    const violations =
    /* istanbul ignore next */
    (cov_tripxk1bj().s[62]++, []);
    const now =
    /* istanbul ignore next */
    (cov_tripxk1bj().s[63]++, new Date());
    /* istanbul ignore next */
    cov_tripxk1bj().s[64]++;
    try {
      // Check hourly recharge attempts
      const hourlyRecharges =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[65]++, await VelocityControl.countDocuments({
        userId,
        controlType: 'hourly_recharges',
        windowStart: {
          $lte: now
        },
        windowEnd: {
          $gt: now
        }
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[66]++;
      if (hourlyRecharges >= this.DEFAULT_VELOCITY_LIMITS.maxRechargesHr) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[12][0]++;
        cov_tripxk1bj().s[67]++;
        violations.push('max_hourly_recharges_exceeded');
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[12][1]++;
      }
      // Check daily coin purchases
      const dailyCoins =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[68]++, await VelocityControl.aggregate([{
        $match: {
          userId: new mongoose_1.default.Types.ObjectId(userId),
          controlType: 'daily_coins',
          windowStart: {
            $lte: now
          },
          windowEnd: {
            $gt: now
          }
        }
      }, {
        $group: {
          _id: null,
          totalAmount: {
            $sum: '$amount'
          }
        }
      }]));
      const totalDailyCoins =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[69]++,
      /* istanbul ignore next */
      (cov_tripxk1bj().b[13][0]++, dailyCoins[0]?.totalAmount) ||
      /* istanbul ignore next */
      (cov_tripxk1bj().b[13][1]++, 0));
      /* istanbul ignore next */
      cov_tripxk1bj().s[70]++;
      if (totalDailyCoins + amount > this.DEFAULT_VELOCITY_LIMITS.maxCoinsPerDay) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[14][0]++;
        cov_tripxk1bj().s[71]++;
        violations.push('max_daily_coins_exceeded');
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[14][1]++;
      }
      // Check hourly failures
      const hourlyFailures =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[72]++, await VelocityControl.countDocuments({
        $or: [{
          userId
        }, {
          deviceId
        }, {
          ip
        }],
        controlType: 'hourly_failures',
        windowStart: {
          $lte: now
        },
        windowEnd: {
          $gt: now
        }
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[73]++;
      if (hourlyFailures >= this.DEFAULT_VELOCITY_LIMITS.maxFailuresHr) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[15][0]++;
        cov_tripxk1bj().s[74]++;
        violations.push('max_hourly_failures_exceeded');
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[15][1]++;
      }
      cov_tripxk1bj().s[75]++;
      return {
        blocked: violations.length > 0,
        violations
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[76]++;
      logger_1.logger.error('Error checking velocity limits:', error);
      /* istanbul ignore next */
      cov_tripxk1bj().s[77]++;
      return {
        blocked: false,
        violations: []
      };
    }
  }
  async getDeviceTrustScore(deviceId) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[4]++;
    cov_tripxk1bj().s[78]++;
    try {
      const device =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[79]++, await DeviceFingerprint.findOne({
        deviceId
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[80]++;
      return /* istanbul ignore next */(cov_tripxk1bj().b[16][0]++, device?.trustScore) ||
      /* istanbul ignore next */
      (cov_tripxk1bj().b[16][1]++, 50); // Default neutral trust
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[81]++;
      logger_1.logger.error('Error getting device trust score:', error);
      /* istanbul ignore next */
      cov_tripxk1bj().s[82]++;
      return 50;
    }
  }
  async updateDeviceFingerprint(deviceId, userId, ip, userAgent, acceptLanguage) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[5]++;
    cov_tripxk1bj().s[83]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[84]++, new Date());
      /* istanbul ignore next */
      cov_tripxk1bj().s[85]++;
      await DeviceFingerprint.findOneAndUpdate({
        deviceId
      }, {
        $set: {
          userId,
          lastSeen: now,
          userAgent,
          acceptLanguage
        },
        $push: {
          ipHistory: {
            $each: [{
              ip,
              timestamp: now
            }],
            $slice: -10 // Keep only last 10 IPs
          }
        },
        $setOnInsert: {
          firstSeen: now,
          trustScore: 50
        }
      }, {
        upsert: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[86]++;
      logger_1.logger.error('Error updating device fingerprint:', error);
    }
  }
  async assessUserRisk(userId) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[6]++;
    cov_tripxk1bj().s[87]++;
    try {
      const factors =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[88]++, []);
      let score =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[89]++, 0);
      // Check for recent chargebacks/disputes
      const recentDisputes =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[90]++, await FraudEvent.countDocuments({
        userId,
        eventType: {
          $in: ['chargeback', 'dispute']
        },
        timestamp: {
          $gt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
        } // 30 days
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[91]++;
      if (recentDisputes > 0) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[17][0]++;
        cov_tripxk1bj().s[92]++;
        factors.push('recent_disputes');
        /* istanbul ignore next */
        cov_tripxk1bj().s[93]++;
        score += recentDisputes * 30;
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[17][1]++;
      }
      // Check failure rate
      const recentAttempts =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[94]++, await FraudEvent.countDocuments({
        userId,
        eventType: 'payment_attempt',
        timestamp: {
          $gt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
        } // 7 days
      }));
      const recentFailures =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[95]++, await FraudEvent.countDocuments({
        userId,
        eventType: 'payment_failure',
        timestamp: {
          $gt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
        } // 7 days
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[96]++;
      if (recentAttempts > 0) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[18][0]++;
        const failureRate =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[97]++, recentFailures / recentAttempts);
        /* istanbul ignore next */
        cov_tripxk1bj().s[98]++;
        if (failureRate > 0.5) {
          /* istanbul ignore next */
          cov_tripxk1bj().b[19][0]++;
          cov_tripxk1bj().s[99]++;
          factors.push('high_failure_rate');
          /* istanbul ignore next */
          cov_tripxk1bj().s[100]++;
          score += 20;
        } else
        /* istanbul ignore next */
        {
          cov_tripxk1bj().b[19][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[18][1]++;
      }
      // Check account age
      const user =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[101]++, await User_1.User.findById(userId));
      /* istanbul ignore next */
      cov_tripxk1bj().s[102]++;
      if (user) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[20][0]++;
        const accountAge =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[103]++, Date.now() - user.createdAt.getTime());
        const daysSinceCreation =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[104]++, accountAge / (24 * 60 * 60 * 1000));
        /* istanbul ignore next */
        cov_tripxk1bj().s[105]++;
        if (daysSinceCreation < 1) {
          /* istanbul ignore next */
          cov_tripxk1bj().b[21][0]++;
          cov_tripxk1bj().s[106]++;
          factors.push('new_account');
          /* istanbul ignore next */
          cov_tripxk1bj().s[107]++;
          score += 25;
        } else {
          /* istanbul ignore next */
          cov_tripxk1bj().b[21][1]++;
          cov_tripxk1bj().s[108]++;
          if (daysSinceCreation < 7) {
            /* istanbul ignore next */
            cov_tripxk1bj().b[22][0]++;
            cov_tripxk1bj().s[109]++;
            factors.push('young_account');
            /* istanbul ignore next */
            cov_tripxk1bj().s[110]++;
            score += 15;
          } else
          /* istanbul ignore next */
          {
            cov_tripxk1bj().b[22][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[20][1]++;
      }
      cov_tripxk1bj().s[111]++;
      return {
        score: Math.min(score, 100),
        factors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[112]++;
      logger_1.logger.error('Error assessing user risk:', error);
      /* istanbul ignore next */
      cov_tripxk1bj().s[113]++;
      return {
        score: 0,
        factors: []
      };
    }
  }
  async assessIPRisk(ip) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[7]++;
    // Simplified IP risk assessment
    // In production, this would integrate with IP reputation services
    const factors =
    /* istanbul ignore next */
    (cov_tripxk1bj().s[114]++, []);
    let score =
    /* istanbul ignore next */
    (cov_tripxk1bj().s[115]++, 0);
    /* istanbul ignore next */
    cov_tripxk1bj().s[116]++;
    try {
      // Check for recent failures from this IP
      const recentFailures =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[117]++, await FraudEvent.countDocuments({
        ip,
        eventType: 'payment_failure',
        timestamp: {
          $gt: new Date(Date.now() - 60 * 60 * 1000)
        } // 1 hour
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[118]++;
      if (recentFailures > 3) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[23][0]++;
        cov_tripxk1bj().s[119]++;
        factors.push('ip_recent_failures');
        /* istanbul ignore next */
        cov_tripxk1bj().s[120]++;
        score += 20;
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[23][1]++;
      }
      // Check for multiple users from same IP
      const uniqueUsers =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[121]++, await FraudEvent.distinct('userId', {
        ip,
        timestamp: {
          $gt: new Date(Date.now() - 24 * 60 * 60 * 1000)
        } // 24 hours
      }));
      /* istanbul ignore next */
      cov_tripxk1bj().s[122]++;
      if (uniqueUsers.length > 5) {
        /* istanbul ignore next */
        cov_tripxk1bj().b[24][0]++;
        cov_tripxk1bj().s[123]++;
        factors.push('ip_multiple_users');
        /* istanbul ignore next */
        cov_tripxk1bj().s[124]++;
        score += 15;
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[24][1]++;
      }
      cov_tripxk1bj().s[125]++;
      return {
        score: Math.min(score, 50),
        factors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[126]++;
      logger_1.logger.error('Error assessing IP risk:', error);
      /* istanbul ignore next */
      cov_tripxk1bj().s[127]++;
      return {
        score: 0,
        factors: []
      };
    }
  }
  async updateVelocityControls(userId, deviceId, ip, eventType, amount) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[8]++;
    cov_tripxk1bj().s[128]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_tripxk1bj().s[129]++, new Date());
      /* istanbul ignore next */
      cov_tripxk1bj().s[130]++;
      if (eventType === 'payment_attempt') {
        /* istanbul ignore next */
        cov_tripxk1bj().b[25][0]++;
        // Update hourly recharge attempts
        const hourStart =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[131]++, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()));
        const hourEnd =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[132]++, new Date(hourStart.getTime() + 60 * 60 * 1000));
        /* istanbul ignore next */
        cov_tripxk1bj().s[133]++;
        await VelocityControl.findOneAndUpdate({
          userId,
          controlType: 'hourly_recharges',
          windowStart: hourStart,
          windowEnd: hourEnd
        }, {
          $inc: {
            count: 1
          },
          $setOnInsert: {
            userId,
            deviceId,
            ip,
            controlType: 'hourly_recharges',
            windowStart: hourStart,
            windowEnd: hourEnd
          }
        }, {
          upsert: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[25][1]++;
      }
      cov_tripxk1bj().s[134]++;
      if (eventType === 'payment_success') {
        /* istanbul ignore next */
        cov_tripxk1bj().b[26][0]++;
        // Update daily coin purchases
        const dayStart =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[135]++, new Date(now.getFullYear(), now.getMonth(), now.getDate()));
        const dayEnd =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[136]++, new Date(dayStart.getTime() + 24 * 60 * 60 * 1000));
        /* istanbul ignore next */
        cov_tripxk1bj().s[137]++;
        await VelocityControl.findOneAndUpdate({
          userId,
          controlType: 'daily_coins',
          windowStart: dayStart,
          windowEnd: dayEnd
        }, {
          $inc: {
            count: 1,
            amount: amount
          },
          $setOnInsert: {
            userId,
            deviceId,
            ip,
            controlType: 'daily_coins',
            windowStart: dayStart,
            windowEnd: dayEnd
          }
        }, {
          upsert: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[26][1]++;
      }
      cov_tripxk1bj().s[138]++;
      if (eventType === 'payment_failure') {
        /* istanbul ignore next */
        cov_tripxk1bj().b[27][0]++;
        // Update hourly failures
        const hourStart =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[139]++, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours()));
        const hourEnd =
        /* istanbul ignore next */
        (cov_tripxk1bj().s[140]++, new Date(hourStart.getTime() + 60 * 60 * 1000));
        /* istanbul ignore next */
        cov_tripxk1bj().s[141]++;
        await VelocityControl.findOneAndUpdate({
          $or: [{
            userId
          }, {
            deviceId
          }, {
            ip
          }],
          controlType: 'hourly_failures',
          windowStart: hourStart,
          windowEnd: hourEnd
        }, {
          $inc: {
            count: 1
          },
          $setOnInsert: {
            userId,
            deviceId,
            ip,
            controlType: 'hourly_failures',
            windowStart: hourStart,
            windowEnd: hourEnd
          }
        }, {
          upsert: true
        });
      } else
      /* istanbul ignore next */
      {
        cov_tripxk1bj().b[27][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[142]++;
      logger_1.logger.error('Error updating velocity controls:', error);
    }
  }
  async createReviewTransaction(transactionId, userId, amount, paymentMethod, riskScore, riskFactors) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[9]++;
    cov_tripxk1bj().s[143]++;
    try {
      /* istanbul ignore next */
      cov_tripxk1bj().s[144]++;
      await TransactionReview.create({
        transactionId,
        userId,
        amount,
        paymentMethod,
        riskScore,
        riskFactors,
        status: 'pending',
        autoBlocked: riskScore >= this.HIGH_RISK_THRESHOLD
      });
      /* istanbul ignore next */
      cov_tripxk1bj().s[145]++;
      logger_1.logger.info('Transaction queued for review', {
        transactionId,
        userId,
        amount,
        riskScore
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[146]++;
      logger_1.logger.error('Error creating review transaction:', error);
    }
  }
  async getPendingReviews() {
    /* istanbul ignore next */
    cov_tripxk1bj().f[10]++;
    cov_tripxk1bj().s[147]++;
    try {
      /* istanbul ignore next */
      cov_tripxk1bj().s[148]++;
      return await TransactionReview.find({
        status: 'pending'
      }).populate('userId', 'username email').sort({
        createdAt: -1
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[149]++;
      logger_1.logger.error('Error getting pending reviews:', error);
      /* istanbul ignore next */
      cov_tripxk1bj().s[150]++;
      return [];
    }
  }
  async reviewTransaction(transactionId, status, reviewedBy, notes) {
    /* istanbul ignore next */
    cov_tripxk1bj().f[11]++;
    cov_tripxk1bj().s[151]++;
    try {
      /* istanbul ignore next */
      cov_tripxk1bj().s[152]++;
      await TransactionReview.findOneAndUpdate({
        transactionId
      }, {
        status,
        reviewedBy,
        reviewedAt: new Date(),
        reviewNotes: notes
      });
      /* istanbul ignore next */
      cov_tripxk1bj().s[153]++;
      logger_1.logger.info('Transaction reviewed', {
        transactionId,
        status,
        reviewedBy
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_tripxk1bj().s[154]++;
      logger_1.logger.error('Error reviewing transaction:', error);
    }
  }
}
/* istanbul ignore next */
cov_tripxk1bj().s[155]++;
exports.paymentFraudService = new PaymentFraudService();