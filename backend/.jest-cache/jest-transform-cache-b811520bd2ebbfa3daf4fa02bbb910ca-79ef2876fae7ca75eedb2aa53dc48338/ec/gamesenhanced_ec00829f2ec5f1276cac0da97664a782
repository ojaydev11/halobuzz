fbfc429c4a452db697f4f044df5311ed
"use strict";

/* istanbul ignore next */
function cov_1a8g0rpxm1() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\games-enhanced.ts";
  var hash = "09ec46b7a462a9e52cece335cd2beec5e45f4e5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\games-enhanced.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 62,
          column: 1
        }
      },
      "5": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 72,
          column: 1
        }
      },
      "6": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 90,
          column: 1
        }
      },
      "7": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 126,
          column: 3
        }
      },
      "8": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "9": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 61
        }
      },
      "10": {
        start: {
          line: 95,
          column: 57
        },
        end: {
          line: 95,
          column: 66
        }
      },
      "11": {
        start: {
          line: 96,
          column: 28
        },
        end: {
          line: 96,
          column: 67
        }
      },
      "12": {
        start: {
          line: 96,
          column: 53
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "13": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "14": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 85
        }
      },
      "15": {
        start: {
          line: 99,
          column: 57
        },
        end: {
          line: 99,
          column: 83
        }
      },
      "16": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "17": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 89
        }
      },
      "18": {
        start: {
          line: 102,
          column: 57
        },
        end: {
          line: 102,
          column: 87
        }
      },
      "19": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "20": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 90
        }
      },
      "21": {
        start: {
          line: 105,
          column: 57
        },
        end: {
          line: 105,
          column: 88
        }
      },
      "22": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "23": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 90
        }
      },
      "24": {
        start: {
          line: 108,
          column: 57
        },
        end: {
          line: 108,
          column: 88
        }
      },
      "25": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "26": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 67
        }
      },
      "27": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "28": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 152,
          column: 3
        }
      },
      "29": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "30": {
        start: {
          line: 130,
          column: 27
        },
        end: {
          line: 130,
          column: 37
        }
      },
      "31": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 69
        }
      },
      "32": {
        start: {
          line: 132,
          column: 21
        },
        end: {
          line: 132,
          column: 57
        }
      },
      "33": {
        start: {
          line: 132,
          column: 41
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "34": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "35": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "36": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "37": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 69
        }
      },
      "38": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 150,
          column: 11
        }
      },
      "39": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 204,
          column: 3
        }
      },
      "40": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 203,
          column: 5
        }
      },
      "41": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 37
        }
      },
      "42": {
        start: {
          line: 157,
          column: 27
        },
        end: {
          line: 157,
          column: 35
        }
      },
      "43": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 91
        }
      },
      "44": {
        start: {
          line: 159,
          column: 21
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "45": {
        start: {
          line: 159,
          column: 41
        },
        end: {
          line: 159,
          column: 56
        }
      },
      "46": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "47": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 164,
          column: 15
        }
      },
      "48": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "49": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "50": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "51": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 50
        }
      },
      "52": {
        start: {
          line: 179,
          column: 26
        },
        end: {
          line: 179,
          column: 92
        }
      },
      "53": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "54": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "55": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 69
        }
      },
      "56": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 202,
          column: 11
        }
      },
      "57": {
        start: {
          line: 206,
          column: 0
        },
        end: {
          line: 249,
          column: 3
        }
      },
      "58": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "59": {
        start: {
          line: 208,
          column: 30
        },
        end: {
          line: 208,
          column: 40
        }
      },
      "60": {
        start: {
          line: 209,
          column: 49
        },
        end: {
          line: 209,
          column: 57
        }
      },
      "61": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 92
        }
      },
      "62": {
        start: {
          line: 212,
          column: 21
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "63": {
        start: {
          line: 212,
          column: 41
        },
        end: {
          line: 212,
          column: 60
        }
      },
      "64": {
        start: {
          line: 213,
          column: 26
        },
        end: {
          line: 213,
          column: 54
        }
      },
      "65": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 54
        }
      },
      "66": {
        start: {
          line: 215,
          column: 28
        },
        end: {
          line: 215,
          column: 62
        }
      },
      "67": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 45
        }
      },
      "68": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 49
        }
      },
      "69": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "70": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 239,
          column: 11
        }
      },
      "71": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 71
        }
      },
      "72": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 247,
          column: 11
        }
      },
      "73": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 273,
          column: 3
        }
      },
      "74": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 272,
          column: 5
        }
      },
      "75": {
        start: {
          line: 253,
          column: 27
        },
        end: {
          line: 253,
          column: 37
        }
      },
      "76": {
        start: {
          line: 254,
          column: 43
        },
        end: {
          line: 254,
          column: 52
        }
      },
      "77": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 73
        }
      },
      "78": {
        start: {
          line: 256,
          column: 28
        },
        end: {
          line: 256,
          column: 58
        }
      },
      "79": {
        start: {
          line: 257,
          column: 37
        },
        end: {
          line: 257,
          column: 102
        }
      },
      "80": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "81": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 68
        }
      },
      "82": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "83": {
        start: {
          line: 275,
          column: 0
        },
        end: {
          line: 291,
          column: 3
        }
      },
      "84": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 290,
          column: 5
        }
      },
      "85": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 60
        }
      },
      "86": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "87": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 70
        }
      },
      "88": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "89": {
        start: {
          line: 292,
          column: 0
        },
        end: {
          line: 292,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 92,
            column: 20
          },
          end: {
            line: 92,
            column: 21
          }
        },
        loc: {
          start: {
            line: 92,
            column: 40
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 92
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 96,
            column: 45
          },
          end: {
            line: 96,
            column: 46
          }
        },
        loc: {
          start: {
            line: 96,
            column: 53
          },
          end: {
            line: 96,
            column: 66
          }
        },
        line: 96
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 99,
            column: 49
          },
          end: {
            line: 99,
            column: 50
          }
        },
        loc: {
          start: {
            line: 99,
            column: 57
          },
          end: {
            line: 99,
            column: 83
          }
        },
        line: 99
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 102,
            column: 49
          },
          end: {
            line: 102,
            column: 50
          }
        },
        loc: {
          start: {
            line: 102,
            column: 57
          },
          end: {
            line: 102,
            column: 87
          }
        },
        line: 102
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 49
          },
          end: {
            line: 105,
            column: 50
          }
        },
        loc: {
          start: {
            line: 105,
            column: 57
          },
          end: {
            line: 105,
            column: 88
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 49
          },
          end: {
            line: 108,
            column: 50
          }
        },
        loc: {
          start: {
            line: 108,
            column: 57
          },
          end: {
            line: 108,
            column: 88
          }
        },
        line: 108
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 128,
            column: 23
          },
          end: {
            line: 128,
            column: 24
          }
        },
        loc: {
          start: {
            line: 128,
            column: 43
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 128
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 36
          },
          end: {
            line: 132,
            column: 37
          }
        },
        loc: {
          start: {
            line: 132,
            column: 41
          },
          end: {
            line: 132,
            column: 56
          }
        },
        line: 132
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 30
          },
          end: {
            line: 154,
            column: 31
          }
        },
        loc: {
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 204,
            column: 1
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 37
          }
        },
        loc: {
          start: {
            line: 159,
            column: 41
          },
          end: {
            line: 159,
            column: 56
          }
        },
        line: 159
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 206,
            column: 45
          }
        },
        loc: {
          start: {
            line: 206,
            column: 64
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 206
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 212,
            column: 36
          },
          end: {
            line: 212,
            column: 37
          }
        },
        loc: {
          start: {
            line: 212,
            column: 41
          },
          end: {
            line: 212,
            column: 60
          }
        },
        line: 212
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 251,
            column: 36
          }
        },
        loc: {
          start: {
            line: 251,
            column: 55
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 251
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 275,
            column: 29
          },
          end: {
            line: 275,
            column: 30
          }
        },
        loc: {
          start: {
            line: 275,
            column: 49
          },
          end: {
            line: 291,
            column: 1
          }
        },
        line: 275
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "1": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 20
          }
        }, {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 98,
            column: 42
          }
        }],
        line: 98
      },
      "2": {
        loc: {
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "3": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "4": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "5": {
        loc: {
          start: {
            line: 123,
            column: 19
          },
          end: {
            line: 123,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 57
          }
        }, {
          start: {
            line: 123,
            column: 60
          },
          end: {
            line: 123,
            column: 75
          }
        }],
        line: 123
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 149,
            column: 19
          },
          end: {
            line: 149,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 149,
            column: 57
          }
        }, {
          start: {
            line: 149,
            column: 60
          },
          end: {
            line: 149,
            column: 75
          }
        }],
        line: 149
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 165,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "10": {
        loc: {
          start: {
            line: 201,
            column: 19
          },
          end: {
            line: 201,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 44
          },
          end: {
            line: 201,
            column: 57
          }
        }, {
          start: {
            line: 201,
            column: 60
          },
          end: {
            line: 201,
            column: 75
          }
        }],
        line: 201
      },
      "11": {
        loc: {
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 49
          }
        }, {
          start: {
            line: 214,
            column: 53
          },
          end: {
            line: 214,
            column: 54
          }
        }],
        line: 214
      },
      "12": {
        loc: {
          start: {
            line: 246,
            column: 19
          },
          end: {
            line: 246,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 44
          },
          end: {
            line: 246,
            column: 57
          }
        }, {
          start: {
            line: 246,
            column: 60
          },
          end: {
            line: 246,
            column: 75
          }
        }],
        line: 246
      },
      "13": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 254,
            column: 24
          },
          end: {
            line: 254,
            column: 26
          }
        }],
        line: 254
      },
      "14": {
        loc: {
          start: {
            line: 254,
            column: 28
          },
          end: {
            line: 254,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 254,
            column: 37
          },
          end: {
            line: 254,
            column: 38
          }
        }],
        line: 254
      },
      "15": {
        loc: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 52
          }
        }, {
          start: {
            line: 256,
            column: 56
          },
          end: {
            line: 256,
            column: 58
          }
        }],
        line: 256
      },
      "16": {
        loc: {
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 270,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 270,
            column: 44
          },
          end: {
            line: 270,
            column: 57
          }
        }, {
          start: {
            line: 270,
            column: 60
          },
          end: {
            line: 270,
            column: 75
          }
        }],
        line: 270
      },
      "17": {
        loc: {
          start: {
            line: 288,
            column: 19
          },
          end: {
            line: 288,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 44
          },
          end: {
            line: 288,
            column: 57
          }
        }, {
          start: {
            line: 288,
            column: 60
          },
          end: {
            line: 288,
            column: 75
          }
        }],
        line: 288
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09ec46b7a462a9e52cece335cd2beec5e45f4e5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a8g0rpxm1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a8g0rpxm1();
cov_1a8g0rpxm1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[1]++, require("express"));
const logger_1 =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[2]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[3]++, (0, express_1.Router)());
// Mock games data
const mockGames =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[4]++, [{
  id: 'racing-1',
  name: 'HaloBuzz Racing',
  description: 'High-speed racing through futuristic tracks',
  category: 'arcade',
  difficulty: 'medium',
  entryFee: 10,
  rewardMultiplier: 2.5,
  maxPlayers: 1,
  estimatedDuration: 120,
  // seconds
  thumbnail: 'https://picsum.photos/300/200?random=1',
  isActive: true,
  features: ['leaderboards', 'achievements', 'power-ups'],
  instructions: 'Use arrow keys to steer, spacebar to boost. Avoid obstacles and collect coins!',
  minLevel: 1,
  maxLevel: 100,
  tags: ['racing', 'speed', 'adventure']
}, {
  id: 'puzzle-1',
  name: 'Puzzle Master',
  description: 'Solve challenging puzzles to earn rewards',
  category: 'puzzle',
  difficulty: 'easy',
  entryFee: 5,
  rewardMultiplier: 1.8,
  maxPlayers: 1,
  estimatedDuration: 180,
  thumbnail: 'https://picsum.photos/300/200?random=2',
  isActive: true,
  features: ['hints', 'time-bonus', 'streak-multiplier'],
  instructions: 'Match the colored blocks to clear the board. Complete levels to earn coins!',
  minLevel: 1,
  maxLevel: 50,
  tags: ['puzzle', 'strategy', 'brain']
}, {
  id: 'battle-1',
  name: 'Battle Arena',
  description: 'Epic battles in the ultimate fighting arena',
  category: 'action',
  difficulty: 'hard',
  entryFee: 25,
  rewardMultiplier: 4.0,
  maxPlayers: 4,
  estimatedDuration: 300,
  thumbnail: 'https://picsum.photos/300/200?random=3',
  isActive: true,
  features: ['multiplayer', 'tournaments', 'rankings'],
  instructions: 'Fight against other players using special moves and combos. Last player standing wins!',
  minLevel: 5,
  maxLevel: 100,
  tags: ['battle', 'multiplayer', 'combat']
}]);
// Mock user coins data
const mockUserCoins =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[5]++, {
  balance: 150,
  totalEarned: 500,
  totalSpent: 350,
  recentTransactions: [{
    id: '1',
    type: 'earn',
    amount: 50,
    description: 'Game completion bonus',
    timestamp: new Date().toISOString()
  }, {
    id: '2',
    type: 'spend',
    amount: 10,
    description: 'Racing game entry',
    timestamp: new Date().toISOString()
  }]
});
// Mock leaderboard data
const mockLeaderboards =
/* istanbul ignore next */
(cov_1a8g0rpxm1().s[6]++, {
  'racing-1': [{
    rank: 1,
    username: 'SpeedDemon',
    score: 15000,
    coinsEarned: 375,
    timestamp: new Date().toISOString()
  }, {
    rank: 2,
    username: 'RacingPro',
    score: 14200,
    coinsEarned: 355,
    timestamp: new Date().toISOString()
  }, {
    rank: 3,
    username: 'FastLane',
    score: 13800,
    coinsEarned: 345,
    timestamp: new Date().toISOString()
  }],
  'puzzle-1': [{
    rank: 1,
    username: 'BrainMaster',
    score: 2500,
    coinsEarned: 45,
    timestamp: new Date().toISOString()
  }, {
    rank: 2,
    username: 'PuzzleSolver',
    score: 2300,
    coinsEarned: 41,
    timestamp: new Date().toISOString()
  }, {
    rank: 3,
    username: 'LogicKing',
    score: 2100,
    coinsEarned: 38,
    timestamp: new Date().toISOString()
  }],
  'battle-1': [{
    rank: 1,
    username: 'ArenaChamp',
    score: 5000,
    coinsEarned: 200,
    timestamp: new Date().toISOString()
  }, {
    rank: 2,
    username: 'FightMaster',
    score: 4800,
    coinsEarned: 192,
    timestamp: new Date().toISOString()
  }, {
    rank: 3,
    username: 'CombatKing',
    score: 4600,
    coinsEarned: 184,
    timestamp: new Date().toISOString()
  }]
});
// GET /games-enhanced/list - Get all available games
/* istanbul ignore next */
cov_1a8g0rpxm1().s[7]++;
router.get('/list', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[0]++;
  cov_1a8g0rpxm1().s[8]++;
  try {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[9]++;
    logger_1.logger.info('Fetching enhanced games list');
    const {
      category,
      difficulty,
      minFee,
      maxFee
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[10]++, req.query);
    let filteredGames =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[11]++, mockGames.filter(game => {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().f[1]++;
      cov_1a8g0rpxm1().s[12]++;
      return game.isActive;
    }));
    // Apply filters
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[1][0]++, category) &&
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[1][1]++, category !== 'all')) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[0][0]++;
      cov_1a8g0rpxm1().s[14]++;
      filteredGames = filteredGames.filter(game => {
        /* istanbul ignore next */
        cov_1a8g0rpxm1().f[2]++;
        cov_1a8g0rpxm1().s[15]++;
        return game.category === category;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[0][1]++;
    }
    cov_1a8g0rpxm1().s[16]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[2][0]++;
      cov_1a8g0rpxm1().s[17]++;
      filteredGames = filteredGames.filter(game => {
        /* istanbul ignore next */
        cov_1a8g0rpxm1().f[3]++;
        cov_1a8g0rpxm1().s[18]++;
        return game.difficulty === difficulty;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[2][1]++;
    }
    cov_1a8g0rpxm1().s[19]++;
    if (minFee) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[3][0]++;
      cov_1a8g0rpxm1().s[20]++;
      filteredGames = filteredGames.filter(game => {
        /* istanbul ignore next */
        cov_1a8g0rpxm1().f[4]++;
        cov_1a8g0rpxm1().s[21]++;
        return game.entryFee >= Number(minFee);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[3][1]++;
    }
    cov_1a8g0rpxm1().s[22]++;
    if (maxFee) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[4][0]++;
      cov_1a8g0rpxm1().s[23]++;
      filteredGames = filteredGames.filter(game => {
        /* istanbul ignore next */
        cov_1a8g0rpxm1().f[5]++;
        cov_1a8g0rpxm1().s[24]++;
        return game.entryFee <= Number(maxFee);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[4][1]++;
    }
    cov_1a8g0rpxm1().s[25]++;
    res.json({
      success: true,
      games: filteredGames,
      total: filteredGames.length,
      categories: ['all', 'arcade', 'puzzle', 'action', 'strategy', 'sports'],
      difficulties: ['easy', 'medium', 'hard']
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[26]++;
    logger_1.logger.error('Error fetching games list:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[27]++;
    res.status(500).json({
      success: false,
      message: 'Failed to fetch games list',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[5][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[5][1]++, 'Unknown error')
    });
  }
});
// GET /games-enhanced/:gameId - Get specific game details
/* istanbul ignore next */
cov_1a8g0rpxm1().s[28]++;
router.get('/:gameId', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[6]++;
  cov_1a8g0rpxm1().s[29]++;
  try {
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[30]++, req.params);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[31]++;
    logger_1.logger.info(`Fetching game details for: ${gameId}`);
    const game =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[32]++, mockGames.find(g => {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().f[7]++;
      cov_1a8g0rpxm1().s[33]++;
      return g.id === gameId;
    }));
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[34]++;
    if (!game) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[6][0]++;
      cov_1a8g0rpxm1().s[35]++;
      return res.status(404).json({
        success: false,
        message: 'Game not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[6][1]++;
    }
    cov_1a8g0rpxm1().s[36]++;
    res.json({
      success: true,
      game
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[37]++;
    logger_1.logger.error('Error fetching game details:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[38]++;
    res.status(500).json({
      success: false,
      message: 'Failed to fetch game details',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[7][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[7][1]++, 'Unknown error')
    });
  }
});
// POST /games-enhanced/:gameId/start - Start a game session
/* istanbul ignore next */
cov_1a8g0rpxm1().s[39]++;
router.post('/:gameId/start', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[8]++;
  cov_1a8g0rpxm1().s[40]++;
  try {
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[41]++, req.params);
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[42]++, req.body);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[43]++;
    logger_1.logger.info(`Starting game session for game: ${gameId}, user: ${userId}`);
    const game =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[44]++, mockGames.find(g => {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().f[9]++;
      cov_1a8g0rpxm1().s[45]++;
      return g.id === gameId;
    }));
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[46]++;
    if (!game) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[8][0]++;
      cov_1a8g0rpxm1().s[47]++;
      return res.status(404).json({
        success: false,
        message: 'Game not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[8][1]++;
    }
    // Check if user has enough coins
    cov_1a8g0rpxm1().s[48]++;
    if (mockUserCoins.balance < game.entryFee) {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().b[9][0]++;
      cov_1a8g0rpxm1().s[49]++;
      return res.status(400).json({
        success: false,
        message: 'Insufficient coins',
        required: game.entryFee,
        available: mockUserCoins.balance
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a8g0rpxm1().b[9][1]++;
    }
    // Deduct entry fee
    cov_1a8g0rpxm1().s[50]++;
    mockUserCoins.balance -= game.entryFee;
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[51]++;
    mockUserCoins.totalSpent += game.entryFee;
    // Create game session
    const sessionId =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[52]++, `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const session =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[53]++, {
      id: sessionId,
      gameId,
      userId,
      startTime: new Date().toISOString(),
      entryFee: game.entryFee,
      status: 'active',
      score: 0,
      coinsEarned: 0
    });
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[54]++;
    res.json({
      success: true,
      session,
      coinsBalance: mockUserCoins.balance
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[55]++;
    logger_1.logger.error('Error starting game session:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[56]++;
    res.status(500).json({
      success: false,
      message: 'Failed to start game session',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[10][1]++, 'Unknown error')
    });
  }
});
// POST /games-enhanced/session/:sessionId/complete - Complete a game session
/* istanbul ignore next */
cov_1a8g0rpxm1().s[57]++;
router.post('/session/:sessionId/complete', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[10]++;
  cov_1a8g0rpxm1().s[58]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[59]++, req.params);
    const {
      finalScore,
      isWon,
      timeSpent
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[60]++, req.body);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[61]++;
    logger_1.logger.info(`Completing game session: ${sessionId}, score: ${finalScore}`);
    // Calculate coins earned based on score and game multiplier
    const game =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[62]++, mockGames.find(g => {
      /* istanbul ignore next */
      cov_1a8g0rpxm1().f[11]++;
      cov_1a8g0rpxm1().s[63]++;
      return g.id === 'racing-1';
    })); // Simplified for demo
    const baseCoins =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[64]++, Math.floor(finalScore / 100));
    const multiplier =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[65]++,
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[11][0]++, game?.rewardMultiplier) ||
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[11][1]++, 1));
    const coinsEarned =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[66]++, Math.floor(baseCoins * multiplier));
    // Add coins to user balance
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[67]++;
    mockUserCoins.balance += coinsEarned;
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[68]++;
    mockUserCoins.totalEarned += coinsEarned;
    // Add transaction record
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[69]++;
    mockUserCoins.recentTransactions.unshift({
      id: `tx_${Date.now()}`,
      type: 'earn',
      amount: coinsEarned,
      description: `Game completion: ${coinsEarned} coins earned`,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[70]++;
    res.json({
      success: true,
      session: {
        id: sessionId,
        finalScore,
        coinsEarned,
        isWon,
        timeSpent,
        completedAt: new Date().toISOString()
      },
      coinsBalance: mockUserCoins.balance,
      totalEarned: mockUserCoins.totalEarned
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[71]++;
    logger_1.logger.error('Error completing game session:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[72]++;
    res.status(500).json({
      success: false,
      message: 'Failed to complete game session',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[12][1]++, 'Unknown error')
    });
  }
});
// GET /games-enhanced/:gameId/leaderboard - Get game leaderboard
/* istanbul ignore next */
cov_1a8g0rpxm1().s[73]++;
router.get('/:gameId/leaderboard', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[12]++;
  cov_1a8g0rpxm1().s[74]++;
  try {
    const {
      gameId
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[75]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[13][0]++, 10),
      offset =
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[14][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[76]++, req.query);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[77]++;
    logger_1.logger.info(`Fetching leaderboard for game: ${gameId}`);
    const leaderboard =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[78]++,
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[15][0]++, mockLeaderboards[gameId]) ||
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().b[15][1]++, []));
    const paginatedLeaderboard =
    /* istanbul ignore next */
    (cov_1a8g0rpxm1().s[79]++, leaderboard.slice(Number(offset), Number(offset) + Number(limit)));
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[80]++;
    res.json({
      success: true,
      leaderboard: paginatedLeaderboard,
      total: leaderboard.length,
      gameId
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[81]++;
    logger_1.logger.error('Error fetching leaderboard:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[82]++;
    res.status(500).json({
      success: false,
      message: 'Failed to fetch leaderboard',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[16][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[16][1]++, 'Unknown error')
    });
  }
});
// GET /coins/balance - Get user coins balance
/* istanbul ignore next */
cov_1a8g0rpxm1().s[83]++;
router.get('/coins/balance', async (req, res) => {
  /* istanbul ignore next */
  cov_1a8g0rpxm1().f[13]++;
  cov_1a8g0rpxm1().s[84]++;
  try {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[85]++;
    logger_1.logger.info('Fetching user coins balance');
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[86]++;
    res.json({
      success: true,
      ...mockUserCoins
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[87]++;
    logger_1.logger.error('Error fetching coins balance:', error);
    /* istanbul ignore next */
    cov_1a8g0rpxm1().s[88]++;
    res.status(500).json({
      success: false,
      message: 'Failed to fetch coins balance',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a8g0rpxm1().b[17][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1a8g0rpxm1().s[89]++;
exports.default = router;