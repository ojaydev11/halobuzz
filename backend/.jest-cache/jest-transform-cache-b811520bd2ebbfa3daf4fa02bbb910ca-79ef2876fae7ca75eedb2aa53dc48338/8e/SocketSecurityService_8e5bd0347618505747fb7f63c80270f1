c1c0fc2f0ff95b43a1de7fba5a883736
"use strict";

/* istanbul ignore next */
function cov_v1kdiwuow() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\SocketSecurityService.ts";
  var hash = "3a388294d1c275f300245bfa461f11ce040c2ac2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\SocketSecurityService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 71
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 42
        }
      },
      "5": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 30
        }
      },
      "6": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "7": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 73
        }
      },
      "10": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 47
        }
      },
      "13": {
        start: {
          line: 32,
          column: 39
        },
        end: {
          line: 32,
          column: 70
        }
      },
      "14": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "15": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 38,
          column: 18
        }
      },
      "16": {
        start: {
          line: 41,
          column: 36
        },
        end: {
          line: 41,
          column: 67
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "18": {
        start: {
          line: 43,
          column: 48
        },
        end: {
          line: 43,
          column: 98
        }
      },
      "19": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "20": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "22": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 58,
          column: 18
        }
      },
      "23": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 65
        }
      },
      "24": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 64
        }
      },
      "26": {
        start: {
          line: 71,
          column: 19
        },
        end: {
          line: 71,
          column: 43
        }
      },
      "27": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 73,
          column: 66
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 59
        }
      },
      "29": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "30": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 49
        }
      },
      "31": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 85
        }
      },
      "32": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "33": {
        start: {
          line: 93,
          column: 28
        },
        end: {
          line: 93,
          column: 59
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "35": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "36": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "37": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 65
        }
      },
      "38": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 104,
          column: 18
        }
      },
      "39": {
        start: {
          line: 107,
          column: 41
        },
        end: {
          line: 107,
          column: 85
        }
      },
      "40": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "41": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 65
        }
      },
      "42": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 114,
          column: 18
        }
      },
      "43": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 34
        }
      },
      "44": {
        start: {
          line: 118,
          column: 33
        },
        end: {
          line: 118,
          column: 64
        }
      },
      "45": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "46": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "47": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 71
        }
      },
      "48": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 126,
          column: 22
        }
      },
      "49": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 41
        }
      },
      "50": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 65
        }
      },
      "51": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 64
        }
      },
      "52": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 64
        }
      },
      "53": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "54": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "55": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 35
        }
      },
      "56": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 47
        }
      },
      "57": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "58": {
        start: {
          line: 155,
          column: 28
        },
        end: {
          line: 155,
          column: 59
        }
      },
      "59": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "60": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 71
        }
      },
      "61": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "62": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 59
        }
      },
      "63": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 166,
          column: 18
        }
      },
      "64": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 65
        }
      },
      "65": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 66
        }
      },
      "66": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 64
        }
      },
      "67": {
        start: {
          line: 179,
          column: 24
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "68": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "69": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 40
        }
      },
      "70": {
        start: {
          line: 188,
          column: 24
        },
        end: {
          line: 188,
          column: 55
        }
      },
      "71": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "72": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 43
        }
      },
      "73": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 55
        }
      },
      "74": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "75": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 33
        }
      },
      "76": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 126
        }
      },
      "77": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 207,
          column: 22
        }
      },
      "78": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 55
        }
      },
      "79": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "80": {
        start: {
          line: 216,
          column: 23
        },
        end: {
          line: 216,
          column: 47
        }
      },
      "81": {
        start: {
          line: 218,
          column: 39
        },
        end: {
          line: 218,
          column: 70
        }
      },
      "82": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "83": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 67
        }
      },
      "84": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 47
        }
      },
      "85": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 89
        }
      },
      "86": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 234,
          column: 22
        }
      },
      "87": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 41
        }
      },
      "88": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 69
        }
      },
      "89": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 57
        }
      },
      "90": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 56
        }
      },
      "91": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 54
        }
      },
      "92": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 50
        }
      },
      "93": {
        start: {
          line: 271,
          column: 24
        },
        end: {
          line: 271,
          column: 55
        }
      },
      "94": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "95": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 35
        }
      },
      "96": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 24
        }
      },
      "97": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 21
        }
      },
      "98": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "99": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 22
        }
      },
      "100": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 68
        }
      },
      "101": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 22
        }
      },
      "102": {
        start: {
          line: 293,
          column: 0
        },
        end: {
          line: 293,
          column: 54
        }
      },
      "103": {
        start: {
          line: 294,
          column: 0
        },
        end: {
          line: 294,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 25
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 37
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 39
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 50
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 26
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 143
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 40
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 153
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 178,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        loc: {
          start: {
            line: 178,
            column: 37
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 178
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 38
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 187
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 43
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 196
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 40
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 213
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 230
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 239
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 28
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 252
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 23
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 258
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 28
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 264
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 28
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 270
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 38
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 281
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 32,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 32,
            column: 65
          }
        }, {
          start: {
            line: 32,
            column: 69
          },
          end: {
            line: 32,
            column: 70
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 31
          }
        }, {
          start: {
            line: 53,
            column: 35
          },
          end: {
            line: 53,
            column: 65
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 35
          },
          end: {
            line: 73,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 35
          },
          end: {
            line: 73,
            column: 61
          }
        }, {
          start: {
            line: 73,
            column: 65
          },
          end: {
            line: 73,
            column: 66
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 83,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 83,
            column: 67
          }
        }, {
          start: {
            line: 83,
            column: 71
          },
          end: {
            line: 83,
            column: 72
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "11": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: 129,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 16
          },
          end: {
            line: 127,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "16": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "20": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "21": {
        loc: {
          start: {
            line: 218,
            column: 39
          },
          end: {
            line: 218,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 39
          },
          end: {
            line: 218,
            column: 65
          }
        }, {
          start: {
            line: 218,
            column: 69
          },
          end: {
            line: 218,
            column: 70
          }
        }],
        line: 218
      },
      "22": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "23": {
        loc: {
          start: {
            line: 231,
            column: 15
          },
          end: {
            line: 234,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 15
          },
          end: {
            line: 231,
            column: 39
          }
        }, {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 55
          }
        }, {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 233,
            column: 49
          }
        }, {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 21
          }
        }],
        line: 231
      },
      "24": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0],
      "24": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3a388294d1c275f300245bfa461f11ce040c2ac2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_v1kdiwuow = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_v1kdiwuow();
cov_v1kdiwuow().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_v1kdiwuow().s[1]++;
exports.socketSecurityService = exports.SocketSecurityService = void 0;
const redis_1 =
/* istanbul ignore next */
(cov_v1kdiwuow().s[2]++, require("../config/redis"));
const logger_1 =
/* istanbul ignore next */
(cov_v1kdiwuow().s[3]++, require("../config/logger"));
const logger =
/* istanbul ignore next */
(cov_v1kdiwuow().s[4]++, (0, logger_1.setupLogger)());
class SocketSecurityService {
  static instance;
  activeSessions =
  /* istanbul ignore next */
  (cov_v1kdiwuow().s[5]++, new Map());
  ipConnections =
  /* istanbul ignore next */
  (cov_v1kdiwuow().s[6]++, new Map());
  defaultLimits =
  /* istanbul ignore next */
  (cov_v1kdiwuow().s[7]++, {
    maxMessagesPerMinute: 30,
    maxConnectionsPerIP: 5,
    maxRoomsPerUser: 10,
    messageCooldownMs: 1000,
    // 1 second
    connectionCooldownMs: 5000,
    // 5 seconds
    maxMessageLength: 500
  });
  static getInstance() {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[0]++;
    cov_v1kdiwuow().s[8]++;
    if (!SocketSecurityService.instance) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[0][0]++;
      cov_v1kdiwuow().s[9]++;
      SocketSecurityService.instance = new SocketSecurityService();
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[0][1]++;
    }
    cov_v1kdiwuow().s[10]++;
    return SocketSecurityService.instance;
  }
  /**
   * Check if a new connection is allowed
   */
  async canConnect(socket, userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[1]++;
    cov_v1kdiwuow().s[11]++;
    try {
      const ip =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[12]++, this.getClientIP(socket));
      // Check IP connection limit
      const currentConnections =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[13]++,
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[1][0]++, this.ipConnections.get(ip)) ||
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[1][1]++, 0));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[14]++;
      if (currentConnections >= this.defaultLimits.maxConnectionsPerIP) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[2][0]++;
        cov_v1kdiwuow().s[15]++;
        return {
          allowed: false,
          reason: 'Too many connections from this IP',
          limits: this.defaultLimits
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[2][1]++;
      }
      // Check if user already has an active session
      const existingSession =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[16]++, this.activeSessions.get(userId));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[17]++;
      if (existingSession) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[3][0]++;
        const timeSinceLastConnection =
        /* istanbul ignore next */
        (cov_v1kdiwuow().s[18]++, Date.now() - existingSession.connectedAt.getTime());
        /* istanbul ignore next */
        cov_v1kdiwuow().s[19]++;
        if (timeSinceLastConnection < this.defaultLimits.connectionCooldownMs) {
          /* istanbul ignore next */
          cov_v1kdiwuow().b[4][0]++;
          cov_v1kdiwuow().s[20]++;
          return {
            allowed: false,
            reason: 'Connection cooldown active',
            limits: this.defaultLimits
          };
        } else
        /* istanbul ignore next */
        {
          cov_v1kdiwuow().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[3][1]++;
      }
      // Check for violations
      cov_v1kdiwuow().s[21]++;
      if (
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[6][0]++, existingSession) &&
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[6][1]++, existingSession.violations > 3)) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[5][0]++;
        cov_v1kdiwuow().s[22]++;
        return {
          allowed: false,
          reason: 'Too many violations. Connection blocked.',
          limits: this.defaultLimits
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[5][1]++;
      }
      cov_v1kdiwuow().s[23]++;
      return {
        allowed: true,
        limits: this.defaultLimits
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_v1kdiwuow().s[24]++;
      logger.error('Socket connection check failed:', error);
      /* istanbul ignore next */
      cov_v1kdiwuow().s[25]++;
      return {
        allowed: false,
        reason: 'Internal error'
      };
    }
  }
  /**
   * Register a new socket connection
   */
  registerConnection(socket, userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[2]++;
    const ip =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[26]++, this.getClientIP(socket));
    // Update IP connection count
    const currentConnections =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[27]++,
    /* istanbul ignore next */
    (cov_v1kdiwuow().b[7][0]++, this.ipConnections.get(ip)) ||
    /* istanbul ignore next */
    (cov_v1kdiwuow().b[7][1]++, 0));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[28]++;
    this.ipConnections.set(ip, currentConnections + 1);
    // Create or update session
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[29]++, {
      userId,
      ip,
      connectedAt: new Date(),
      lastMessageAt: new Date(),
      messageCount: 0,
      rooms: new Set(),
      violations:
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[8][0]++, this.activeSessions.get(userId)?.violations) ||
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[8][1]++, 0)
    });
    /* istanbul ignore next */
    cov_v1kdiwuow().s[30]++;
    this.activeSessions.set(userId, session);
    /* istanbul ignore next */
    cov_v1kdiwuow().s[31]++;
    logger.info(`Socket connection registered for user ${userId} from IP ${ip}`);
  }
  /**
   * Check if a message can be sent
   */
  async canSendMessage(socket, userId, message) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[3]++;
    cov_v1kdiwuow().s[32]++;
    try {
      const session =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[33]++, this.activeSessions.get(userId));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[34]++;
      if (!session) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[9][0]++;
        cov_v1kdiwuow().s[35]++;
        return {
          allowed: false,
          reason: 'No active session'
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[9][1]++;
      }
      // Check message length
      cov_v1kdiwuow().s[36]++;
      if (message.length > this.defaultLimits.maxMessageLength) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[10][0]++;
        cov_v1kdiwuow().s[37]++;
        this.recordViolation(userId, 'message_too_long');
        /* istanbul ignore next */
        cov_v1kdiwuow().s[38]++;
        return {
          allowed: false,
          reason: 'Message too long',
          limits: this.defaultLimits
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[10][1]++;
      }
      // Check message cooldown
      const timeSinceLastMessage =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[39]++, Date.now() - session.lastMessageAt.getTime());
      /* istanbul ignore next */
      cov_v1kdiwuow().s[40]++;
      if (timeSinceLastMessage < this.defaultLimits.messageCooldownMs) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[11][0]++;
        cov_v1kdiwuow().s[41]++;
        this.recordViolation(userId, 'message_cooldown');
        /* istanbul ignore next */
        cov_v1kdiwuow().s[42]++;
        return {
          allowed: false,
          reason: 'Message cooldown active',
          limits: this.defaultLimits
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[11][1]++;
      }
      // Check message rate limit
      const now =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[43]++, new Date());
      const oneMinuteAgo =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[44]++, new Date(now.getTime() - 60000));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[45]++;
      if (session.lastMessageAt > oneMinuteAgo) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[12][0]++;
        cov_v1kdiwuow().s[46]++;
        if (session.messageCount >= this.defaultLimits.maxMessagesPerMinute) {
          /* istanbul ignore next */
          cov_v1kdiwuow().b[13][0]++;
          cov_v1kdiwuow().s[47]++;
          this.recordViolation(userId, 'message_rate_limit');
          /* istanbul ignore next */
          cov_v1kdiwuow().s[48]++;
          return {
            allowed: false,
            reason: 'Message rate limit exceeded',
            limits: this.defaultLimits
          };
        } else
        /* istanbul ignore next */
        {
          cov_v1kdiwuow().b[13][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[12][1]++;
        cov_v1kdiwuow().s[49]++;
        // Reset message count if more than a minute has passed
        session.messageCount = 0;
      }
      /* istanbul ignore next */
      cov_v1kdiwuow().s[50]++;
      return {
        allowed: true,
        limits: this.defaultLimits
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_v1kdiwuow().s[51]++;
      logger.error('Socket message check failed:', error);
      /* istanbul ignore next */
      cov_v1kdiwuow().s[52]++;
      return {
        allowed: false,
        reason: 'Internal error'
      };
    }
  }
  /**
   * Record a message being sent
   */
  recordMessage(userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[4]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[53]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[54]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[14][0]++;
      cov_v1kdiwuow().s[55]++;
      session.messageCount++;
      /* istanbul ignore next */
      cov_v1kdiwuow().s[56]++;
      session.lastMessageAt = new Date();
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[14][1]++;
    }
  }
  /**
   * Check if user can join a room
   */
  async canJoinRoom(userId, roomName) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[5]++;
    cov_v1kdiwuow().s[57]++;
    try {
      const session =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[58]++, this.activeSessions.get(userId));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[59]++;
      if (!session) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[15][0]++;
        cov_v1kdiwuow().s[60]++;
        return {
          allowed: false,
          reason: 'No active session'
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[15][1]++;
      }
      // Check room limit
      cov_v1kdiwuow().s[61]++;
      if (session.rooms.size >= this.defaultLimits.maxRoomsPerUser) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[16][0]++;
        cov_v1kdiwuow().s[62]++;
        this.recordViolation(userId, 'room_limit');
        /* istanbul ignore next */
        cov_v1kdiwuow().s[63]++;
        return {
          allowed: false,
          reason: 'Maximum rooms per user exceeded',
          limits: this.defaultLimits
        };
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[16][1]++;
      }
      cov_v1kdiwuow().s[64]++;
      return {
        allowed: true,
        limits: this.defaultLimits
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_v1kdiwuow().s[65]++;
      logger.error('Socket room join check failed:', error);
      /* istanbul ignore next */
      cov_v1kdiwuow().s[66]++;
      return {
        allowed: false,
        reason: 'Internal error'
      };
    }
  }
  /**
   * Record user joining a room
   */
  recordRoomJoin(userId, roomName) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[6]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[67]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[68]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[17][0]++;
      cov_v1kdiwuow().s[69]++;
      session.rooms.add(roomName);
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[17][1]++;
    }
  }
  /**
   * Record user leaving a room
   */
  recordRoomLeave(userId, roomName) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[7]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[70]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[71]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[18][0]++;
      cov_v1kdiwuow().s[72]++;
      session.rooms.delete(roomName);
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[18][1]++;
    }
  }
  /**
   * Record a security violation
   */
  recordViolation(userId, violationType) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[8]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[73]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[74]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[19][0]++;
      cov_v1kdiwuow().s[75]++;
      session.violations++;
      /* istanbul ignore next */
      cov_v1kdiwuow().s[76]++;
      logger.warn(`Socket security violation for user ${userId}: ${violationType} (violations: ${session.violations})`);
      // Store violation in Redis for persistence
      /* istanbul ignore next */
      cov_v1kdiwuow().s[77]++;
      (0, redis_1.setCache)(`socket_violation:${userId}:${Date.now()}`, {
        userId,
        violationType,
        timestamp: new Date(),
        ip: session.ip
      }, 86400); // 24 hours
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[19][1]++;
    }
  }
  /**
   * Handle socket disconnection
   */
  handleDisconnection(userId, socket) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[9]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[78]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[79]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[20][0]++;
      const ip =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[80]++, this.getClientIP(socket));
      // Update IP connection count
      const currentConnections =
      /* istanbul ignore next */
      (cov_v1kdiwuow().s[81]++,
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[21][0]++, this.ipConnections.get(ip)) ||
      /* istanbul ignore next */
      (cov_v1kdiwuow().b[21][1]++, 0));
      /* istanbul ignore next */
      cov_v1kdiwuow().s[82]++;
      if (currentConnections > 0) {
        /* istanbul ignore next */
        cov_v1kdiwuow().b[22][0]++;
        cov_v1kdiwuow().s[83]++;
        this.ipConnections.set(ip, currentConnections - 1);
      } else
      /* istanbul ignore next */
      {
        cov_v1kdiwuow().b[22][1]++;
      }
      // Remove session
      cov_v1kdiwuow().s[84]++;
      this.activeSessions.delete(userId);
      /* istanbul ignore next */
      cov_v1kdiwuow().s[85]++;
      logger.info(`Socket disconnection handled for user ${userId} from IP ${ip}`);
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[20][1]++;
    }
  }
  /**
   * Get client IP address
   */
  getClientIP(socket) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[10]++;
    cov_v1kdiwuow().s[86]++;
    return /* istanbul ignore next */(cov_v1kdiwuow().b[23][0]++, socket.handshake.address) ||
    /* istanbul ignore next */
    (cov_v1kdiwuow().b[23][1]++, socket.handshake.headers['x-forwarded-for']) ||
    /* istanbul ignore next */
    (cov_v1kdiwuow().b[23][2]++, socket.handshake.headers['x-real-ip']) ||
    /* istanbul ignore next */
    (cov_v1kdiwuow().b[23][3]++, 'unknown');
  }
  /**
   * Get socket limits
   */
  getLimits() {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[11]++;
    cov_v1kdiwuow().s[87]++;
    return {
      ...this.defaultLimits
    };
  }
  /**
   * Update socket limits (admin only)
   */
  updateLimits(newLimits) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[12]++;
    cov_v1kdiwuow().s[88]++;
    this.defaultLimits = {
      ...this.defaultLimits,
      ...newLimits
    };
    /* istanbul ignore next */
    cov_v1kdiwuow().s[89]++;
    logger.info('Socket limits updated:', newLimits);
  }
  /**
   * Get active sessions (admin only)
   */
  getActiveSessions() {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[13]++;
    cov_v1kdiwuow().s[90]++;
    return Array.from(this.activeSessions.values());
  }
  /**
   * Get IP connection counts (admin only)
   */
  getIPConnections() {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[14]++;
    cov_v1kdiwuow().s[91]++;
    return Object.fromEntries(this.ipConnections);
  }
  /**
   * Force disconnect a user (admin only)
   */
  forceDisconnect(userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[15]++;
    cov_v1kdiwuow().s[92]++;
    return this.activeSessions.delete(userId);
  }
  /**
   * Clear violations for a user (admin only)
   */
  clearViolations(userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[16]++;
    const session =
    /* istanbul ignore next */
    (cov_v1kdiwuow().s[93]++, this.activeSessions.get(userId));
    /* istanbul ignore next */
    cov_v1kdiwuow().s[94]++;
    if (session) {
      /* istanbul ignore next */
      cov_v1kdiwuow().b[24][0]++;
      cov_v1kdiwuow().s[95]++;
      session.violations = 0;
      /* istanbul ignore next */
      cov_v1kdiwuow().s[96]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_v1kdiwuow().b[24][1]++;
    }
    cov_v1kdiwuow().s[97]++;
    return false;
  }
  /**
   * Get violation history for a user
   */
  async getViolationHistory(userId) {
    /* istanbul ignore next */
    cov_v1kdiwuow().f[17]++;
    cov_v1kdiwuow().s[98]++;
    try {
      /* istanbul ignore next */
      cov_v1kdiwuow().s[99]++;
      // This would typically query Redis for stored violations
      // For now, return empty array
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_v1kdiwuow().s[100]++;
      logger.error('Failed to get violation history:', error);
      /* istanbul ignore next */
      cov_v1kdiwuow().s[101]++;
      return [];
    }
  }
}
/* istanbul ignore next */
cov_v1kdiwuow().s[102]++;
exports.SocketSecurityService = SocketSecurityService;
/* istanbul ignore next */
cov_v1kdiwuow().s[103]++;
exports.socketSecurityService = SocketSecurityService.getInstance();