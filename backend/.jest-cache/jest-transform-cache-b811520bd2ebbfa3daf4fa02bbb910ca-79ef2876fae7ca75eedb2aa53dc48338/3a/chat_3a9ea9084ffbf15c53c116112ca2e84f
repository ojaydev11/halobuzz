b80b888476b0aec1195bffaf17f14e1b
"use strict";

/* istanbul ignore next */
function cov_1vet5sy6q4() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\chat.ts";
  var hash = "d726daa6f7638a77c502226904692058c6a122ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\chat.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 46
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "8": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 11,
          column: 64
        }
      },
      "9": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "10": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 41
        }
      },
      "11": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 62,
          column: 3
        }
      },
      "12": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "13": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "14": {
        start: {
          line: 18,
          column: 47
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "15": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 59
        }
      },
      "16": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "17": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 153
        }
      },
      "18": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 150
        }
      },
      "19": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "20": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "21": {
        start: {
          line: 35,
          column: 51
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "23": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "24": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 167,
          column: 3
        }
      },
      "25": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "26": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "27": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "28": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "29": {
        start: {
          line: 81,
          column: 29
        },
        end: {
          line: 81,
          column: 39
        }
      },
      "30": {
        start: {
          line: 82,
          column: 52
        },
        end: {
          line: 82,
          column: 60
        }
      },
      "31": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 39
        }
      },
      "32": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "33": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 88,
          column: 15
        }
      },
      "34": {
        start: {
          line: 91,
          column: 21
        },
        end: {
          line: 91,
          column: 55
        }
      },
      "35": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "36": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "37": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 99,
          column: 71
        }
      },
      "38": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "39": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "40": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "41": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 110,
          column: 15
        }
      },
      "42": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "43": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "44": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 101
        }
      },
      "45": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "46": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 125,
          column: 15
        }
      },
      "47": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 140,
          column: 10
        }
      },
      "48": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 29
        }
      },
      "49": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "50": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 61
        }
      },
      "51": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "52": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 224,
          column: 3
        }
      },
      "53": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 223,
          column: 5
        }
      },
      "54": {
        start: {
          line: 171,
          column: 30
        },
        end: {
          line: 171,
          column: 40
        }
      },
      "55": {
        start: {
          line: 172,
          column: 23
        },
        end: {
          line: 172,
          column: 39
        }
      },
      "56": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "57": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "58": {
        start: {
          line: 180,
          column: 21
        },
        end: {
          line: 180,
          column: 55
        }
      },
      "59": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "60": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "61": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "62": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 192,
          column: 15
        }
      },
      "63": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 195,
          column: 67
        }
      },
      "64": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "65": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 200,
          column: 15
        }
      },
      "66": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "67": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "68": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 35
        }
      },
      "69": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 29
        }
      },
      "70": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "71": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 63
        }
      },
      "72": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "73": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 255,
          column: 3
        }
      },
      "74": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 254,
          column: 5
        }
      },
      "75": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 228,
          column: 39
        }
      },
      "76": {
        start: {
          line: 229,
          column: 31
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "77": {
        start: {
          line: 230,
          column: 25
        },
        end: {
          line: 230,
          column: 153
        }
      },
      "78": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 246,
          column: 11
        }
      },
      "79": {
        start: {
          line: 234,
          column: 51
        },
        end: {
          line: 244,
          column: 17
        }
      },
      "80": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 61
        }
      },
      "81": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "82": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "83": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 303,
          column: 5
        }
      },
      "84": {
        start: {
          line: 259,
          column: 30
        },
        end: {
          line: 259,
          column: 40
        }
      },
      "85": {
        start: {
          line: 260,
          column: 23
        },
        end: {
          line: 260,
          column: 39
        }
      },
      "86": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "87": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "88": {
        start: {
          line: 268,
          column: 21
        },
        end: {
          line: 268,
          column: 55
        }
      },
      "89": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "90": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 273,
          column: 15
        }
      },
      "91": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "92": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "93": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 283,
          column: 67
        }
      },
      "94": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "95": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 288,
          column: 15
        }
      },
      "96": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 295,
          column: 11
        }
      },
      "97": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 60
        }
      },
      "98": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "99": {
        start: {
          line: 306,
          column: 0
        },
        end: {
          line: 333,
          column: 3
        }
      },
      "100": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 332,
          column: 5
        }
      },
      "101": {
        start: {
          line: 308,
          column: 29
        },
        end: {
          line: 308,
          column: 39
        }
      },
      "102": {
        start: {
          line: 309,
          column: 59
        },
        end: {
          line: 313,
          column: 10
        }
      },
      "103": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 324,
          column: 11
        }
      },
      "104": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 63
        }
      },
      "105": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 331,
          column: 11
        }
      },
      "106": {
        start: {
          line: 336,
          column: 25
        },
        end: {
          line: 336,
          column: 34
        }
      },
      "107": {
        start: {
          line: 337,
          column: 21
        },
        end: {
          line: 337,
          column: 23
        }
      },
      "108": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 341,
          column: 5
        }
      },
      "109": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 32
        }
      },
      "110": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 342,
          column: 20
        }
      },
      "111": {
        start: {
          line: 344,
          column: 0
        },
        end: {
          line: 344,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 15,
            column: 26
          }
        },
        loc: {
          start: {
            line: 15,
            column: 45
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 40
          }
        },
        loc: {
          start: {
            line: 35,
            column: 51
          },
          end: {
            line: 45,
            column: 17
          }
        },
        line: 35
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 3
          },
          end: {
            line: 72,
            column: 4
          }
        },
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 169,
            column: 29
          },
          end: {
            line: 169,
            column: 30
          }
        },
        loc: {
          start: {
            line: 169,
            column: 49
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 169
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 226,
            column: 35
          }
        },
        loc: {
          start: {
            line: 226,
            column: 54
          },
          end: {
            line: 255,
            column: 1
          }
        },
        line: 226
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 234,
            column: 39
          },
          end: {
            line: 234,
            column: 40
          }
        },
        loc: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 244,
            column: 17
          }
        },
        line: 234
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 257,
            column: 31
          },
          end: {
            line: 257,
            column: 32
          }
        },
        loc: {
          start: {
            line: 257,
            column: 51
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 257
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 306,
            column: 31
          },
          end: {
            line: 306,
            column: 32
          }
        },
        loc: {
          start: {
            line: 306,
            column: 51
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 306
      },
      "9": {
        name: "extractMentions",
        decl: {
          start: {
            line: 335,
            column: 9
          },
          end: {
            line: 335,
            column: 24
          }
        },
        loc: {
          start: {
            line: 335,
            column: 34
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 335
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 18,
            column: 26
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 36
          }
        }],
        line: 18
      },
      "5": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: 24,
            column: 13
          },
          end: {
            line: 26,
            column: 9
          }
        }],
        line: 21
      },
      "6": {
        loc: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 32
          }
        }],
        line: 30
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 82,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 82,
            column: 38
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "13": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "14": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "17": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "18": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "19": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "20": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 48
          }
        }, {
          start: {
            line: 203,
            column: 52
          },
          end: {
            line: 203,
            column: 83
          }
        }],
        line: 203
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 229,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 24
          },
          end: {
            line: 229,
            column: 26
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "23": {
        loc: {
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "24": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "25": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d726daa6f7638a77c502226904692058c6a122ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vet5sy6q4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vet5sy6q4();
var __importDefault =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[0]++,
/* istanbul ignore next */
(cov_1vet5sy6q4().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1vet5sy6q4().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1vet5sy6q4().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[0]++;
  cov_1vet5sy6q4().s[1]++;
  return /* istanbul ignore next */(cov_1vet5sy6q4().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1vet5sy6q4().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1vet5sy6q4().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1vet5sy6q4().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1vet5sy6q4().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[4]++, require("express-validator"));
const Message_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[5]++, require("../models/Message"));
const User_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[6]++, require("../models/User"));
const LiveStream_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[7]++, require("../models/LiveStream"));
const ModerationQueue_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[8]++, require("../services/ModerationQueue"));
const logger_1 =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[9]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_1vet5sy6q4().s[10]++, express_1.default.Router());
// Get messages for a stream
/* istanbul ignore next */
cov_1vet5sy6q4().s[11]++;
router.get('/:streamId', async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[1]++;
  cov_1vet5sy6q4().s[12]++;
  try {
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[13]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[3][0]++, 50),
      page =
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[4][0]++, 1),
      type
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[14]++, req.query);
    const skip =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[15]++, (parseInt(page) - 1) * parseInt(limit));
    let messages;
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[16]++;
    if (type === 'gift') {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[5][0]++;
      cov_1vet5sy6q4().s[17]++;
      messages = await Message_1.Message.find({
        roomId: streamId,
        type: 'gift',
        isDeleted: false
      }).sort({
        createdAt: -1
      }).limit(parseInt(limit));
    } else {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[5][1]++;
      cov_1vet5sy6q4().s[18]++;
      messages = await Message_1.Message.find({
        roomId: streamId,
        isDeleted: false
      }).sort({
        createdAt: -1
      }).skip(skip).limit(parseInt(limit));
    }
    const total =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[19]++, await Message_1.Message.countDocuments({
      roomId: streamId,
      isDeleted: false,
      ...(
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[6][0]++, type) &&
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[6][1]++, {
        type
      }))
    }));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[20]++;
    res.json({
      success: true,
      data: {
        messages: messages.map(message => {
          /* istanbul ignore next */
          cov_1vet5sy6q4().f[2]++;
          cov_1vet5sy6q4().s[21]++;
          return {
            id: message._id,
            userId: message.userId,
            username: message.username,
            avatar: message.avatar,
            ogLevel: message.ogLevel,
            content: message.content,
            type: message.type,
            metadata: message.metadata,
            createdAt: message.createdAt
          };
        }),
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / parseInt(limit))
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[22]++;
    logger_1.logger.error('Get messages failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[23]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get messages'
    });
  }
});
// Send message
/* istanbul ignore next */
cov_1vet5sy6q4().s[24]++;
router.post('/:streamId/send', [(0, express_validator_1.body)('content').isLength({
  min: 1,
  max: 500
}).withMessage('Message must be 1-500 characters'), (0, express_validator_1.body)('type').optional().isIn(['text', 'emoji']).withMessage('Valid message type is required')], async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[3]++;
  cov_1vet5sy6q4().s[25]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[26]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[27]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[7][0]++;
      cov_1vet5sy6q4().s[28]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[7][1]++;
    }
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[29]++, req.params);
    const {
      content,
      type =
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[8][0]++, 'text'),
      replyTo
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[30]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[31]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[32]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[9][0]++;
      cov_1vet5sy6q4().s[33]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[9][1]++;
    }
    // Validate user
    const user =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[34]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[35]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[10][0]++;
      cov_1vet5sy6q4().s[36]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[10][1]++;
    }
    // Validate stream
    const stream =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[37]++, await LiveStream_1.LiveStream.findById(streamId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[38]++;
    if (!stream) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[11][0]++;
      cov_1vet5sy6q4().s[39]++;
      return res.status(404).json({
        success: false,
        error: 'Stream not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[11][1]++;
    }
    cov_1vet5sy6q4().s[40]++;
    if (stream.status !== 'live') {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[12][0]++;
      cov_1vet5sy6q4().s[41]++;
      return res.status(400).json({
        success: false,
        error: 'Stream is not live'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[12][1]++;
    }
    // Check if user is banned
    cov_1vet5sy6q4().s[42]++;
    if (user.isBanned) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[13][0]++;
      cov_1vet5sy6q4().s[43]++;
      return res.status(403).json({
        success: false,
        error: 'User is banned'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[13][1]++;
    }
    // Auto-moderation check
    const moderationResult =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[44]++, await ModerationQueue_1.moderationQueue.autoModerateContent(content));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[45]++;
    if (moderationResult.isFlagged) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[14][0]++;
      cov_1vet5sy6q4().s[46]++;
      return res.status(400).json({
        success: false,
        error: 'Message contains inappropriate content'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[14][1]++;
    }
    // Create message
    const message =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[47]++, new Message_1.Message({
      roomId: streamId,
      userId,
      username: user.username,
      avatar: user.avatar,
      ogLevel: user.ogLevel,
      content,
      type,
      metadata: {
        replyTo,
        mentions: extractMentions(content)
      }
    }));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[48]++;
    await message.save();
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[49]++;
    res.status(201).json({
      success: true,
      message: 'Message sent successfully',
      data: {
        message: {
          id: message._id,
          userId: message.userId,
          username: message.username,
          avatar: message.avatar,
          ogLevel: message.ogLevel,
          content: message.content,
          type: message.type,
          metadata: message.metadata,
          createdAt: message.createdAt
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[50]++;
    logger_1.logger.error('Send message failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[51]++;
    res.status(500).json({
      success: false,
      error: 'Failed to send message'
    });
  }
});
// Delete message (OG4/5 privilege)
/* istanbul ignore next */
cov_1vet5sy6q4().s[52]++;
router.delete('/:messageId', async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[4]++;
  cov_1vet5sy6q4().s[53]++;
  try {
    const {
      messageId
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[54]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[55]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[56]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[15][0]++;
      cov_1vet5sy6q4().s[57]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[15][1]++;
    }
    // Validate user
    const user =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[58]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[59]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[16][0]++;
      cov_1vet5sy6q4().s[60]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[16][1]++;
    }
    // Check OG privilege (OG4/5 can delete messages)
    cov_1vet5sy6q4().s[61]++;
    if (user.ogLevel < 4) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[17][0]++;
      cov_1vet5sy6q4().s[62]++;
      return res.status(403).json({
        success: false,
        error: 'OG Tier 4+ required to delete messages'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[17][1]++;
    }
    // Find message
    const message =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[63]++, await Message_1.Message.findById(messageId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[64]++;
    if (!message) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[18][0]++;
      cov_1vet5sy6q4().s[65]++;
      return res.status(404).json({
        success: false,
        error: 'Message not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[18][1]++;
    }
    // Check if user is message author or has higher OG level
    cov_1vet5sy6q4().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_1vet5sy6q4().b[20][0]++, message.userId.toString() !== userId) &&
    /* istanbul ignore next */
    (cov_1vet5sy6q4().b[20][1]++, user.ogLevel <= message.ogLevel)) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[19][0]++;
      cov_1vet5sy6q4().s[67]++;
      return res.status(403).json({
        success: false,
        error: 'Cannot delete message from user with same or higher OG level'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[19][1]++;
    }
    // Soft delete message
    cov_1vet5sy6q4().s[68]++;
    message.softDelete(userId);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[69]++;
    await message.save();
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[70]++;
    res.json({
      success: true,
      message: 'Message deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[71]++;
    logger_1.logger.error('Delete message failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[72]++;
    res.status(500).json({
      success: false,
      error: 'Failed to delete message'
    });
  }
});
// Get messages with mentions
/* istanbul ignore next */
cov_1vet5sy6q4().s[73]++;
router.get('/mentions/:username', async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[5]++;
  cov_1vet5sy6q4().s[74]++;
  try {
    const {
      username
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[75]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_1vet5sy6q4().b[21][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[76]++, req.query);
    const messages =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[77]++, await Message_1.Message.find({
      'metadata.mentions': username,
      isDeleted: false
    }).sort({
      createdAt: -1
    }).limit(parseInt(limit)));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[78]++;
    res.json({
      success: true,
      data: {
        messages: messages.map(message => {
          /* istanbul ignore next */
          cov_1vet5sy6q4().f[6]++;
          cov_1vet5sy6q4().s[79]++;
          return {
            id: message._id,
            userId: message.userId,
            username: message.username,
            avatar: message.avatar,
            ogLevel: message.ogLevel,
            content: message.content,
            type: message.type,
            roomId: message.roomId,
            createdAt: message.createdAt
          };
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[80]++;
    logger_1.logger.error('Get mentions failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[81]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get mentions'
    });
  }
});
// Pin message (OG4/5 privilege)
/* istanbul ignore next */
cov_1vet5sy6q4().s[82]++;
router.post('/:messageId/pin', async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[7]++;
  cov_1vet5sy6q4().s[83]++;
  try {
    const {
      messageId
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[84]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[85]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[86]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[22][0]++;
      cov_1vet5sy6q4().s[87]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[22][1]++;
    }
    // Validate user
    const user =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[88]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[89]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[23][0]++;
      cov_1vet5sy6q4().s[90]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[23][1]++;
    }
    // Check OG privilege (OG4/5 can pin messages)
    cov_1vet5sy6q4().s[91]++;
    if (user.ogLevel < 4) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[24][0]++;
      cov_1vet5sy6q4().s[92]++;
      return res.status(403).json({
        success: false,
        error: 'OG Tier 4+ required to pin messages'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[24][1]++;
    }
    // Find message
    const message =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[93]++, await Message_1.Message.findById(messageId));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[94]++;
    if (!message) {
      /* istanbul ignore next */
      cov_1vet5sy6q4().b[25][0]++;
      cov_1vet5sy6q4().s[95]++;
      return res.status(404).json({
        success: false,
        error: 'Message not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1vet5sy6q4().b[25][1]++;
    }
    // TODO: Implement message pinning logic
    // This would involve updating the message or creating a pinned message record
    cov_1vet5sy6q4().s[96]++;
    res.json({
      success: true,
      message: 'Message pinned successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[97]++;
    logger_1.logger.error('Pin message failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[98]++;
    res.status(500).json({
      success: false,
      error: 'Failed to pin message'
    });
  }
});
// Get chat statistics
/* istanbul ignore next */
cov_1vet5sy6q4().s[99]++;
router.get('/:streamId/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[8]++;
  cov_1vet5sy6q4().s[100]++;
  try {
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[101]++, req.params);
    const [totalMessages, giftMessages, uniqueUsers] =
    /* istanbul ignore next */
    (cov_1vet5sy6q4().s[102]++, await Promise.all([Message_1.Message.countDocuments({
      roomId: streamId,
      isDeleted: false
    }), Message_1.Message.countDocuments({
      roomId: streamId,
      type: 'gift',
      isDeleted: false
    }), Message_1.Message.distinct('userId', {
      roomId: streamId,
      isDeleted: false
    })]));
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[103]++;
    res.json({
      success: true,
      data: {
        stats: {
          totalMessages,
          giftMessages,
          uniqueUsers: uniqueUsers.length,
          textMessages: totalMessages - giftMessages
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[104]++;
    logger_1.logger.error('Get chat stats failed:', error);
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[105]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get chat statistics'
    });
  }
});
// Helper function to extract mentions from content
function extractMentions(content) {
  /* istanbul ignore next */
  cov_1vet5sy6q4().f[9]++;
  const mentionRegex =
  /* istanbul ignore next */
  (cov_1vet5sy6q4().s[106]++, /@(\w+)/g);
  const mentions =
  /* istanbul ignore next */
  (cov_1vet5sy6q4().s[107]++, []);
  let match;
  /* istanbul ignore next */
  cov_1vet5sy6q4().s[108]++;
  while ((match = mentionRegex.exec(content)) !== null) {
    /* istanbul ignore next */
    cov_1vet5sy6q4().s[109]++;
    mentions.push(match[1]);
  }
  /* istanbul ignore next */
  cov_1vet5sy6q4().s[110]++;
  return mentions;
}
/* istanbul ignore next */
cov_1vet5sy6q4().s[111]++;
exports.default = router;