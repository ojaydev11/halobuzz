54892c44717f85771d3e3f30676d2767
"use strict";

/* istanbul ignore next */
function cov_1agdqsdmrv() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\commerce.ts";
  var hash = "5acd1acfaf2dd709eea461929d2643567838aaaa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\commerce.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 98
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 67
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "11": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "12": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "14": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "15": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 37
        }
      },
      "16": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "17": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "18": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 42
        }
      },
      "19": {
        start: {
          line: 34,
          column: 26
        },
        end: {
          line: 34,
          column: 92
        }
      },
      "20": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "21": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 47,
          column: 11
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "23": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 64
        }
      },
      "24": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "25": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 103,
          column: 3
        }
      },
      "26": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "27": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 39
        }
      },
      "28": {
        start: {
          line: 72,
          column: 30
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "29": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "31": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "32": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 70
        }
      },
      "33": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 86,
          column: 11
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 72
        }
      },
      "36": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "37": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "38": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 142,
          column: 5
        }
      },
      "39": {
        start: {
          line: 111,
          column: 69
        },
        end: {
          line: 111,
          column: 77
        }
      },
      "40": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 35
        }
      },
      "41": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "42": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "43": {
        start: {
          line: 119,
          column: 25
        },
        end: {
          line: 119,
          column: 121
        }
      },
      "44": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "45": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "46": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 72
        }
      },
      "47": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "48": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 182,
          column: 3
        }
      },
      "49": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "50": {
        start: {
          line: 151,
          column: 61
        },
        end: {
          line: 151,
          column: 69
        }
      },
      "51": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 152,
          column: 39
        }
      },
      "52": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "53": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "54": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 159,
          column: 118
        }
      },
      "55": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "56": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 173,
          column: 11
        }
      },
      "57": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 68
        }
      },
      "58": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "59": {
        start: {
          line: 188,
          column: 0
        },
        end: {
          line: 229,
          column: 3
        }
      },
      "60": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "61": {
        start: {
          line: 190,
          column: 31
        },
        end: {
          line: 190,
          column: 41
        }
      },
      "62": {
        start: {
          line: 191,
          column: 29
        },
        end: {
          line: 191,
          column: 37
        }
      },
      "63": {
        start: {
          line: 192,
          column: 23
        },
        end: {
          line: 192,
          column: 34
        }
      },
      "64": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "65": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "66": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 88
        }
      },
      "67": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "68": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 204,
          column: 15
        }
      },
      "69": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 211,
          column: 11
        }
      },
      "70": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "71": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 65
        }
      },
      "72": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "73": {
        start: {
          line: 235,
          column: 0
        },
        end: {
          line: 251,
          column: 3
        }
      },
      "74": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "75": {
        start: {
          line: 237,
          column: 29
        },
        end: {
          line: 237,
          column: 39
        }
      },
      "76": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 238,
          column: 78
        }
      },
      "77": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "78": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 77
        }
      },
      "79": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "80": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 274,
          column: 3
        }
      },
      "81": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "82": {
        start: {
          line: 259,
          column: 41
        },
        end: {
          line: 259,
          column: 50
        }
      },
      "83": {
        start: {
          line: 260,
          column: 26
        },
        end: {
          line: 260,
          column: 37
        }
      },
      "84": {
        start: {
          line: 261,
          column: 26
        },
        end: {
          line: 261,
          column: 90
        }
      },
      "85": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 11
        }
      },
      "86": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 74
        }
      },
      "87": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "88": {
        start: {
          line: 280,
          column: 0
        },
        end: {
          line: 314,
          column: 3
        }
      },
      "89": {
        start: {
          line: 281,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "90": {
        start: {
          line: 282,
          column: 124
        },
        end: {
          line: 282,
          column: 133
        }
      },
      "91": {
        start: {
          line: 284,
          column: 25
        },
        end: {
          line: 284,
          column: 27
        }
      },
      "92": {
        start: {
          line: 285,
          column: 22
        },
        end: {
          line: 285,
          column: 23
        }
      },
      "93": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "94": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 308,
          column: 64
        }
      },
      "95": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "96": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 346,
          column: 3
        }
      },
      "97": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "98": {
        start: {
          line: 322,
          column: 30
        },
        end: {
          line: 322,
          column: 40
        }
      },
      "99": {
        start: {
          line: 324,
          column: 24
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "100": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "101": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 71
        }
      },
      "102": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 344,
          column: 11
        }
      },
      "103": {
        start: {
          line: 352,
          column: 0
        },
        end: {
          line: 384,
          column: 3
        }
      },
      "104": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 383,
          column: 5
        }
      },
      "105": {
        start: {
          line: 354,
          column: 30
        },
        end: {
          line: 354,
          column: 40
        }
      },
      "106": {
        start: {
          line: 355,
          column: 24
        },
        end: {
          line: 355,
          column: 32
        }
      },
      "107": {
        start: {
          line: 356,
          column: 23
        },
        end: {
          line: 356,
          column: 34
        }
      },
      "108": {
        start: {
          line: 358,
          column: 31
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "109": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 368,
          column: 11
        }
      },
      "110": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 375,
          column: 11
        }
      },
      "111": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 64
        }
      },
      "112": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 382,
          column: 11
        }
      },
      "113": {
        start: {
          line: 390,
          column: 0
        },
        end: {
          line: 415,
          column: 3
        }
      },
      "114": {
        start: {
          line: 391,
          column: 4
        },
        end: {
          line: 414,
          column: 5
        }
      },
      "115": {
        start: {
          line: 392,
          column: 30
        },
        end: {
          line: 392,
          column: 40
        }
      },
      "116": {
        start: {
          line: 393,
          column: 23
        },
        end: {
          line: 393,
          column: 34
        }
      },
      "117": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 399,
          column: 11
        }
      },
      "118": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 406,
          column: 11
        }
      },
      "119": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 64
        }
      },
      "120": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 413,
          column: 11
        }
      },
      "121": {
        start: {
          line: 421,
          column: 0
        },
        end: {
          line: 447,
          column: 3
        }
      },
      "122": {
        start: {
          line: 422,
          column: 4
        },
        end: {
          line: 446,
          column: 5
        }
      },
      "123": {
        start: {
          line: 423,
          column: 31
        },
        end: {
          line: 423,
          column: 41
        }
      },
      "124": {
        start: {
          line: 425,
          column: 25
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "125": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 438,
          column: 11
        }
      },
      "126": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 441,
          column: 73
        }
      },
      "127": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 445,
          column: 11
        }
      },
      "128": {
        start: {
          line: 453,
          column: 0
        },
        end: {
          line: 481,
          column: 3
        }
      },
      "129": {
        start: {
          line: 454,
          column: 4
        },
        end: {
          line: 480,
          column: 5
        }
      },
      "130": {
        start: {
          line: 455,
          column: 31
        },
        end: {
          line: 455,
          column: 41
        }
      },
      "131": {
        start: {
          line: 456,
          column: 23
        },
        end: {
          line: 456,
          column: 34
        }
      },
      "132": {
        start: {
          line: 458,
          column: 25
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "133": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 472,
          column: 11
        }
      },
      "134": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 72
        }
      },
      "135": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 479,
          column: 11
        }
      },
      "136": {
        start: {
          line: 487,
          column: 0
        },
        end: {
          line: 507,
          column: 3
        }
      },
      "137": {
        start: {
          line: 488,
          column: 4
        },
        end: {
          line: 506,
          column: 5
        }
      },
      "138": {
        start: {
          line: 489,
          column: 31
        },
        end: {
          line: 489,
          column: 40
        }
      },
      "139": {
        start: {
          line: 491,
          column: 25
        },
        end: {
          line: 491,
          column: 27
        }
      },
      "140": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 498,
          column: 11
        }
      },
      "141": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 73
        }
      },
      "142": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 505,
          column: 11
        }
      },
      "143": {
        start: {
          line: 508,
          column: 0
        },
        end: {
          line: 508,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 44
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 41
          },
          end: {
            line: 69,
            column: 42
          }
        },
        loc: {
          start: {
            line: 69,
            column: 61
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 26
          }
        },
        loc: {
          start: {
            line: 109,
            column: 45
          },
          end: {
            line: 143,
            column: 1
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 149,
            column: 26
          },
          end: {
            line: 149,
            column: 27
          }
        },
        loc: {
          start: {
            line: 149,
            column: 46
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 149
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 188,
            column: 43
          },
          end: {
            line: 188,
            column: 44
          }
        },
        loc: {
          start: {
            line: 188,
            column: 63
          },
          end: {
            line: 229,
            column: 1
          }
        },
        line: 188
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 235,
            column: 40
          },
          end: {
            line: 235,
            column: 41
          }
        },
        loc: {
          start: {
            line: 235,
            column: 60
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 235
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 257,
            column: 25
          },
          end: {
            line: 257,
            column: 26
          }
        },
        loc: {
          start: {
            line: 257,
            column: 45
          },
          end: {
            line: 274,
            column: 1
          }
        },
        line: 257
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 280,
            column: 24
          },
          end: {
            line: 280,
            column: 25
          }
        },
        loc: {
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 280
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 320,
            column: 34
          },
          end: {
            line: 320,
            column: 35
          }
        },
        loc: {
          start: {
            line: 320,
            column: 54
          },
          end: {
            line: 346,
            column: 1
          }
        },
        line: 320
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 352,
            column: 34
          },
          end: {
            line: 352,
            column: 35
          }
        },
        loc: {
          start: {
            line: 352,
            column: 54
          },
          end: {
            line: 384,
            column: 1
          }
        },
        line: 352
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 38
          }
        },
        loc: {
          start: {
            line: 390,
            column: 57
          },
          end: {
            line: 415,
            column: 1
          }
        },
        line: 390
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 421,
            column: 37
          },
          end: {
            line: 421,
            column: 38
          }
        },
        loc: {
          start: {
            line: 421,
            column: 57
          },
          end: {
            line: 447,
            column: 1
          }
        },
        line: 421
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 453,
            column: 36
          },
          end: {
            line: 453,
            column: 37
          }
        },
        loc: {
          start: {
            line: 453,
            column: 56
          },
          end: {
            line: 481,
            column: 1
          }
        },
        line: 453
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 487,
            column: 24
          },
          end: {
            line: 487,
            column: 25
          }
        },
        loc: {
          start: {
            line: 487,
            column: 44
          },
          end: {
            line: 507,
            column: 1
          }
        },
        line: 487
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 29
          }
        }, {
          start: {
            line: 25,
            column: 33
          },
          end: {
            line: 25,
            column: 51
          }
        }, {
          start: {
            line: 25,
            column: 55
          },
          end: {
            line: 25,
            column: 79
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 100,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 19
          },
          end: {
            line: 100,
            column: 32
          }
        }, {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 100,
            column: 69
          }
        }],
        line: 100
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 111,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 48
          },
          end: {
            line: 111,
            column: 49
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 22
          }
        }, {
          start: {
            line: 113,
            column: 26
          },
          end: {
            line: 113,
            column: 35
          }
        }, {
          start: {
            line: 113,
            column: 39
          },
          end: {
            line: 113,
            column: 53
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 140,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 140,
            column: 32
          }
        }, {
          start: {
            line: 140,
            column: 36
          },
          end: {
            line: 140,
            column: 64
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "12": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 153,
            column: 22
          }
        }, {
          start: {
            line: 153,
            column: 26
          },
          end: {
            line: 153,
            column: 41
          }
        }, {
          start: {
            line: 153,
            column: 45
          },
          end: {
            line: 153,
            column: 59
          }
        }],
        line: 153
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 32
          }
        }, {
          start: {
            line: 179,
            column: 36
          },
          end: {
            line: 179,
            column: 66
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "15": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 21
          }
        }, {
          start: {
            line: 193,
            column: 25
          },
          end: {
            line: 193,
            column: 38
          }
        }],
        line: 193
      },
      "16": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 205,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "17": {
        loc: {
          start: {
            line: 226,
            column: 19
          },
          end: {
            line: 226,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 19
          },
          end: {
            line: 226,
            column: 32
          }
        }, {
          start: {
            line: 226,
            column: 36
          },
          end: {
            line: 226,
            column: 62
          }
        }],
        line: 226
      },
      "18": {
        loc: {
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 259,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 259,
            column: 28
          },
          end: {
            line: 259,
            column: 36
          }
        }],
        line: 259
      },
      "19": {
        loc: {
          start: {
            line: 282,
            column: 57
          },
          end: {
            line: 282,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 64
          },
          end: {
            line: 282,
            column: 65
          }
        }],
        line: 282
      },
      "20": {
        loc: {
          start: {
            line: 282,
            column: 67
          },
          end: {
            line: 282,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 75
          },
          end: {
            line: 282,
            column: 77
          }
        }],
        line: 282
      },
      "21": {
        loc: {
          start: {
            line: 282,
            column: 79
          },
          end: {
            line: 282,
            column: 99
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 88
          },
          end: {
            line: 282,
            column: 99
          }
        }],
        line: 282
      },
      "22": {
        loc: {
          start: {
            line: 282,
            column: 101
          },
          end: {
            line: 282,
            column: 119
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 282,
            column: 113
          },
          end: {
            line: 282,
            column: 119
          }
        }],
        line: 282
      },
      "23": {
        loc: {
          start: {
            line: 489,
            column: 16
          },
          end: {
            line: 489,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 489,
            column: 24
          },
          end: {
            line: 489,
            column: 26
          }
        }],
        line: 489
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0],
      "23": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5acd1acfaf2dd709eea461929d2643567838aaaa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1agdqsdmrv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1agdqsdmrv();
var __importDefault =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[0]++,
/* istanbul ignore next */
(cov_1agdqsdmrv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1agdqsdmrv().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1agdqsdmrv().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[0]++;
  cov_1agdqsdmrv().s[1]++;
  return /* istanbul ignore next */(cov_1agdqsdmrv().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1agdqsdmrv().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1agdqsdmrv().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1agdqsdmrv().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1agdqsdmrv().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[3]++, __importDefault(require("express")));
const auth_1 =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[4]++, require("../middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[5]++, require("../middleware/security"));
const LiveCommerceService_1 =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[6]++, __importDefault(require("../services/commerce/LiveCommerceService")));
const logger_1 =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[7]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[8]++, express_1.default.Router());
const commerceService =
/* istanbul ignore next */
(cov_1agdqsdmrv().s[9]++, LiveCommerceService_1.default.getInstance());
// Apply middleware
/* istanbul ignore next */
cov_1agdqsdmrv().s[10]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_1agdqsdmrv().s[11]++;
router.use(security_1.socialLimiter);
/**
 * @route POST /api/commerce/product
 * @desc Create a new shoppable product
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[12]++;
router.post('/product', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[1]++;
  cov_1agdqsdmrv().s[13]++;
  try {
    const productData =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[14]++, req.body);
    const creatorId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[15]++, req.user.id);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[4][0]++, !productData.name) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[4][1]++, !productData.price) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[4][2]++, !productData.description)) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[3][0]++;
      cov_1agdqsdmrv().s[17]++;
      return res.status(400).json({
        success: false,
        error: 'Product name, price, and description are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[3][1]++;
    }
    // Add creator ID to product data
    cov_1agdqsdmrv().s[18]++;
    productData.creatorId = creatorId;
    // Mock implementation - in real app, create product in database
    const productId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[19]++, `product_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const product =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[20]++, {
      id: productId,
      ...productData,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[21]++;
    logger_1.logger.info('Product created', {
      productId,
      creatorId,
      name: productData.name,
      price: productData.price,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[22]++;
    res.status(201).json({
      success: true,
      data: {
        product,
        message: 'Product created successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[23]++;
    logger_1.logger.error('Error creating product:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[24]++;
    res.status(500).json({
      success: false,
      error: 'Failed to create product'
    });
  }
});
/**
 * @route POST /api/commerce/stream/:streamId/product
 * @desc Add product to live stream
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[25]++;
router.post('/stream/:streamId/product', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[2]++;
  cov_1agdqsdmrv().s[26]++;
  try {
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[27]++, req.params);
    const {
      productId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[28]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[29]++, req.user.id);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[30]++;
    if (!productId) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[5][0]++;
      cov_1agdqsdmrv().s[31]++;
      return res.status(400).json({
        success: false,
        error: 'productId is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[5][1]++;
    }
    cov_1agdqsdmrv().s[32]++;
    await commerceService.addProductToStream(streamId, productId);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[33]++;
    logger_1.logger.info('Product added to stream', {
      streamId,
      productId,
      userId,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[34]++;
    res.json({
      success: true,
      data: {
        streamId,
        productId,
        message: 'Product added to stream successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[35]++;
    logger_1.logger.error('Error adding product to stream:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[36]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[6][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[6][1]++, 'Failed to add product to stream')
    });
  }
});
/**
 * @route POST /api/commerce/checkout
 * @desc Process live checkout
 * @access Private
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[37]++;
router.post('/checkout', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[3]++;
  cov_1agdqsdmrv().s[38]++;
  try {
    const {
      productId,
      streamId,
      quantity =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[7][0]++, 1),
      paymentMethod
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[39]++, req.body);
    const buyerId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[40]++, req.user.id);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[41]++;
    if (
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[9][0]++, !productId) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[9][1]++, !streamId) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[9][2]++, !paymentMethod)) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[8][0]++;
      cov_1agdqsdmrv().s[42]++;
      return res.status(400).json({
        success: false,
        error: 'productId, streamId, and paymentMethod are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[8][1]++;
    }
    const checkout =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[43]++, await commerceService.processLiveCheckout(productId, buyerId, streamId, quantity, paymentMethod));
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[44]++;
    logger_1.logger.info('Live checkout processed', {
      checkoutId: checkout.id,
      productId,
      buyerId,
      streamId,
      totalAmount: checkout.totalAmount,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[45]++;
    res.status(201).json({
      success: true,
      data: {
        checkout,
        message: 'Checkout processed successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[46]++;
    logger_1.logger.error('Error processing live checkout:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[47]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[10][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[10][1]++, 'Failed to process checkout')
    });
  }
});
/**
 * @route POST /api/commerce/group-buy
 * @desc Initiate group buy
 * @access Private
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[48]++;
router.post('/group-buy', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[4]++;
  cov_1agdqsdmrv().s[49]++;
  try {
    const {
      productId,
      targetQuantity,
      discountTiers
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[50]++, req.body);
    const initiatorId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[51]++, req.user.id);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[12][0]++, !productId) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[12][1]++, !targetQuantity) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[12][2]++, !discountTiers)) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[11][0]++;
      cov_1agdqsdmrv().s[53]++;
      return res.status(400).json({
        success: false,
        error: 'productId, targetQuantity, and discountTiers are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[11][1]++;
    }
    const groupBuy =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[54]++, await commerceService.initiateGroupBuy(productId, initiatorId, targetQuantity, discountTiers));
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[55]++;
    logger_1.logger.info('Group buy initiated', {
      groupBuyId: groupBuy.id,
      productId,
      initiatorId,
      targetQuantity,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[56]++;
    res.status(201).json({
      success: true,
      data: {
        groupBuy,
        message: 'Group buy initiated successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[57]++;
    logger_1.logger.error('Error initiating group buy:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[58]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[13][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[13][1]++, 'Failed to initiate group buy')
    });
  }
});
/**
 * @route POST /api/commerce/group-buy/:groupBuyId/join
 * @desc Join group buy
 * @access Private
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[59]++;
router.post('/group-buy/:groupBuyId/join', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[5]++;
  cov_1agdqsdmrv().s[60]++;
  try {
    const {
      groupBuyId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[61]++, req.params);
    const {
      quantity
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[62]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[63]++, req.user.id);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[15][0]++, !quantity) ||
    /* istanbul ignore next */
    (cov_1agdqsdmrv().b[15][1]++, quantity <= 0)) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[14][0]++;
      cov_1agdqsdmrv().s[65]++;
      return res.status(400).json({
        success: false,
        error: 'Valid quantity is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[14][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[66]++, await commerceService.joinGroupBuy(groupBuyId, userId, quantity));
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[67]++;
    if (!success) {
      /* istanbul ignore next */
      cov_1agdqsdmrv().b[16][0]++;
      cov_1agdqsdmrv().s[68]++;
      return res.status(400).json({
        success: false,
        error: 'Failed to join group buy'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1agdqsdmrv().b[16][1]++;
    }
    cov_1agdqsdmrv().s[69]++;
    logger_1.logger.info('User joined group buy', {
      groupBuyId,
      userId,
      quantity,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[70]++;
    res.json({
      success: true,
      data: {
        groupBuyId,
        userId,
        quantity,
        message: 'Successfully joined group buy'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[71]++;
    logger_1.logger.error('Error joining group buy:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[72]++;
    res.status(500).json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[17][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[17][1]++, 'Failed to join group buy')
    });
  }
});
/**
 * @route GET /api/commerce/stream/:streamId/session
 * @desc Get live shopping session
 * @access Public
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[73]++;
router.get('/stream/:streamId/session', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[6]++;
  cov_1agdqsdmrv().s[74]++;
  try {
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[75]++, req.params);
    const session =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[76]++, await commerceService.getLiveShoppingSession(streamId));
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[77]++;
    res.json({
      success: true,
      data: {
        session
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[78]++;
    logger_1.logger.error('Error getting live shopping session:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[79]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get live shopping session'
    });
  }
});
/**
 * @route GET /api/commerce/analytics
 * @desc Get commerce analytics
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[80]++;
router.get('/analytics', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[7]++;
  cov_1agdqsdmrv().s[81]++;
  try {
    const {
      timeframe =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[18][0]++, '30days')
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[82]++, req.query);
    const creatorId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[83]++, req.user.id);
    const analytics =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[84]++, await commerceService.getCommerceAnalytics(creatorId, timeframe));
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[85]++;
    res.json({
      success: true,
      data: {
        analytics
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[86]++;
    logger_1.logger.error('Error getting commerce analytics:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[87]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get commerce analytics'
    });
  }
});
/**
 * @route GET /api/commerce/products
 * @desc Get products (with filters)
 * @access Public
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[88]++;
router.get('/products', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[8]++;
  cov_1agdqsdmrv().s[89]++;
  try {
    const {
      creatorId,
      category,
      minPrice,
      maxPrice,
      page =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[19][0]++, 1),
      limit =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[20][0]++, 20),
      sortBy =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[21][0]++, 'createdAt'),
      sortOrder =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[22][0]++, 'desc')
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[90]++, req.query);
    // Mock implementation - in real app, query products with filters
    const products =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[91]++, []);
    const total =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[92]++, 0);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[93]++;
    res.json({
      success: true,
      data: {
        products,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / parseInt(limit))
        },
        filters: {
          creatorId,
          category,
          minPrice,
          maxPrice,
          sortBy,
          sortOrder
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[94]++;
    logger_1.logger.error('Error getting products:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[95]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get products'
    });
  }
});
/**
 * @route GET /api/commerce/product/:productId
 * @desc Get product details
 * @access Public
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[96]++;
router.get('/product/:productId', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[9]++;
  cov_1agdqsdmrv().s[97]++;
  try {
    const {
      productId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[98]++, req.params);
    // Mock implementation - in real app, get product from database
    const product =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[99]++, {
      id: productId,
      name: 'Sample Product',
      price: 29.99,
      description: 'A sample product for demonstration',
      images: ['https://example.com/image1.jpg'],
      inventory: 100,
      categories: ['clothing'],
      tags: ['trending', 'popular']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[100]++;
    res.json({
      success: true,
      data: {
        product
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[101]++;
    logger_1.logger.error('Error getting product details:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[102]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get product details'
    });
  }
});
/**
 * @route PUT /api/commerce/product/:productId
 * @desc Update product
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[103]++;
router.put('/product/:productId', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[10]++;
  cov_1agdqsdmrv().s[104]++;
  try {
    const {
      productId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[105]++, req.params);
    const updates =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[106]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[107]++, req.user.id);
    // Mock implementation - in real app, update product in database
    const updatedProduct =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[108]++, {
      id: productId,
      ...updates,
      updatedAt: new Date()
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[109]++;
    logger_1.logger.info('Product updated', {
      productId,
      userId,
      updates: Object.keys(updates),
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[110]++;
    res.json({
      success: true,
      data: {
        product: updatedProduct,
        message: 'Product updated successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[111]++;
    logger_1.logger.error('Error updating product:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[112]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update product'
    });
  }
});
/**
 * @route DELETE /api/commerce/product/:productId
 * @desc Delete product
 * @access Private (Creator)
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[113]++;
router.delete('/product/:productId', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[11]++;
  cov_1agdqsdmrv().s[114]++;
  try {
    const {
      productId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[115]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[116]++, req.user.id);
    // Mock implementation - in real app, delete product from database
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[117]++;
    logger_1.logger.info('Product deleted', {
      productId,
      userId,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[118]++;
    res.json({
      success: true,
      data: {
        productId,
        message: 'Product deleted successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[119]++;
    logger_1.logger.error('Error deleting product:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[120]++;
    res.status(500).json({
      success: false,
      error: 'Failed to delete product'
    });
  }
});
/**
 * @route GET /api/commerce/group-buy/:groupBuyId
 * @desc Get group buy details
 * @access Public
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[121]++;
router.get('/group-buy/:groupBuyId', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[12]++;
  cov_1agdqsdmrv().s[122]++;
  try {
    const {
      groupBuyId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[123]++, req.params);
    // Mock implementation - in real app, get group buy from database
    const groupBuy =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[124]++, {
      id: groupBuyId,
      productId: 'product_123',
      targetQuantity: 50,
      currentQuantity: 25,
      status: 'active',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
      currentDiscount: 10,
      savings: 150
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[125]++;
    res.json({
      success: true,
      data: {
        groupBuy
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[126]++;
    logger_1.logger.error('Error getting group buy details:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[127]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get group buy details'
    });
  }
});
/**
 * @route GET /api/commerce/checkout/:checkoutId
 * @desc Get checkout details
 * @access Private
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[128]++;
router.get('/checkout/:checkoutId', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[13]++;
  cov_1agdqsdmrv().s[129]++;
  try {
    const {
      checkoutId
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[130]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[131]++, req.user.id);
    // Mock implementation - in real app, get checkout from database
    const checkout =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[132]++, {
      id: checkoutId,
      userId,
      productId: 'product_123',
      streamId: 'stream_456',
      quantity: 1,
      totalAmount: 29.99,
      status: 'completed',
      orderNumber: 'ORD-123456',
      estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
    });
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[133]++;
    res.json({
      success: true,
      data: {
        checkout
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[134]++;
    logger_1.logger.error('Error getting checkout details:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[135]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get checkout details'
    });
  }
});
/**
 * @route GET /api/commerce/trending
 * @desc Get trending products
 * @access Public
 */
/* istanbul ignore next */
cov_1agdqsdmrv().s[136]++;
router.get('/trending', async (req, res) => {
  /* istanbul ignore next */
  cov_1agdqsdmrv().f[14]++;
  cov_1agdqsdmrv().s[137]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1agdqsdmrv().b[23][0]++, 20)
    } =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[138]++, req.query);
    // Mock implementation - in real app, get trending products
    const products =
    /* istanbul ignore next */
    (cov_1agdqsdmrv().s[139]++, []);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[140]++;
    res.json({
      success: true,
      data: {
        products,
        limit: parseInt(limit)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[141]++;
    logger_1.logger.error('Error getting trending products:', error);
    /* istanbul ignore next */
    cov_1agdqsdmrv().s[142]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get trending products'
    });
  }
});
/* istanbul ignore next */
cov_1agdqsdmrv().s[143]++;
exports.default = router;