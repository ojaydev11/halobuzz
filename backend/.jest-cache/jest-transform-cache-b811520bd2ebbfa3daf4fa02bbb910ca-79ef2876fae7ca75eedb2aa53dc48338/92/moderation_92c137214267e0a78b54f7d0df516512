5459aa7ca28a04f8609da07a83ca64c4
"use strict";

/* istanbul ignore next */
function cov_9wgbit93e() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\moderation.ts";
  var hash = "493184dc47e6d2a9a9834ddeed60a71836619164";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\moderation.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 72
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "7": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 60
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "10": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "11": {
        start: {
          line: 18,
          column: 43
        },
        end: {
          line: 18,
          column: 51
        }
      },
      "12": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "13": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "14": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "15": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 118
        }
      },
      "16": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 30,
          column: 11
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 57
        }
      },
      "18": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "19": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 61,
          column: 3
        }
      },
      "20": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "21": {
        start: {
          line: 46,
          column: 34
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "22": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 35
        }
      },
      "23": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 107
        }
      },
      "24": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "25": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 53
        }
      },
      "26": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "27": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "28": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "29": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "30": {
        start: {
          line: 69,
          column: 43
        },
        end: {
          line: 69,
          column: 52
        }
      },
      "31": {
        start: {
          line: 70,
          column: 22
        },
        end: {
          line: 70,
          column: 93
        }
      },
      "32": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "33": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 65
        }
      },
      "34": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "35": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "36": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "37": {
        start: {
          line: 90,
          column: 38
        },
        end: {
          line: 90,
          column: 47
        }
      },
      "38": {
        start: {
          line: 91,
          column: 22
        },
        end: {
          line: 91,
          column: 99
        }
      },
      "39": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "40": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 65
        }
      },
      "41": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "42": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 141,
          column: 3
        }
      },
      "43": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "44": {
        start: {
          line: 111,
          column: 27
        },
        end: {
          line: 111,
          column: 37
        }
      },
      "45": {
        start: {
          line: 112,
          column: 31
        },
        end: {
          line: 112,
          column: 39
        }
      },
      "46": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 35
        }
      },
      "47": {
        start: {
          line: 114,
          column: 21
        },
        end: {
          line: 114,
          column: 75
        }
      },
      "48": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "49": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "50": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "52": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 47
        }
      },
      "53": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "54": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 54
        }
      },
      "55": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "56": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "57": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "58": {
        start: {
          line: 148,
          column: 36
        },
        end: {
          line: 148,
          column: 44
        }
      },
      "59": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 36
        }
      },
      "60": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "61": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "62": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "63": {
        start: {
          line: 157,
          column: 27
        },
        end: {
          line: 157,
          column: 28
        }
      },
      "64": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "65": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 159,
          column: 79
        }
      },
      "66": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "67": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 168,
          column: 17
        }
      },
      "68": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 74
        }
      },
      "69": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 36
        }
      },
      "70": {
        start: {
          line: 165,
          column: 21
        },
        end: {
          line: 168,
          column: 17
        }
      },
      "71": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 38
        }
      },
      "72": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 35
        }
      },
      "73": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "74": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 62
        }
      },
      "75": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 185,
          column: 11
        }
      },
      "76": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 208,
          column: 3
        }
      },
      "77": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "78": {
        start: {
          line: 194,
          column: 32
        },
        end: {
          line: 194,
          column: 41
        }
      },
      "79": {
        start: {
          line: 195,
          column: 22
        },
        end: {
          line: 195,
          column: 86
        }
      },
      "80": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "81": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 62
        }
      },
      "82": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 206,
          column: 11
        }
      },
      "83": {
        start: {
          line: 213,
          column: 0
        },
        end: {
          line: 262,
          column: 3
        }
      },
      "84": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 261,
          column: 5
        }
      },
      "85": {
        start: {
          line: 215,
          column: 38
        },
        end: {
          line: 215,
          column: 47
        }
      },
      "86": {
        start: {
          line: 217,
          column: 22
        },
        end: {
          line: 217,
          column: 99
        }
      },
      "87": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 248,
          column: 10
        }
      },
      "88": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "89": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 69
        }
      },
      "90": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 260,
          column: 11
        }
      },
      "91": {
        start: {
          line: 263,
          column: 0
        },
        end: {
          line: 263,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 47
          },
          end: {
            line: 16,
            column: 48
          }
        },
        loc: {
          start: {
            line: 16,
            column: 67
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 50
          },
          end: {
            line: 44,
            column: 51
          }
        },
        loc: {
          start: {
            line: 44,
            column: 70
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 44
          },
          end: {
            line: 66,
            column: 45
          }
        },
        loc: {
          start: {
            line: 66,
            column: 64
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 88,
            column: 45
          }
        },
        loc: {
          start: {
            line: 88,
            column: 64
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 109,
            column: 61
          },
          end: {
            line: 109,
            column: 62
          }
        },
        loc: {
          start: {
            line: 109,
            column: 81
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 109
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 48
          }
        },
        loc: {
          start: {
            line: 146,
            column: 67
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 146
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 192,
            column: 42
          },
          end: {
            line: 192,
            column: 43
          }
        },
        loc: {
          start: {
            line: 192,
            column: 62
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 192
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 213,
            column: 44
          },
          end: {
            line: 213,
            column: 45
          }
        },
        loc: {
          start: {
            line: 213,
            column: 64
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 213
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 12
          },
          end: {
            line: 20,
            column: 20
          }
        }, {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 29
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 69,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 24
          },
          end: {
            line: 69,
            column: 26
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 69,
            column: 28
          },
          end: {
            line: 69,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 69,
            column: 37
          },
          end: {
            line: 69,
            column: 38
          }
        }],
        line: 69
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 90,
            column: 28
          },
          end: {
            line: 90,
            column: 33
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "9": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 122,
            column: 45
          }
        }, {
          start: {
            line: 122,
            column: 49
          },
          end: {
            line: 122,
            column: 67
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "12": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 150,
            column: 20
          }
        }, {
          start: {
            line: 150,
            column: 24
          },
          end: {
            line: 150,
            column: 47
          }
        }, {
          start: {
            line: 150,
            column: 51
          },
          end: {
            line: 150,
            column: 71
          }
        }],
        line: 150
      },
      "13": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "14": {
        loc: {
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 168,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 16
          },
          end: {
            line: 168,
            column: 17
          }
        }, {
          start: {
            line: 165,
            column: 21
          },
          end: {
            line: 168,
            column: 17
          }
        }],
        line: 161
      },
      "15": {
        loc: {
          start: {
            line: 165,
            column: 21
          },
          end: {
            line: 168,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 21
          },
          end: {
            line: 168,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "16": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 194,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 194,
            column: 24
          },
          end: {
            line: 194,
            column: 27
          }
        }],
        line: 194
      },
      "17": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 215,
            column: 28
          },
          end: {
            line: 215,
            column: 33
          }
        }],
        line: 215
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0],
      "17": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "493184dc47e6d2a9a9834ddeed60a71836619164"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9wgbit93e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9wgbit93e();
var __importDefault =
/* istanbul ignore next */
(cov_9wgbit93e().s[0]++,
/* istanbul ignore next */
(cov_9wgbit93e().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_9wgbit93e().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_9wgbit93e().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_9wgbit93e().f[0]++;
  cov_9wgbit93e().s[1]++;
  return /* istanbul ignore next */(cov_9wgbit93e().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_9wgbit93e().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_9wgbit93e().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_9wgbit93e().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_9wgbit93e().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_9wgbit93e().s[3]++, __importDefault(require("express")));
const AIModerationService_1 =
/* istanbul ignore next */
(cov_9wgbit93e().s[4]++, require("../services/AIModerationService"));
const auth_1 =
/* istanbul ignore next */
(cov_9wgbit93e().s[5]++, require("../middleware/auth"));
const admin_1 =
/* istanbul ignore next */
(cov_9wgbit93e().s[6]++, require("../middleware/admin"));
const ModerationFlag_1 =
/* istanbul ignore next */
(cov_9wgbit93e().s[7]++, require("../models/ModerationFlag"));
const router =
/* istanbul ignore next */
(cov_9wgbit93e().s[8]++, express_1.default.Router());
/**
 * @route POST /moderation/analyze
 * @desc Analyze content for moderation
 */
/* istanbul ignore next */
cov_9wgbit93e().s[9]++;
router.post('/analyze', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[1]++;
  cov_9wgbit93e().s[10]++;
  try {
    const {
      content,
      type,
      context
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[11]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[12]++, req.user?.id);
    /* istanbul ignore next */
    cov_9wgbit93e().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_9wgbit93e().b[4][0]++, !content) ||
    /* istanbul ignore next */
    (cov_9wgbit93e().b[4][1]++, !type)) {
      /* istanbul ignore next */
      cov_9wgbit93e().b[3][0]++;
      cov_9wgbit93e().s[14]++;
      return res.status(400).json({
        success: false,
        error: 'Content and type are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9wgbit93e().b[3][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[15]++, await AIModerationService_1.aiModerationService.moderateContent(content, type, userId, context));
    /* istanbul ignore next */
    cov_9wgbit93e().s[16]++;
    res.json({
      success: true,
      result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[17]++;
    console.error('Error analyzing content:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[18]++;
    res.status(500).json({
      success: false,
      error: 'Failed to analyze content'
    });
  }
});
/**
 * @route POST /moderation/verify-age
 * @desc Verify user age
 */
/* istanbul ignore next */
cov_9wgbit93e().s[19]++;
router.post('/verify-age', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[2]++;
  cov_9wgbit93e().s[20]++;
  try {
    const {
      documentImage
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[21]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[22]++, req.user?.id);
    const result =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[23]++, await AIModerationService_1.aiModerationService.verifyUserAge(userId, documentImage));
    /* istanbul ignore next */
    cov_9wgbit93e().s[24]++;
    res.json({
      success: true,
      result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[25]++;
    console.error('Error verifying age:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[26]++;
    res.status(500).json({
      success: false,
      error: 'Failed to verify age'
    });
  }
});
/**
 * @route GET /moderation/flags
 * @desc Get moderation flags for user
 */
/* istanbul ignore next */
cov_9wgbit93e().s[27]++;
router.get('/flags', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[3]++;
  cov_9wgbit93e().s[28]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[29]++, req.user?.id);
    const {
      limit =
      /* istanbul ignore next */
      (cov_9wgbit93e().b[5][0]++, 50),
      offset =
      /* istanbul ignore next */
      (cov_9wgbit93e().b[6][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[30]++, req.query);
    const flags =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[31]++, await ModerationFlag_1.ModerationFlag.findByUser(userId, Number(limit)));
    /* istanbul ignore next */
    cov_9wgbit93e().s[32]++;
    res.json({
      success: true,
      flags
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[33]++;
    console.error('Error fetching moderation flags:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[34]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch moderation flags'
    });
  }
});
/**
 * @route GET /moderation/stats
 * @desc Get moderation statistics
 */
/* istanbul ignore next */
cov_9wgbit93e().s[35]++;
router.get('/stats', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[4]++;
  cov_9wgbit93e().s[36]++;
  try {
    const {
      timeframe =
      /* istanbul ignore next */
      (cov_9wgbit93e().b[7][0]++, 'day')
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[37]++, req.query);
    const stats =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[38]++, await AIModerationService_1.aiModerationService.getModerationStats(timeframe));
    /* istanbul ignore next */
    cov_9wgbit93e().s[39]++;
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[40]++;
    console.error('Error fetching moderation stats:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch moderation stats'
    });
  }
});
/**
 * @route POST /moderation/flags/:flagId/resolve
 * @desc Resolve a moderation flag
 */
/* istanbul ignore next */
cov_9wgbit93e().s[42]++;
router.post('/flags/:flagId/resolve', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[5]++;
  cov_9wgbit93e().s[43]++;
  try {
    const {
      flagId
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[44]++, req.params);
    const {
      resolution
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[45]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[46]++, req.user?.id);
    const flag =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[47]++, await ModerationFlag_1.ModerationFlag.findById(flagId));
    /* istanbul ignore next */
    cov_9wgbit93e().s[48]++;
    if (!flag) {
      /* istanbul ignore next */
      cov_9wgbit93e().b[8][0]++;
      cov_9wgbit93e().s[49]++;
      return res.status(404).json({
        success: false,
        error: 'Flag not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9wgbit93e().b[8][1]++;
    }
    // Check if user can resolve this flag
    cov_9wgbit93e().s[50]++;
    if (
    /* istanbul ignore next */
    (cov_9wgbit93e().b[10][0]++, flag.userId.toString() !== userId) &&
    /* istanbul ignore next */
    (cov_9wgbit93e().b[10][1]++, !req.user?.isAdmin)) {
      /* istanbul ignore next */
      cov_9wgbit93e().b[9][0]++;
      cov_9wgbit93e().s[51]++;
      return res.status(403).json({
        success: false,
        error: 'Not authorized to resolve this flag'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9wgbit93e().b[9][1]++;
    }
    cov_9wgbit93e().s[52]++;
    await flag.resolve(userId, resolution);
    /* istanbul ignore next */
    cov_9wgbit93e().s[53]++;
    res.json({
      success: true,
      message: 'Flag resolved successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[54]++;
    console.error('Error resolving flag:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[55]++;
    res.status(500).json({
      success: false,
      error: 'Failed to resolve flag'
    });
  }
});
/**
 * @route POST /moderation/bulk-action
 * @desc Perform bulk action on moderation flags
 */
/* istanbul ignore next */
cov_9wgbit93e().s[56]++;
router.post('/bulk-action', admin_1.adminOnly, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[6]++;
  cov_9wgbit93e().s[57]++;
  try {
    const {
      flagIds,
      action
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[58]++, req.body);
    const adminId =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[59]++, req.user?.id);
    /* istanbul ignore next */
    cov_9wgbit93e().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_9wgbit93e().b[12][0]++, !flagIds) ||
    /* istanbul ignore next */
    (cov_9wgbit93e().b[12][1]++, !Array.isArray(flagIds)) ||
    /* istanbul ignore next */
    (cov_9wgbit93e().b[12][2]++, flagIds.length === 0)) {
      /* istanbul ignore next */
      cov_9wgbit93e().b[11][0]++;
      cov_9wgbit93e().s[61]++;
      return res.status(400).json({
        success: false,
        error: 'Flag IDs are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9wgbit93e().b[11][1]++;
    }
    let resolvedCount =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[62]++, 0);
    let flaggedCount =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[63]++, 0);
    /* istanbul ignore next */
    cov_9wgbit93e().s[64]++;
    for (const flagId of flagIds) {
      const flag =
      /* istanbul ignore next */
      (cov_9wgbit93e().s[65]++, await ModerationFlag_1.ModerationFlag.findById(flagId));
      /* istanbul ignore next */
      cov_9wgbit93e().s[66]++;
      if (flag) {
        /* istanbul ignore next */
        cov_9wgbit93e().b[13][0]++;
        cov_9wgbit93e().s[67]++;
        if (action === 'resolve') {
          /* istanbul ignore next */
          cov_9wgbit93e().b[14][0]++;
          cov_9wgbit93e().s[68]++;
          await flag.resolve(adminId, 'Bulk resolved by admin');
          /* istanbul ignore next */
          cov_9wgbit93e().s[69]++;
          resolvedCount++;
        } else {
          /* istanbul ignore next */
          cov_9wgbit93e().b[14][1]++;
          cov_9wgbit93e().s[70]++;
          if (action === 'flag') {
            /* istanbul ignore next */
            cov_9wgbit93e().b[15][0]++;
            cov_9wgbit93e().s[71]++;
            await flag.flag();
            /* istanbul ignore next */
            cov_9wgbit93e().s[72]++;
            flaggedCount++;
          } else
          /* istanbul ignore next */
          {
            cov_9wgbit93e().b[15][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_9wgbit93e().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_9wgbit93e().s[73]++;
    res.json({
      success: true,
      message: `Bulk action completed: ${resolvedCount} resolved, ${flaggedCount} flagged`,
      stats: {
        resolved: resolvedCount,
        flagged: flaggedCount
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[74]++;
    console.error('Error performing bulk action:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[75]++;
    res.status(500).json({
      success: false,
      error: 'Failed to perform bulk action'
    });
  }
});
/**
 * @route GET /moderation/pending
 * @desc Get pending moderation flags (admin only)
 */
/* istanbul ignore next */
cov_9wgbit93e().s[76]++;
router.get('/pending', admin_1.adminOnly, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[7]++;
  cov_9wgbit93e().s[77]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_9wgbit93e().b[16][0]++, 100)
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[78]++, req.query);
    const flags =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[79]++, await ModerationFlag_1.ModerationFlag.findPending(Number(limit)));
    /* istanbul ignore next */
    cov_9wgbit93e().s[80]++;
    res.json({
      success: true,
      flags
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[81]++;
    console.error('Error fetching pending flags:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[82]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch pending flags'
    });
  }
});
/**
 * @route GET /moderation/analytics
 * @desc Get moderation analytics (admin only)
 */
/* istanbul ignore next */
cov_9wgbit93e().s[83]++;
router.get('/analytics', admin_1.adminOnly, async (req, res) => {
  /* istanbul ignore next */
  cov_9wgbit93e().f[8]++;
  cov_9wgbit93e().s[84]++;
  try {
    const {
      timeframe =
      /* istanbul ignore next */
      (cov_9wgbit93e().b[17][0]++, 'day')
    } =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[85]++, req.query);
    // Get basic stats
    const stats =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[86]++, await AIModerationService_1.aiModerationService.getModerationStats(timeframe));
    // Get additional analytics
    const analytics =
    /* istanbul ignore next */
    (cov_9wgbit93e().s[87]++, await ModerationFlag_1.ModerationFlag.aggregate([{
      $match: {
        createdAt: {
          $gte: stats.startDate
        }
      }
    }, {
      $group: {
        _id: {
          contentType: '$contentType',
          action: '$action'
        },
        count: {
          $sum: 1
        },
        avgConfidence: {
          $avg: '$confidence'
        }
      }
    }, {
      $group: {
        _id: '$_id.contentType',
        actions: {
          $push: {
            action: '$_id.action',
            count: '$count',
            avgConfidence: '$avgConfidence'
          }
        },
        totalCount: {
          $sum: '$count'
        }
      }
    }]));
    /* istanbul ignore next */
    cov_9wgbit93e().s[88]++;
    res.json({
      success: true,
      stats,
      analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9wgbit93e().s[89]++;
    console.error('Error fetching moderation analytics:', error);
    /* istanbul ignore next */
    cov_9wgbit93e().s[90]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch moderation analytics'
    });
  }
});
/* istanbul ignore next */
cov_9wgbit93e().s[91]++;
exports.default = router;