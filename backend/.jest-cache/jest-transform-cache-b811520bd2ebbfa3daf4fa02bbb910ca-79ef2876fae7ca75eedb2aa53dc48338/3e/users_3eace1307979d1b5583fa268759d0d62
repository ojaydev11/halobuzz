7287526ec4b722cdb012c57f48b8b073
"use strict";

/* istanbul ignore next */
function cov_1uioo3uk5z() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\users.ts";
  var hash = "74c132c6d50411d8110589587a1a380182cd0988";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\users.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "7": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "8": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 75
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "10": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "11": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 109,
          column: 3
        }
      },
      "12": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "13": {
        start: {
          line: 28,
          column: 27
        },
        end: {
          line: 28,
          column: 39
        }
      },
      "14": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "15": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "17": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "19": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "20": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 61
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "22": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "23": {
        start: {
          line: 51,
          column: 35
        },
        end: {
          line: 54,
          column: 10
        }
      },
      "24": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "25": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 86
        }
      },
      "26": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 88
        }
      },
      "27": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 34
        }
      },
      "29": {
        start: {
          line: 62,
          column: 13
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "30": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 89
        }
      },
      "32": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 85
        }
      },
      "33": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 35
        }
      },
      "34": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "35": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "36": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 93
        }
      },
      "37": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 89
        }
      },
      "38": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 39
        }
      },
      "39": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 90
        }
      },
      "40": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 92
        }
      },
      "41": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 88
        }
      },
      "42": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "43": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "44": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "45": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "46": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 66
        }
      },
      "47": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "48": {
        start: {
          line: 114,
          column: 0
        },
        end: {
          line: 141,
          column: 3
        }
      },
      "49": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "50": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 39
        }
      },
      "51": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 37
        }
      },
      "52": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "53": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "54": {
        start: {
          line: 124,
          column: 28
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "55": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "56": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 70
        }
      },
      "57": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "58": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 168,
          column: 3
        }
      },
      "59": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "60": {
        start: {
          line: 148,
          column: 27
        },
        end: {
          line: 148,
          column: 37
        }
      },
      "61": {
        start: {
          line: 149,
          column: 43
        },
        end: {
          line: 149,
          column: 52
        }
      },
      "62": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 154,
          column: 33
        }
      },
      "63": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "64": {
        start: {
          line: 157,
          column: 42
        },
        end: {
          line: 157,
          column: 52
        }
      },
      "65": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 66
        }
      },
      "66": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "67": {
        start: {
          line: 173,
          column: 0
        },
        end: {
          line: 195,
          column: 3
        }
      },
      "68": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 194,
          column: 5
        }
      },
      "69": {
        start: {
          line: 175,
          column: 27
        },
        end: {
          line: 175,
          column: 37
        }
      },
      "70": {
        start: {
          line: 176,
          column: 43
        },
        end: {
          line: 176,
          column: 52
        }
      },
      "71": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 181,
          column: 33
        }
      },
      "72": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "73": {
        start: {
          line: 184,
          column: 42
        },
        end: {
          line: 184,
          column: 53
        }
      },
      "74": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 66
        }
      },
      "75": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "76": {
        start: {
          line: 200,
          column: 0
        },
        end: {
          line: 245,
          column: 3
        }
      },
      "77": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "78": {
        start: {
          line: 202,
          column: 27
        },
        end: {
          line: 202,
          column: 37
        }
      },
      "79": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 203,
          column: 42
        }
      },
      "80": {
        start: {
          line: 204,
          column: 21
        },
        end: {
          line: 204,
          column: 114
        }
      },
      "81": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "82": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "83": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 31
        }
      },
      "84": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "85": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 216,
          column: 16
        }
      },
      "86": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 236,
          column: 11
        }
      },
      "87": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 69
        }
      },
      "88": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "89": {
        start: {
          line: 250,
          column: 0
        },
        end: {
          line: 308,
          column: 3
        }
      },
      "90": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 307,
          column: 5
        }
      },
      "91": {
        start: {
          line: 252,
          column: 41
        },
        end: {
          line: 252,
          column: 50
        }
      },
      "92": {
        start: {
          line: 254,
          column: 22
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "93": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "94": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 38
        }
      },
      "95": {
        start: {
          line: 262,
          column: 30
        },
        end: {
          line: 292,
          column: 10
        }
      },
      "96": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 299,
          column: 11
        }
      },
      "97": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 71
        }
      },
      "98": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 306,
          column: 11
        }
      },
      "99": {
        start: {
          line: 313,
          column: 0
        },
        end: {
          line: 382,
          column: 3
        }
      },
      "100": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 381,
          column: 5
        }
      },
      "101": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 315,
          column: 37
        }
      },
      "102": {
        start: {
          line: 317,
          column: 22
        },
        end: {
          line: 363,
          column: 10
        }
      },
      "103": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "104": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "105": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 373,
          column: 11
        }
      },
      "106": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 67
        }
      },
      "107": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 380,
          column: 11
        }
      },
      "108": {
        start: {
          line: 387,
          column: 0
        },
        end: {
          line: 441,
          column: 3
        }
      },
      "109": {
        start: {
          line: 388,
          column: 4
        },
        end: {
          line: 440,
          column: 5
        }
      },
      "110": {
        start: {
          line: 389,
          column: 27
        },
        end: {
          line: 389,
          column: 37
        }
      },
      "111": {
        start: {
          line: 391,
          column: 29
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "112": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 432,
          column: 11
        }
      },
      "113": {
        start: {
          line: 429,
          column: 56
        },
        end: {
          line: 429,
          column: 68
        }
      },
      "114": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 74
        }
      },
      "115": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 439,
          column: 11
        }
      },
      "116": {
        start: {
          line: 442,
          column: 0
        },
        end: {
          line: 442,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 68
          },
          end: {
            line: 26,
            column: 69
          }
        },
        loc: {
          start: {
            line: 26,
            column: 88
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 114,
            column: 74
          },
          end: {
            line: 114,
            column: 75
          }
        },
        loc: {
          start: {
            line: 114,
            column: 94
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 114
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 146,
            column: 44
          },
          end: {
            line: 146,
            column: 45
          }
        },
        loc: {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 146
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 157,
            column: 37
          },
          end: {
            line: 157,
            column: 38
          }
        },
        loc: {
          start: {
            line: 157,
            column: 42
          },
          end: {
            line: 157,
            column: 52
          }
        },
        line: 157
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 173,
            column: 44
          },
          end: {
            line: 173,
            column: 45
          }
        },
        loc: {
          start: {
            line: 173,
            column: 64
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 173
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 184,
            column: 37
          },
          end: {
            line: 184,
            column: 38
          }
        },
        loc: {
          start: {
            line: 184,
            column: 42
          },
          end: {
            line: 184,
            column: 53
          }
        },
        line: 184
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 200,
            column: 42
          },
          end: {
            line: 200,
            column: 43
          }
        },
        loc: {
          start: {
            line: 200,
            column: 62
          },
          end: {
            line: 245,
            column: 1
          }
        },
        line: 200
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 250,
            column: 35
          },
          end: {
            line: 250,
            column: 36
          }
        },
        loc: {
          start: {
            line: 250,
            column: 55
          },
          end: {
            line: 308,
            column: 1
          }
        },
        line: 250
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 313,
            column: 40
          },
          end: {
            line: 313,
            column: 41
          }
        },
        loc: {
          start: {
            line: 313,
            column: 60
          },
          end: {
            line: 382,
            column: 1
          }
        },
        line: 313
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 387,
            column: 47
          },
          end: {
            line: 387,
            column: 48
          }
        },
        loc: {
          start: {
            line: 387,
            column: 67
          },
          end: {
            line: 441,
            column: 1
          }
        },
        line: 387
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 429,
            column: 51
          },
          end: {
            line: 429,
            column: 52
          }
        },
        loc: {
          start: {
            line: 429,
            column: 56
          },
          end: {
            line: 429,
            column: 68
          }
        },
        line: 429
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 88,
            column: 9
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 56,
            column: 31
          }
        }, {
          start: {
            line: 56,
            column: 35
          },
          end: {
            line: 56,
            column: 54
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 88,
            column: 9
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 62,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 62,
            column: 38
          }
        }, {
          start: {
            line: 62,
            column: 42
          },
          end: {
            line: 62,
            column: 60
          }
        }],
        line: 62
      },
      "10": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: 82,
            column: 17
          },
          end: {
            line: 87,
            column: 13
          }
        }],
        line: 73
      },
      "11": {
        loc: {
          start: {
            line: 92,
            column: 21
          },
          end: {
            line: 92,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 38
          },
          end: {
            line: 92,
            column: 66
          }
        }, {
          start: {
            line: 92,
            column: 69
          },
          end: {
            line: 92,
            column: 99
          }
        }],
        line: 92
      },
      "12": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 26
          }
        }],
        line: 149
      },
      "15": {
        loc: {
          start: {
            line: 149,
            column: 28
          },
          end: {
            line: 149,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 37
          },
          end: {
            line: 149,
            column: 38
          }
        }],
        line: 149
      },
      "16": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 176,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 176,
            column: 26
          }
        }],
        line: 176
      },
      "17": {
        loc: {
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 176,
            column: 37
          },
          end: {
            line: 176,
            column: 38
          }
        }],
        line: 176
      },
      "18": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "19": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "20": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 212,
            column: 25
          }
        }, {
          start: {
            line: 212,
            column: 29
          },
          end: {
            line: 212,
            column: 53
          }
        }],
        line: 212
      },
      "21": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 252,
            column: 24
          },
          end: {
            line: 252,
            column: 26
          }
        }],
        line: 252
      },
      "22": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "23": {
        loc: {
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0],
      "16": [0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "74c132c6d50411d8110589587a1a380182cd0988"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1uioo3uk5z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1uioo3uk5z();
var __importDefault =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[0]++,
/* istanbul ignore next */
(cov_1uioo3uk5z().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1uioo3uk5z().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1uioo3uk5z().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[0]++;
  cov_1uioo3uk5z().s[1]++;
  return /* istanbul ignore next */(cov_1uioo3uk5z().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1uioo3uk5z().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1uioo3uk5z().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1uioo3uk5z().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1uioo3uk5z().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[3]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[4]++, require("../middleware/auth"));
const Follow_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[5]++, require("../models/Follow"));
const User_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[6]++, require("../models/User"));
const logger_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[7]++, require("../config/logger"));
const express_rate_limit_1 =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[8]++, __importDefault(require("express-rate-limit")));
const router =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[9]++, (0, express_1.Router)());
// Rate limiting for user operations
const userLimit =
/* istanbul ignore next */
(cov_1uioo3uk5z().s[10]++, (0, express_rate_limit_1.default)({
  windowMs: 60000,
  // 1 minute
  max: 60,
  // 60 requests per minute
  message: {
    success: false,
    error: 'Too many user requests. Please wait before trying again.'
  }
}));
/**
 * POST /users/:userId/follow
 * Follow/unfollow a user
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[11]++;
router.post('/:userId/follow', auth_1.authenticateToken, userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[1]++;
  cov_1uioo3uk5z().s[12]++;
  try {
    const followerId =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[13]++, req.user?.id);
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[14]++, req.params);
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[15]++, req.body);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[16]++;
    if (!followerId) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[3][0]++;
      cov_1uioo3uk5z().s[17]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[3][1]++;
    }
    cov_1uioo3uk5z().s[18]++;
    if (followerId === userId) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[4][0]++;
      cov_1uioo3uk5z().s[19]++;
      return res.status(400).json({
        success: false,
        error: 'Cannot follow yourself'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[4][1]++;
    }
    // Check if target user exists
    const targetUser =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[20]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[21]++;
    if (!targetUser) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[5][0]++;
      cov_1uioo3uk5z().s[22]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[5][1]++;
    }
    const currentlyFollowing =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[23]++, await Follow_1.Follow.exists({
      follower: followerId,
      following: userId
    }));
    let newFollowState;
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1uioo3uk5z().b[7][0]++, action === 'follow') &&
    /* istanbul ignore next */
    (cov_1uioo3uk5z().b[7][1]++, !currentlyFollowing)) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[6][0]++;
      cov_1uioo3uk5z().s[25]++;
      await Follow_1.Follow.create({
        follower: followerId,
        following: userId
      });
      /* istanbul ignore next */
      cov_1uioo3uk5z().s[26]++;
      await User_1.User.findByIdAndUpdate(followerId, {
        $inc: {
          following: 1
        }
      });
      /* istanbul ignore next */
      cov_1uioo3uk5z().s[27]++;
      await User_1.User.findByIdAndUpdate(userId, {
        $inc: {
          followers: 1
        }
      });
      /* istanbul ignore next */
      cov_1uioo3uk5z().s[28]++;
      newFollowState = true;
    } else {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[6][1]++;
      cov_1uioo3uk5z().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[9][0]++, action === 'unfollow') &&
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[9][1]++, currentlyFollowing)) {
        /* istanbul ignore next */
        cov_1uioo3uk5z().b[8][0]++;
        cov_1uioo3uk5z().s[30]++;
        await Follow_1.Follow.findOneAndDelete({
          follower: followerId,
          following: userId
        });
        /* istanbul ignore next */
        cov_1uioo3uk5z().s[31]++;
        await User_1.User.findByIdAndUpdate(followerId, {
          $inc: {
            following: -1
          }
        });
        /* istanbul ignore next */
        cov_1uioo3uk5z().s[32]++;
        await User_1.User.findByIdAndUpdate(userId, {
          $inc: {
            followers: -1
          }
        });
        /* istanbul ignore next */
        cov_1uioo3uk5z().s[33]++;
        newFollowState = false;
      } else {
        /* istanbul ignore next */
        cov_1uioo3uk5z().b[8][1]++;
        cov_1uioo3uk5z().s[34]++;
        // Toggle behavior - if no action specified, toggle current state
        if (currentlyFollowing) {
          /* istanbul ignore next */
          cov_1uioo3uk5z().b[10][0]++;
          cov_1uioo3uk5z().s[35]++;
          await Follow_1.Follow.findOneAndDelete({
            follower: followerId,
            following: userId
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[36]++;
          await User_1.User.findByIdAndUpdate(followerId, {
            $inc: {
              following: -1
            }
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[37]++;
          await User_1.User.findByIdAndUpdate(userId, {
            $inc: {
              followers: -1
            }
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[38]++;
          newFollowState = false;
        } else {
          /* istanbul ignore next */
          cov_1uioo3uk5z().b[10][1]++;
          cov_1uioo3uk5z().s[39]++;
          await Follow_1.Follow.create({
            follower: followerId,
            following: userId
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[40]++;
          await User_1.User.findByIdAndUpdate(followerId, {
            $inc: {
              following: 1
            }
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[41]++;
          await User_1.User.findByIdAndUpdate(userId, {
            $inc: {
              followers: 1
            }
          });
          /* istanbul ignore next */
          cov_1uioo3uk5z().s[42]++;
          newFollowState = true;
        }
      }
    }
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[43]++;
    res.json({
      success: true,
      isFollowing: newFollowState,
      message: newFollowState ?
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[11][0]++, 'Successfully followed user') :
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[11][1]++, 'Successfully unfollowed user')
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[44]++;
    if (error.code === 11000) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[12][0]++;
      cov_1uioo3uk5z().s[45]++;
      // Duplicate key error - already following
      return res.status(400).json({
        success: false,
        error: 'Already following this user'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[12][1]++;
    }
    cov_1uioo3uk5z().s[46]++;
    logger_1.logger.error('Error in follow/unfollow:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[47]++;
    res.status(500).json({
      success: false,
      error: 'Failed to process follow/unfollow request'
    });
  }
});
/**
 * GET /users/:userId/follow-status
 * Check if current user follows the specified user
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[48]++;
router.get('/:userId/follow-status', auth_1.authenticateToken, userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[2]++;
  cov_1uioo3uk5z().s[49]++;
  try {
    const followerId =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[50]++, req.user?.id);
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[51]++, req.params);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[52]++;
    if (!followerId) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[13][0]++;
      cov_1uioo3uk5z().s[53]++;
      return res.status(401).json({
        success: false,
        error: 'User authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[13][1]++;
    }
    const isFollowing =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[54]++, await Follow_1.Follow.exists({
      follower: followerId,
      following: userId
    }));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[55]++;
    res.json({
      success: true,
      isFollowing: !!isFollowing,
      userId
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[56]++;
    logger_1.logger.error('Error checking follow status:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[57]++;
    res.status(500).json({
      success: false,
      error: 'Failed to check follow status'
    });
  }
});
/**
 * GET /users/:userId/followers
 * Get list of followers for the specified user
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[58]++;
router.get('/:userId/followers', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[3]++;
  cov_1uioo3uk5z().s[59]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[60]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[14][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[15][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[61]++, req.query);
    const followers =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[62]++, await Follow_1.Follow.find({
      following: userId
    }).populate('follower', 'username avatar isVerified').sort({
      createdAt: -1
    }).limit(Number(limit)).skip(Number(offset)));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[63]++;
    res.json({
      success: true,
      followers: followers.map(f => {
        /* istanbul ignore next */
        cov_1uioo3uk5z().f[4]++;
        cov_1uioo3uk5z().s[64]++;
        return f.follower;
      }),
      total: await Follow_1.Follow.countDocuments({
        following: userId
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[65]++;
    logger_1.logger.error('Error fetching followers:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[66]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch followers list'
    });
  }
});
/**
 * GET /users/:userId/following
 * Get list of users that the specified user is following
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[67]++;
router.get('/:userId/following', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[5]++;
  cov_1uioo3uk5z().s[68]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[69]++, req.params);
    const {
      limit =
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[16][0]++, 20),
      offset =
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[17][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[70]++, req.query);
    const following =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[71]++, await Follow_1.Follow.find({
      follower: userId
    }).populate('following', 'username avatar isVerified').sort({
      createdAt: -1
    }).limit(Number(limit)).skip(Number(offset)));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[72]++;
    res.json({
      success: true,
      following: following.map(f => {
        /* istanbul ignore next */
        cov_1uioo3uk5z().f[6]++;
        cov_1uioo3uk5z().s[73]++;
        return f.following;
      }),
      total: await Follow_1.Follow.countDocuments({
        follower: userId
      })
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[74]++;
    logger_1.logger.error('Error fetching following:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[75]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch following list'
    });
  }
});
/**
 * GET /users/:userId/profile
 * Get user profile information
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[76]++;
router.get('/:userId/profile', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[7]++;
  cov_1uioo3uk5z().s[77]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[78]++, req.params);
    const currentUserId =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[79]++, req.user?.id);
    const user =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[80]++, await User_1.User.findById(userId).select('-password -email -phone -backupCodes -totpSecret'));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[81]++;
    if (!user) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[18][0]++;
      cov_1uioo3uk5z().s[82]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[18][1]++;
    }
    let isFollowing =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[83]++, false);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[84]++;
    if (
    /* istanbul ignore next */
    (cov_1uioo3uk5z().b[20][0]++, currentUserId) &&
    /* istanbul ignore next */
    (cov_1uioo3uk5z().b[20][1]++, currentUserId !== userId)) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[19][0]++;
      cov_1uioo3uk5z().s[85]++;
      isFollowing = !!(await Follow_1.Follow.exists({
        follower: currentUserId,
        following: userId
      }));
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[19][1]++;
    }
    cov_1uioo3uk5z().s[86]++;
    res.json({
      success: true,
      user: {
        id: user._id,
        username: user.username,
        displayName: user.displayName,
        avatar: user.avatar,
        bio: user.bio,
        country: user.country,
        isVerified: user.isVerified,
        followers: user.followers,
        following: user.following,
        totalLikes: user.totalLikes,
        totalViews: user.totalViews,
        ogLevel: user.ogLevel,
        isFollowing,
        createdAt: user.createdAt
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[87]++;
    logger_1.logger.error('Error fetching user profile:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[88]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch user profile'
    });
  }
});
/**
 * GET /users/featured
 * Get featured users
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[89]++;
router.get('/featured', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[8]++;
  cov_1uioo3uk5z().s[90]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1uioo3uk5z().b[21][0]++, 10),
      category
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[91]++, req.query);
    // Build query for featured users
    const query =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[92]++, {
      isVerified: true,
      isActive: true
    });
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[93]++;
    if (category) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[22][0]++;
      cov_1uioo3uk5z().s[94]++;
      query.category = category;
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[22][1]++;
    }
    // Get featured users with followers count
    const featuredUsers =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[95]++, await User_1.User.aggregate([{
      $match: query
    }, {
      $lookup: {
        from: 'follows',
        localField: '_id',
        foreignField: 'following',
        as: 'followers'
      }
    }, {
      $addFields: {
        followersCount: {
          $size: '$followers'
        },
        isFeatured: true
      }
    }, {
      $project: {
        username: 1,
        displayName: 1,
        avatar: 1,
        bio: 1,
        isVerified: 1,
        followersCount: 1,
        category: 1,
        createdAt: 1
      }
    }, {
      $sort: {
        followersCount: -1,
        createdAt: -1
      }
    }, {
      $limit: parseInt(limit)
    }]));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[96]++;
    res.json({
      success: true,
      data: {
        users: featuredUsers,
        total: featuredUsers.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[97]++;
    logger_1.logger.error('Error fetching featured users:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[98]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch featured users'
    });
  }
});
/**
 * GET /users/:userId/stats
 * Get user statistics
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[99]++;
router.get('/:userId/stats', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[9]++;
  cov_1uioo3uk5z().s[100]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[101]++, req.params);
    // Get user stats
    const stats =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[102]++, await User_1.User.aggregate([{
      $match: {
        _id: userId
      }
    }, {
      $lookup: {
        from: 'follows',
        localField: '_id',
        foreignField: 'following',
        as: 'followers'
      }
    }, {
      $lookup: {
        from: 'follows',
        localField: '_id',
        foreignField: 'follower',
        as: 'following'
      }
    }, {
      $lookup: {
        from: 'livestreams',
        localField: '_id',
        foreignField: 'userId',
        as: 'streams'
      }
    }, {
      $addFields: {
        followersCount: {
          $size: '$followers'
        },
        followingCount: {
          $size: '$following'
        },
        streamsCount: {
          $size: '$streams'
        },
        totalViews: {
          $sum: '$streams.viewerCount'
        },
        totalLikes: {
          $sum: '$streams.likes'
        }
      }
    }, {
      $project: {
        followersCount: 1,
        followingCount: 1,
        streamsCount: 1,
        totalViews: 1,
        totalLikes: 1,
        joinDate: '$createdAt',
        lastActive: '$updatedAt'
      }
    }]));
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[103]++;
    if (stats.length === 0) {
      /* istanbul ignore next */
      cov_1uioo3uk5z().b[23][0]++;
      cov_1uioo3uk5z().s[104]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1uioo3uk5z().b[23][1]++;
    }
    cov_1uioo3uk5z().s[105]++;
    res.json({
      success: true,
      data: stats[0]
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[106]++;
    logger_1.logger.error('Error fetching user stats:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[107]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch user stats'
    });
  }
});
/**
 * GET /users/:userId/achievements
 * Get user achievements
 */
/* istanbul ignore next */
cov_1uioo3uk5z().s[108]++;
router.get('/:userId/achievements', userLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_1uioo3uk5z().f[10]++;
  cov_1uioo3uk5z().s[109]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[110]++, req.params);
    // Get user achievements (mock data for now)
    const achievements =
    /* istanbul ignore next */
    (cov_1uioo3uk5z().s[111]++, [{
      id: 'first_stream',
      title: 'First Stream',
      description: 'Completed your first live stream',
      icon: '🎥',
      unlockedAt: new Date().toISOString(),
      isUnlocked: true
    }, {
      id: 'social_butterfly',
      title: 'Social Butterfly',
      description: 'Gained 100 followers',
      icon: '🦋',
      unlockedAt: new Date().toISOString(),
      isUnlocked: true
    }, {
      id: 'gaming_master',
      title: 'Gaming Master',
      description: 'Won 10 games in a row',
      icon: '🎮',
      unlockedAt: null,
      isUnlocked: false
    }, {
      id: 'content_creator',
      title: 'Content Creator',
      description: 'Created 50 pieces of content',
      icon: '✨',
      unlockedAt: null,
      isUnlocked: false
    }]);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[112]++;
    res.json({
      success: true,
      data: {
        achievements,
        totalUnlocked: achievements.filter(a => {
          /* istanbul ignore next */
          cov_1uioo3uk5z().f[11]++;
          cov_1uioo3uk5z().s[113]++;
          return a.isUnlocked;
        }).length,
        totalAchievements: achievements.length
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[114]++;
    logger_1.logger.error('Error fetching user achievements:', error);
    /* istanbul ignore next */
    cov_1uioo3uk5z().s[115]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch user achievements'
    });
  }
});
/* istanbul ignore next */
cov_1uioo3uk5z().s[116]++;
exports.default = router;