d33505ce792f782cef936b8466b751b5
"use strict";

/* istanbul ignore next */
function cov_1fao388mkc() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\localization.ts";
  var hash = "3c2174069019f5440a59f839f9db2abf3fc2779d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\localization.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 89
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "10": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 73
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 11
        }
      },
      "14": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "15": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "16": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "17": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 86
        }
      },
      "18": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "19": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 37,
          column: 15
        }
      },
      "20": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 69
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "23": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 92,
          column: 3
        }
      },
      "24": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "25": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 69
        }
      },
      "26": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "27": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "28": {
        start: {
          line: 73,
          column: 40
        },
        end: {
          line: 73,
          column: 48
        }
      },
      "29": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 94
        }
      },
      "30": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "31": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 64
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "33": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 116,
          column: 3
        }
      },
      "34": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "35": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 79
        }
      },
      "36": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 89
        }
      },
      "37": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "38": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "39": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "40": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 68
        }
      },
      "41": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "42": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "43": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "44": {
        start: {
          line: 134,
          column: 23
        },
        end: {
          line: 134,
          column: 69
        }
      },
      "45": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "46": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "47": {
        start: {
          line: 141,
          column: 64
        },
        end: {
          line: 141,
          column: 72
        }
      },
      "48": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 120
        }
      },
      "49": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "50": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 74
        }
      },
      "51": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "52": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 191,
          column: 3
        }
      },
      "53": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 190,
          column: 5
        }
      },
      "54": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 69
        }
      },
      "55": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "56": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "57": {
        start: {
          line: 173,
          column: 35
        },
        end: {
          line: 173,
          column: 43
        }
      },
      "58": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 86
        }
      },
      "59": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 182,
          column: 11
        }
      },
      "60": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 67
        }
      },
      "61": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "62": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 234,
          column: 3
        }
      },
      "63": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "64": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "65": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "66": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "67": {
        start: {
          line: 209,
          column: 33
        },
        end: {
          line: 209,
          column: 41
        }
      },
      "68": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 210,
          column: 38
        }
      },
      "69": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "70": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "71": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 83
        }
      },
      "72": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "73": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 63
        }
      },
      "74": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 232,
          column: 11
        }
      },
      "75": {
        start: {
          line: 236,
          column: 0
        },
        end: {
          line: 251,
          column: 3
        }
      },
      "76": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "77": {
        start: {
          line: 238,
          column: 26
        },
        end: {
          line: 238,
          column: 79
        }
      },
      "78": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 242,
          column: 11
        }
      },
      "79": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 75
        }
      },
      "80": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "81": {
        start: {
          line: 252,
          column: 0
        },
        end: {
          line: 252,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 34
          },
          end: {
            line: 29,
            column: 35
          }
        },
        loc: {
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 3
          },
          end: {
            line: 64,
            column: 4
          }
        },
        loc: {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 64
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 28
          },
          end: {
            line: 94,
            column: 29
          }
        },
        loc: {
          start: {
            line: 94,
            column: 48
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 132,
            column: 3
          },
          end: {
            line: 132,
            column: 4
          }
        },
        loc: {
          start: {
            line: 132,
            column: 23
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 132
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 164,
            column: 3
          },
          end: {
            line: 164,
            column: 4
          }
        },
        loc: {
          start: {
            line: 164,
            column: 23
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 164
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 200,
            column: 3
          },
          end: {
            line: 200,
            column: 4
          }
        },
        loc: {
          start: {
            line: 200,
            column: 23
          },
          end: {
            line: 234,
            column: 1
          }
        },
        line: 200
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 236,
            column: 25
          },
          end: {
            line: 236,
            column: 26
          }
        },
        loc: {
          start: {
            line: 236,
            column: 45
          },
          end: {
            line: 251,
            column: 1
          }
        },
        line: 236
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 96,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 96,
            column: 32
          }
        }, {
          start: {
            line: 96,
            column: 36
          },
          end: {
            line: 96,
            column: 64
          }
        }, {
          start: {
            line: 96,
            column: 68
          },
          end: {
            line: 96,
            column: 79
          }
        }],
        line: 96
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "8": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3c2174069019f5440a59f839f9db2abf3fc2779d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fao388mkc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fao388mkc();
var __importDefault =
/* istanbul ignore next */
(cov_1fao388mkc().s[0]++,
/* istanbul ignore next */
(cov_1fao388mkc().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1fao388mkc().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1fao388mkc().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1fao388mkc().f[0]++;
  cov_1fao388mkc().s[1]++;
  return /* istanbul ignore next */(cov_1fao388mkc().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1fao388mkc().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1fao388mkc().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1fao388mkc().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1fao388mkc().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1fao388mkc().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_1fao388mkc().s[4]++, require("express-validator"));
const logger_1 =
/* istanbul ignore next */
(cov_1fao388mkc().s[5]++, require("../config/logger"));
const LocalizationService_1 =
/* istanbul ignore next */
(cov_1fao388mkc().s[6]++, __importDefault(require("../services/LocalizationService")));
const router =
/* istanbul ignore next */
(cov_1fao388mkc().s[7]++, express_1.default.Router());
// Get supported locales
/* istanbul ignore next */
cov_1fao388mkc().s[8]++;
router.get('/locales', async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[1]++;
  cov_1fao388mkc().s[9]++;
  try {
    const locales =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[10]++, LocalizationService_1.default.getSupportedLocales());
    /* istanbul ignore next */
    cov_1fao388mkc().s[11]++;
    res.json({
      success: true,
      data: locales
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[12]++;
    logger_1.logger.error('Error getting supported locales:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[13]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get locales'
    });
  }
});
// Get locale configuration
/* istanbul ignore next */
cov_1fao388mkc().s[14]++;
router.get('/locale/:localeCode', async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[2]++;
  cov_1fao388mkc().s[15]++;
  try {
    const {
      localeCode
    } =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[16]++, req.params);
    const locale =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[17]++, await LocalizationService_1.default.getLocaleConfig(localeCode));
    /* istanbul ignore next */
    cov_1fao388mkc().s[18]++;
    if (!locale) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[3][0]++;
      cov_1fao388mkc().s[19]++;
      return res.status(404).json({
        success: false,
        error: 'Locale not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[3][1]++;
    }
    cov_1fao388mkc().s[20]++;
    res.json({
      success: true,
      data: locale
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[21]++;
    logger_1.logger.error('Error getting locale config:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[22]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get locale configuration'
    });
  }
});
// Translate text
/* istanbul ignore next */
cov_1fao388mkc().s[23]++;
router.post('/translate', [(0, express_validator_1.body)('key').notEmpty().withMessage('Translation key is required'), (0, express_validator_1.body)('locale').notEmpty().withMessage('Locale code is required'), (0, express_validator_1.body)('params').optional().isObject().withMessage('Parameters must be an object')], async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[3]++;
  cov_1fao388mkc().s[24]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[25]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1fao388mkc().s[26]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[4][0]++;
      cov_1fao388mkc().s[27]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[4][1]++;
    }
    const {
      key,
      locale,
      params
    } =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[28]++, req.body);
    const translation =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[29]++, await LocalizationService_1.default.translate(key, locale, params));
    /* istanbul ignore next */
    cov_1fao388mkc().s[30]++;
    res.json({
      success: true,
      data: {
        key,
        locale,
        translation,
        params
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[31]++;
    logger_1.logger.error('Error translating text:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[32]++;
    res.status(500).json({
      success: false,
      error: 'Translation failed'
    });
  }
});
// Get geo location
/* istanbul ignore next */
cov_1fao388mkc().s[33]++;
router.get('/geo-location', async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[4]++;
  cov_1fao388mkc().s[34]++;
  try {
    const ipAddress =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[35]++,
    /* istanbul ignore next */
    (cov_1fao388mkc().b[5][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_1fao388mkc().b[5][1]++, req.connection.remoteAddress) ||
    /* istanbul ignore next */
    (cov_1fao388mkc().b[5][2]++, '127.0.0.1'));
    const geoLocation =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[36]++, await LocalizationService_1.default.getGeoLocation(ipAddress));
    /* istanbul ignore next */
    cov_1fao388mkc().s[37]++;
    if (!geoLocation) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[6][0]++;
      cov_1fao388mkc().s[38]++;
      return res.status(404).json({
        success: false,
        error: 'Geo location not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[6][1]++;
    }
    cov_1fao388mkc().s[39]++;
    res.json({
      success: true,
      data: geoLocation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[40]++;
    logger_1.logger.error('Error getting geo location:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get geo location'
    });
  }
});
// Check content allowance
/* istanbul ignore next */
cov_1fao388mkc().s[42]++;
router.post('/content-check', [(0, express_validator_1.body)('countryCode').notEmpty().withMessage('Country code is required'), (0, express_validator_1.body)('contentType').notEmpty().withMessage('Content type is required'), (0, express_validator_1.body)('category').notEmpty().withMessage('Category is required'), (0, express_validator_1.body)('userAge').optional().isInt({
  min: 0,
  max: 120
}).withMessage('Valid age is required')], async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[5]++;
  cov_1fao388mkc().s[43]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[44]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1fao388mkc().s[45]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[7][0]++;
      cov_1fao388mkc().s[46]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[7][1]++;
    }
    const {
      countryCode,
      contentType,
      category,
      userAge
    } =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[47]++, req.body);
    const result =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[48]++, await LocalizationService_1.default.isContentAllowed(countryCode, contentType, category, userAge));
    /* istanbul ignore next */
    cov_1fao388mkc().s[49]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[50]++;
    logger_1.logger.error('Error checking content allowance:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[51]++;
    res.status(500).json({
      success: false,
      error: 'Content check failed'
    });
  }
});
// Format currency
/* istanbul ignore next */
cov_1fao388mkc().s[52]++;
router.post('/format-currency', [(0, express_validator_1.body)('amount').isFloat({
  min: 0
}).withMessage('Valid amount is required'), (0, express_validator_1.body)('locale').notEmpty().withMessage('Locale code is required')], async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[6]++;
  cov_1fao388mkc().s[53]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[54]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1fao388mkc().s[55]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[8][0]++;
      cov_1fao388mkc().s[56]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[8][1]++;
    }
    const {
      amount,
      locale
    } =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[57]++, req.body);
    const formatted =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[58]++, LocalizationService_1.default.formatCurrency(amount, locale));
    /* istanbul ignore next */
    cov_1fao388mkc().s[59]++;
    res.json({
      success: true,
      data: {
        amount,
        locale,
        formatted
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[60]++;
    logger_1.logger.error('Error formatting currency:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[61]++;
    res.status(500).json({
      success: false,
      error: 'Currency formatting failed'
    });
  }
});
// Format date
/* istanbul ignore next */
cov_1fao388mkc().s[62]++;
router.post('/format-date', [(0, express_validator_1.body)('date').notEmpty().withMessage('Date is required'), (0, express_validator_1.body)('locale').notEmpty().withMessage('Locale code is required')], async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[7]++;
  cov_1fao388mkc().s[63]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[64]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_1fao388mkc().s[65]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[9][0]++;
      cov_1fao388mkc().s[66]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[9][1]++;
    }
    const {
      date,
      locale
    } =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[67]++, req.body);
    const dateObj =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[68]++, new Date(date));
    /* istanbul ignore next */
    cov_1fao388mkc().s[69]++;
    if (isNaN(dateObj.getTime())) {
      /* istanbul ignore next */
      cov_1fao388mkc().b[10][0]++;
      cov_1fao388mkc().s[70]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid date format'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1fao388mkc().b[10][1]++;
    }
    const formatted =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[71]++, LocalizationService_1.default.formatDate(dateObj, locale));
    /* istanbul ignore next */
    cov_1fao388mkc().s[72]++;
    res.json({
      success: true,
      data: {
        originalDate: date,
        locale,
        formatted
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[73]++;
    logger_1.logger.error('Error formatting date:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[74]++;
    res.status(500).json({
      success: false,
      error: 'Date formatting failed'
    });
  }
});
// Get supported countries
/* istanbul ignore next */
cov_1fao388mkc().s[75]++;
router.get('/countries', async (req, res) => {
  /* istanbul ignore next */
  cov_1fao388mkc().f[8]++;
  cov_1fao388mkc().s[76]++;
  try {
    const countries =
    /* istanbul ignore next */
    (cov_1fao388mkc().s[77]++, LocalizationService_1.default.getSupportedCountries());
    /* istanbul ignore next */
    cov_1fao388mkc().s[78]++;
    res.json({
      success: true,
      data: countries
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1fao388mkc().s[79]++;
    logger_1.logger.error('Error getting supported countries:', error);
    /* istanbul ignore next */
    cov_1fao388mkc().s[80]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get countries'
    });
  }
});
/* istanbul ignore next */
cov_1fao388mkc().s[81]++;
exports.default = router;