d564f643cd9d34938a8321be27eb19a4
"use strict";

/* istanbul ignore next */
function cov_hablglbhm() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\advanced-fraud-detection.ts";
  var hash = "d2d319e6869259234f04f6396d27355ebcb0a6c4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\advanced-fraud-detection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 40
        },
        end: {
          line: 4,
          column: 92
        }
      },
      "3": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 68
        }
      },
      "4": {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 68
        }
      },
      "6": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 43
        }
      },
      "7": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "8": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 100
        }
      },
      "11": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "12": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "13": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "14": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 50,
          column: 3
        }
      },
      "15": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 49,
          column: 5
        }
      },
      "16": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 36
        }
      },
      "17": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "18": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "19": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 70
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "22": {
        start: {
          line: 55,
          column: 0
        },
        end: {
          line: 71,
          column: 3
        }
      },
      "23": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "24": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 49
        }
      },
      "25": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 60
        }
      },
      "26": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 70
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "29": {
        start: {
          line: 76,
          column: 0
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "30": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "31": {
        start: {
          line: 78,
          column: 30
        },
        end: {
          line: 78,
          column: 40
        }
      },
      "32": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 36
        }
      },
      "33": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 49
        }
      },
      "34": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 80
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "36": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 70
        }
      },
      "37": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "38": {
        start: {
          line: 99,
          column: 0
        },
        end: {
          line: 116,
          column: 3
        }
      },
      "39": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "40": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 40
        }
      },
      "41": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 49
        }
      },
      "42": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "43": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "44": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 70
        }
      },
      "45": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "46": {
        start: {
          line: 121,
          column: 0
        },
        end: {
          line: 142,
          column: 3
        }
      },
      "47": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "48": {
        start: {
          line: 123,
          column: 49
        },
        end: {
          line: 123,
          column: 58
        }
      },
      "49": {
        start: {
          line: 124,
          column: 24
        },
        end: {
          line: 124,
          column: 49
        }
      },
      "50": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 129,
          column: 10
        }
      },
      "51": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "52": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 68
        }
      },
      "53": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "54": {
        start: {
          line: 147,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "55": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "56": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 38
        }
      },
      "57": {
        start: {
          line: 150,
          column: 31
        },
        end: {
          line: 150,
          column: 39
        }
      },
      "58": {
        start: {
          line: 151,
          column: 27
        },
        end: {
          line: 151,
          column: 50
        }
      },
      "59": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "60": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 73
        }
      },
      "61": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "62": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 69
        }
      },
      "63": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "64": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 188,
          column: 3
        }
      },
      "65": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "66": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 35
        }
      },
      "67": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 49
        }
      },
      "68": {
        start: {
          line: 175,
          column: 25
        },
        end: {
          line: 175,
          column: 63
        }
      },
      "69": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "70": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 68
        }
      },
      "71": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "72": {
        start: {
          line: 193,
          column: 0
        },
        end: {
          line: 209,
          column: 3
        }
      },
      "73": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "74": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 195,
          column: 49
        }
      },
      "75": {
        start: {
          line: 196,
          column: 26
        },
        end: {
          line: 196,
          column: 59
        }
      },
      "76": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 200,
          column: 11
        }
      },
      "77": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 71
        }
      },
      "78": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 11
        }
      },
      "79": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 231,
          column: 3
        }
      },
      "80": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "81": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 35
        }
      },
      "82": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 49
        }
      },
      "83": {
        start: {
          line: 218,
          column: 26
        },
        end: {
          line: 218,
          column: 66
        }
      },
      "84": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "85": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 70
        }
      },
      "86": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 229,
          column: 11
        }
      },
      "87": {
        start: {
          line: 236,
          column: 0
        },
        end: {
          line: 254,
          column: 3
        }
      },
      "88": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "89": {
        start: {
          line: 238,
          column: 30
        },
        end: {
          line: 238,
          column: 40
        }
      },
      "90": {
        start: {
          line: 239,
          column: 29
        },
        end: {
          line: 239,
          column: 38
        }
      },
      "91": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 49
        }
      },
      "92": {
        start: {
          line: 241,
          column: 27
        },
        end: {
          line: 241,
          column: 78
        }
      },
      "93": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "94": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 69
        }
      },
      "95": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 252,
          column: 11
        }
      },
      "96": {
        start: {
          line: 259,
          column: 0
        },
        end: {
          line: 276,
          column: 3
        }
      },
      "97": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "98": {
        start: {
          line: 261,
          column: 35
        },
        end: {
          line: 261,
          column: 43
        }
      },
      "99": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 49
        }
      },
      "100": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 53
        }
      },
      "101": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "102": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 72
        }
      },
      "103": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 274,
          column: 11
        }
      },
      "104": {
        start: {
          line: 281,
          column: 0
        },
        end: {
          line: 298,
          column: 3
        }
      },
      "105": {
        start: {
          line: 282,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "106": {
        start: {
          line: 283,
          column: 27
        },
        end: {
          line: 283,
          column: 37
        }
      },
      "107": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 49
        }
      },
      "108": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 50
        }
      },
      "109": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "110": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 76
        }
      },
      "111": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "112": {
        start: {
          line: 299,
          column: 0
        },
        end: {
          line: 299,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 12,
            column: 27
          }
        },
        loc: {
          start: {
            line: 12,
            column: 38
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 156
          },
          end: {
            line: 33,
            column: 157
          }
        },
        loc: {
          start: {
            line: 33,
            column: 176
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 121
          },
          end: {
            line: 55,
            column: 122
          }
        },
        loc: {
          start: {
            line: 55,
            column: 141
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 76,
            column: 166
          },
          end: {
            line: 76,
            column: 167
          }
        },
        loc: {
          start: {
            line: 76,
            column: 186
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 76
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 135
          },
          end: {
            line: 99,
            column: 136
          }
        },
        loc: {
          start: {
            line: 99,
            column: 155
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 121,
            column: 119
          },
          end: {
            line: 121,
            column: 120
          }
        },
        loc: {
          start: {
            line: 121,
            column: 139
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 121
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 171
          },
          end: {
            line: 147,
            column: 172
          }
        },
        loc: {
          start: {
            line: 147,
            column: 191
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 171,
            column: 155
          },
          end: {
            line: 171,
            column: 156
          }
        },
        loc: {
          start: {
            line: 171,
            column: 175
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 171
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 193,
            column: 122
          },
          end: {
            line: 193,
            column: 123
          }
        },
        loc: {
          start: {
            line: 193,
            column: 142
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 193
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 214,
            column: 125
          },
          end: {
            line: 214,
            column: 126
          }
        },
        loc: {
          start: {
            line: 214,
            column: 145
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 214
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 236,
            column: 137
          },
          end: {
            line: 236,
            column: 138
          }
        },
        loc: {
          start: {
            line: 236,
            column: 157
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 236
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 259,
            column: 157
          },
          end: {
            line: 259,
            column: 158
          }
        },
        loc: {
          start: {
            line: 259,
            column: 177
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 259
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 281,
            column: 133
          },
          end: {
            line: 281,
            column: 134
          }
        },
        loc: {
          start: {
            line: 281,
            column: 153
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 281
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 123,
            column: 34
          },
          end: {
            line: 123,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 123,
            column: 44
          }
        }],
        line: 123
      },
      "2": {
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 39
          }
        }, {
          start: {
            line: 151,
            column: 43
          },
          end: {
            line: 151,
            column: 50
          }
        }],
        line: 151
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d2d319e6869259234f04f6396d27355ebcb0a6c4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hablglbhm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hablglbhm();
cov_hablglbhm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_hablglbhm().s[1]++, require("express"));
const AdvancedFraudDetectionService_1 =
/* istanbul ignore next */
(cov_hablglbhm().s[2]++, require("../services/AdvancedFraudDetectionService"));
const enhancedSecurity_1 =
/* istanbul ignore next */
(cov_hablglbhm().s[3]++, require("../middleware/enhancedSecurity"));
const enhancedSecurity_2 =
/* istanbul ignore next */
(cov_hablglbhm().s[4]++, require("../middleware/enhancedSecurity"));
const enhancedSecurity_3 =
/* istanbul ignore next */
(cov_hablglbhm().s[5]++, require("../middleware/enhancedSecurity"));
const logger_1 =
/* istanbul ignore next */
(cov_hablglbhm().s[6]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_hablglbhm().s[7]++, (0, express_1.Router)());
// Initialize service with MongoDB and Redis
let fraudDetectionService;
/* istanbul ignore next */
cov_hablglbhm().s[8]++;
const initializeService = async () => {
  /* istanbul ignore next */
  cov_hablglbhm().f[0]++;
  cov_hablglbhm().s[9]++;
  if (!fraudDetectionService) {
    /* istanbul ignore next */
    cov_hablglbhm().b[0][0]++;
    cov_hablglbhm().s[10]++;
    fraudDetectionService = new AdvancedFraudDetectionService_1.AdvancedFraudDetectionService();
  } else
  /* istanbul ignore next */
  {
    cov_hablglbhm().b[0][1]++;
  }
  cov_hablglbhm().s[11]++;
  return fraudDetectionService;
};
// Rate limiting for fraud detection endpoints
const fraudRateLimit =
/* istanbul ignore next */
(cov_hablglbhm().s[12]++, (0, enhancedSecurity_3.createRateLimit)({
  windowMs: 60 * 1000,
  // 1 minute
  max: 20,
  // 20 requests per minute
  message: 'Too many fraud detection requests, please try again later'
}));
const adminRateLimit =
/* istanbul ignore next */
(cov_hablglbhm().s[13]++, (0, enhancedSecurity_3.createRateLimit)({
  windowMs: 60 * 1000,
  // 1 minute
  max: 10,
  // 10 requests per minute
  message: 'Too many admin requests, please try again later'
}));
/**
 * POST /api/v1/fraud-detection/patterns
 * Create fraud detection pattern (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[14]++;
router.post('/fraud-detection/patterns', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[1]++;
  cov_hablglbhm().s[15]++;
  try {
    const patternData =
    /* istanbul ignore next */
    (cov_hablglbhm().s[16]++, req.body);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[17]++, await initializeService());
    const pattern =
    /* istanbul ignore next */
    (cov_hablglbhm().s[18]++, await service.createFraudPattern(patternData));
    /* istanbul ignore next */
    cov_hablglbhm().s[19]++;
    return res.json({
      success: true,
      data: pattern
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[20]++;
    logger_1.logger.error('Error creating fraud pattern:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[21]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to create fraud pattern'
    });
  }
});
/**
 * GET /api/v1/fraud-detection/patterns
 * Get all fraud detection patterns (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[22]++;
router.get('/fraud-detection/patterns', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[2]++;
  cov_hablglbhm().s[23]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[24]++, await initializeService());
    const patterns =
    /* istanbul ignore next */
    (cov_hablglbhm().s[25]++, await service.getAllFraudPatterns());
    /* istanbul ignore next */
    cov_hablglbhm().s[26]++;
    return res.json({
      success: true,
      data: patterns
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[27]++;
    logger_1.logger.error('Error getting fraud patterns:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[28]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get fraud patterns'
    });
  }
});
/**
 * PUT /api/v1/fraud-detection/patterns/:patternId
 * Update fraud detection pattern (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[29]++;
router.put('/fraud-detection/patterns/:patternId', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[3]++;
  cov_hablglbhm().s[30]++;
  try {
    const {
      patternId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[31]++, req.params);
    const patternData =
    /* istanbul ignore next */
    (cov_hablglbhm().s[32]++, req.body);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[33]++, await initializeService());
    const pattern =
    /* istanbul ignore next */
    (cov_hablglbhm().s[34]++, await service.updateFraudPattern(patternId, patternData));
    /* istanbul ignore next */
    cov_hablglbhm().s[35]++;
    return res.json({
      success: true,
      data: pattern
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[36]++;
    logger_1.logger.error('Error updating fraud pattern:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[37]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to update fraud pattern'
    });
  }
});
/**
 * DELETE /api/v1/fraud-detection/patterns/:patternId
 * Delete fraud detection pattern (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[38]++;
router.delete('/fraud-detection/patterns/:patternId', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[4]++;
  cov_hablglbhm().s[39]++;
  try {
    const {
      patternId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[40]++, req.params);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[41]++, await initializeService());
    /* istanbul ignore next */
    cov_hablglbhm().s[42]++;
    await service.deleteFraudPattern(patternId);
    /* istanbul ignore next */
    cov_hablglbhm().s[43]++;
    return res.json({
      success: true,
      message: 'Fraud pattern deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[44]++;
    logger_1.logger.error('Error deleting fraud pattern:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[45]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to delete fraud pattern'
    });
  }
});
/**
 * GET /api/v1/fraud-detection/alerts
 * Get fraud alerts (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[46]++;
router.get('/fraud-detection/alerts', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[5]++;
  cov_hablglbhm().s[47]++;
  try {
    const {
      status,
      severity,
      limit =
      /* istanbul ignore next */
      (cov_hablglbhm().b[1][0]++, 50)
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[48]++, req.query);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[49]++, await initializeService());
    const alerts =
    /* istanbul ignore next */
    (cov_hablglbhm().s[50]++, await service.getFraudAlerts({
      status: status,
      severity: severity,
      limit: parseInt(limit)
    }));
    /* istanbul ignore next */
    cov_hablglbhm().s[51]++;
    return res.json({
      success: true,
      data: alerts
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[52]++;
    logger_1.logger.error('Error getting fraud alerts:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[53]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get fraud alerts'
    });
  }
});
/**
 * POST /api/v1/fraud-detection/alerts/:alertId/resolve
 * Resolve fraud alert (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[54]++;
router.post('/fraud-detection/alerts/:alertId/resolve', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[6]++;
  cov_hablglbhm().s[55]++;
  try {
    const {
      alertId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[56]++, req.params);
    const {
      resolution
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[57]++, req.body);
    const resolvedBy =
    /* istanbul ignore next */
    (cov_hablglbhm().s[58]++,
    /* istanbul ignore next */
    (cov_hablglbhm().b[2][0]++, req.user?.id) ||
    /* istanbul ignore next */
    (cov_hablglbhm().b[2][1]++, 'admin'));
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[59]++, await initializeService());
    /* istanbul ignore next */
    cov_hablglbhm().s[60]++;
    await service.resolveFraudAlert(alertId, resolvedBy, resolution);
    /* istanbul ignore next */
    cov_hablglbhm().s[61]++;
    return res.json({
      success: true,
      message: 'Fraud alert resolved successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[62]++;
    logger_1.logger.error('Error resolving fraud alert:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[63]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to resolve fraud alert'
    });
  }
});
/**
 * POST /api/v1/fraud-detection/analyze
 * Analyze user for fraud (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[64]++;
router.post('/fraud-detection/analyze', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, fraudRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[7]++;
  cov_hablglbhm().s[65]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[66]++, req.body);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[67]++, await initializeService());
    const analysis =
    /* istanbul ignore next */
    (cov_hablglbhm().s[68]++, await service.analyzeUserFraud(userId));
    /* istanbul ignore next */
    cov_hablglbhm().s[69]++;
    return res.json({
      success: true,
      data: analysis
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[70]++;
    logger_1.logger.error('Error analyzing user fraud:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[71]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to analyze user fraud'
    });
  }
});
/**
 * GET /api/v1/fraud-detection/analytics
 * Get fraud detection analytics (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[72]++;
router.get('/fraud-detection/analytics', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[8]++;
  cov_hablglbhm().s[73]++;
  try {
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[74]++, await initializeService());
    const analytics =
    /* istanbul ignore next */
    (cov_hablglbhm().s[75]++, await service.getFraudAnalytics());
    /* istanbul ignore next */
    cov_hablglbhm().s[76]++;
    return res.json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[77]++;
    logger_1.logger.error('Error getting fraud analytics:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[78]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get fraud analytics'
    });
  }
});
/**
 * POST /api/v1/fraud-detection/risk-score
 * Calculate fraud risk score
 */
/* istanbul ignore next */
cov_hablglbhm().s[79]++;
router.post('/fraud-detection/risk-score', enhancedSecurity_1.requireAuth, fraudRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[9]++;
  cov_hablglbhm().s[80]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[81]++, req.body);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[82]++, await initializeService());
    const riskScore =
    /* istanbul ignore next */
    (cov_hablglbhm().s[83]++, await service.calculateRiskScore(userId));
    /* istanbul ignore next */
    cov_hablglbhm().s[84]++;
    return res.json({
      success: true,
      data: riskScore
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[85]++;
    logger_1.logger.error('Error calculating risk score:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[86]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to calculate risk score'
    });
  }
});
/**
 * GET /api/v1/fraud-detection/patterns/:patternId/test
 * Test fraud pattern (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[87]++;
router.get('/fraud-detection/patterns/:patternId/test', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[10]++;
  cov_hablglbhm().s[88]++;
  try {
    const {
      patternId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[89]++, req.params);
    const {
      testData
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[90]++, req.query);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[91]++, await initializeService());
    const testResult =
    /* istanbul ignore next */
    (cov_hablglbhm().s[92]++, await service.testFraudPattern(patternId, testData));
    /* istanbul ignore next */
    cov_hablglbhm().s[93]++;
    return res.json({
      success: true,
      data: testResult
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[94]++;
    logger_1.logger.error('Error testing fraud pattern:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[95]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to test fraud pattern'
    });
  }
});
/**
 * POST /api/v1/fraud-detection/whitelist
 * Add user to fraud whitelist (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[96]++;
router.post('/fraud-detection/whitelist', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, enhancedSecurity_2.validateInput, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[11]++;
  cov_hablglbhm().s[97]++;
  try {
    const {
      userId,
      reason
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[98]++, req.body);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[99]++, await initializeService());
    /* istanbul ignore next */
    cov_hablglbhm().s[100]++;
    await service.addToWhitelist(userId, reason);
    /* istanbul ignore next */
    cov_hablglbhm().s[101]++;
    return res.json({
      success: true,
      message: 'User added to whitelist successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[102]++;
    logger_1.logger.error('Error adding user to whitelist:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[103]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to add user to whitelist'
    });
  }
});
/**
 * DELETE /api/v1/fraud-detection/whitelist/:userId
 * Remove user from fraud whitelist (admin only)
 */
/* istanbul ignore next */
cov_hablglbhm().s[104]++;
router.delete('/fraud-detection/whitelist/:userId', enhancedSecurity_1.requireAuth, enhancedSecurity_1.requireAdmin, adminRateLimit, async (req, res) => {
  /* istanbul ignore next */
  cov_hablglbhm().f[12]++;
  cov_hablglbhm().s[105]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_hablglbhm().s[106]++, req.params);
    const service =
    /* istanbul ignore next */
    (cov_hablglbhm().s[107]++, await initializeService());
    /* istanbul ignore next */
    cov_hablglbhm().s[108]++;
    await service.removeFromWhitelist(userId);
    /* istanbul ignore next */
    cov_hablglbhm().s[109]++;
    return res.json({
      success: true,
      message: 'User removed from whitelist successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_hablglbhm().s[110]++;
    logger_1.logger.error('Error removing user from whitelist:', error);
    /* istanbul ignore next */
    cov_hablglbhm().s[111]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to remove user from whitelist'
    });
  }
});
/* istanbul ignore next */
cov_hablglbhm().s[112]++;
exports.default = router;