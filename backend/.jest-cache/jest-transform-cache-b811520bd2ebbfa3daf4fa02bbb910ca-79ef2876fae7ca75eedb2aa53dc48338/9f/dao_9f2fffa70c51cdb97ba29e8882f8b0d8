f9f15a8ee6f3c34b08daa13265d6b470
"use strict";

/* istanbul ignore next */
function cov_2dzk3p6u30() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\dao.ts";
  var hash = "0cf2870c1cd4235203f9ec9e39f49ca4b9725c23";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\dao.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 77
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 76
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "10": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "11": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "12": {
        start: {
          line: 19,
          column: 64
        },
        end: {
          line: 19,
          column: 72
        }
      },
      "13": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "15": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "17": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "18": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 109
        }
      },
      "19": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 31,
          column: 11
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 98
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 73
        }
      },
      "22": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "23": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "24": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 41
        }
      },
      "25": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 39
        }
      },
      "26": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "27": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 77
        }
      },
      "28": {
        start: {
          line: 49,
          column: 25
        },
        end: {
          line: 49,
          column: 73
        }
      },
      "29": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "30": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 131
        }
      },
      "31": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 66
        }
      },
      "32": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "33": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "34": {
        start: {
          line: 66,
          column: 31
        },
        end: {
          line: 66,
          column: 41
        }
      },
      "35": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 35
        }
      },
      "36": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 39
        }
      },
      "37": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "38": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 77
        }
      },
      "39": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "40": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 79
        }
      },
      "41": {
        start: {
          line: 75,
          column: 21
        },
        end: {
          line: 75,
          column: 74
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "43": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 128
        }
      },
      "44": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 63
        }
      },
      "45": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "46": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "47": {
        start: {
          line: 92,
          column: 31
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "48": {
        start: {
          line: 93,
          column: 23
        },
        end: {
          line: 93,
          column: 39
        }
      },
      "49": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "50": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 77
        }
      },
      "51": {
        start: {
          line: 97,
          column: 25
        },
        end: {
          line: 97,
          column: 77
        }
      },
      "52": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "53": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 134
        }
      },
      "54": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 70
        }
      },
      "55": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 132,
          column: 3
        }
      },
      "56": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "57": {
        start: {
          line: 114,
          column: 58
        },
        end: {
          line: 114,
          column: 66
        }
      },
      "58": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 115,
          column: 39
        }
      },
      "59": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "60": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 77
        }
      },
      "61": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "62": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 96
        }
      },
      "63": {
        start: {
          line: 122,
          column: 27
        },
        end: {
          line: 122,
          column: 144
        }
      },
      "64": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "65": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 100
        }
      },
      "66": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 71
        }
      },
      "67": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 154,
          column: 3
        }
      },
      "68": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      "69": {
        start: {
          line: 139,
          column: 31
        },
        end: {
          line: 139,
          column: 40
        }
      },
      "70": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 39
        }
      },
      "71": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "72": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 77
        }
      },
      "73": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 65
        }
      },
      "74": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "75": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 97
        }
      },
      "76": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 66
        }
      },
      "77": {
        start: {
          line: 159,
          column: 0
        },
        end: {
          line: 175,
          column: 3
        }
      },
      "78": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "79": {
        start: {
          line: 161,
          column: 23
        },
        end: {
          line: 161,
          column: 39
        }
      },
      "80": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "81": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 77
        }
      },
      "82": {
        start: {
          line: 165,
          column: 26
        },
        end: {
          line: 165,
          column: 60
        }
      },
      "83": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "84": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 98
        }
      },
      "85": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 71
        }
      },
      "86": {
        start: {
          line: 180,
          column: 0
        },
        end: {
          line: 196,
          column: 3
        }
      },
      "87": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "88": {
        start: {
          line: 182,
          column: 23
        },
        end: {
          line: 182,
          column: 39
        }
      },
      "89": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "90": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 77
        }
      },
      "91": {
        start: {
          line: 186,
          column: 26
        },
        end: {
          line: 186,
          column: 63
        }
      },
      "92": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "93": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 101
        }
      },
      "94": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 74
        }
      },
      "95": {
        start: {
          line: 197,
          column: 0
        },
        end: {
          line: 197,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 45
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 50
          },
          end: {
            line: 42,
            column: 51
          }
        },
        loc: {
          start: {
            line: 42,
            column: 70
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 42
          },
          end: {
            line: 64,
            column: 43
          }
        },
        loc: {
          start: {
            line: 64,
            column: 62
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 45
          },
          end: {
            line: 90,
            column: 46
          }
        },
        loc: {
          start: {
            line: 90,
            column: 65
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 112,
            column: 25
          },
          end: {
            line: 112,
            column: 26
          }
        },
        loc: {
          start: {
            line: 112,
            column: 45
          },
          end: {
            line: 132,
            column: 1
          }
        },
        line: 112
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 137,
            column: 24
          },
          end: {
            line: 137,
            column: 25
          }
        },
        loc: {
          start: {
            line: 137,
            column: 44
          },
          end: {
            line: 154,
            column: 1
          }
        },
        line: 137
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 26
          }
        },
        loc: {
          start: {
            line: 159,
            column: 45
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 159
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 33
          }
        },
        loc: {
          start: {
            line: 180,
            column: 52
          },
          end: {
            line: 196,
            column: 1
          }
        },
        line: 180
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 18
          }
        }, {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 34
          }
        }, {
          start: {
            line: 24,
            column: 38
          },
          end: {
            line: 24,
            column: 47
          }
        }, {
          start: {
            line: 24,
            column: 51
          },
          end: {
            line: 24,
            column: 56
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 19
          }
        }, {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 72,
            column: 73
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 119,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 119,
            column: 23
          }
        }, {
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 119,
            column: 34
          }
        }, {
          start: {
            line: 119,
            column: 38
          },
          end: {
            line: 119,
            column: 49
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 100
          },
          end: {
            line: 122,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 112
          },
          end: {
            line: 122,
            column: 131
          }
        }, {
          start: {
            line: 122,
            column: 134
          },
          end: {
            line: 122,
            column: 143
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "14": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0cf2870c1cd4235203f9ec9e39f49ca4b9725c23"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dzk3p6u30 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dzk3p6u30();
cov_2dzk3p6u30().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[1]++, require("express"));
const DAOGovernanceService_1 =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[2]++, require("@/services/dao/DAOGovernanceService"));
const auth_1 =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[3]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[4]++, require("@/middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[5]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[6]++, (0, express_1.Router)());
const daoService =
/* istanbul ignore next */
(cov_2dzk3p6u30().s[7]++, DAOGovernanceService_1.DAOGovernanceService.getInstance());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_2dzk3p6u30().s[8]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_2dzk3p6u30().s[9]++;
router.use(security_1.socialLimiter);
/**
 * @route POST /api/v1/dao/proposal
 * @desc Create a new DAO proposal
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[10]++;
router.post('/proposal', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[0]++;
  cov_2dzk3p6u30().s[11]++;
  try {
    const {
      title,
      description,
      category,
      type,
      options
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[12]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[13]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[14]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[0][0]++;
      cov_2dzk3p6u30().s[15]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[0][1]++;
    }
    cov_2dzk3p6u30().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[2][0]++, !title) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[2][1]++, !description) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[2][2]++, !category) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[2][3]++, !type)) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[1][0]++;
      cov_2dzk3p6u30().s[17]++;
      return res.status(400).json({
        error: 'Missing required fields'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[1][1]++;
    }
    const proposal =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[18]++, await daoService.createProposal(userId, title, description, category, type, options));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[19]++;
    res.status(201).json({
      success: true,
      data: proposal
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[20]++;
    logger_1.logger.error('Error creating DAO proposal', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[21]++;
    res.status(500).json({
      error: 'Failed to create DAO proposal'
    });
  }
});
/**
 * @route POST /api/v1/dao/proposal/:proposalId/start-voting
 * @desc Start voting on a proposal
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[22]++;
router.post('/proposal/:proposalId/start-voting', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[1]++;
  cov_2dzk3p6u30().s[23]++;
  try {
    const {
      proposalId
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[24]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[25]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[26]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[3][0]++;
      cov_2dzk3p6u30().s[27]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[3][1]++;
    }
    const proposal =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[28]++, await daoService.startVoting(proposalId, userId));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[29]++;
    res.status(200).json({
      success: true,
      data: proposal
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[30]++;
    logger_1.logger.error('Error starting DAO voting', {
      error,
      proposalId: req.params.proposalId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[31]++;
    res.status(500).json({
      error: 'Failed to start voting'
    });
  }
});
/**
 * @route POST /api/v1/dao/proposal/:proposalId/vote
 * @desc Cast a vote on a proposal
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[32]++;
router.post('/proposal/:proposalId/vote', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[2]++;
  cov_2dzk3p6u30().s[33]++;
  try {
    const {
      proposalId
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[34]++, req.params);
    const {
      choice
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[35]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[36]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[37]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[4][0]++;
      cov_2dzk3p6u30().s[38]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[4][1]++;
    }
    cov_2dzk3p6u30().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[6][0]++, !choice) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[6][1]++, !['support', 'oppose', 'abstain'].includes(choice))) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[5][0]++;
      cov_2dzk3p6u30().s[40]++;
      return res.status(400).json({
        error: 'Valid choice is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[5][1]++;
    }
    const vote =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[41]++, await daoService.castVote(proposalId, userId, choice));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[42]++;
    res.status(200).json({
      success: true,
      data: vote
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[43]++;
    logger_1.logger.error('Error casting DAO vote', {
      error,
      proposalId: req.params.proposalId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[44]++;
    res.status(500).json({
      error: 'Failed to cast vote'
    });
  }
});
/**
 * @route POST /api/v1/dao/proposal/:proposalId/execute
 * @desc Execute a passed proposal
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[45]++;
router.post('/proposal/:proposalId/execute', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[3]++;
  cov_2dzk3p6u30().s[46]++;
  try {
    const {
      proposalId
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[47]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[48]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[49]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[7][0]++;
      cov_2dzk3p6u30().s[50]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[7][1]++;
    }
    const proposal =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[51]++, await daoService.executeProposal(proposalId, userId));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[52]++;
    res.status(200).json({
      success: true,
      data: proposal
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[53]++;
    logger_1.logger.error('Error executing DAO proposal', {
      error,
      proposalId: req.params.proposalId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[54]++;
    res.status(500).json({
      error: 'Failed to execute proposal'
    });
  }
});
/**
 * @route POST /api/v1/dao/delegate
 * @desc Delegate voting power
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[55]++;
router.post('/delegate', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[4]++;
  cov_2dzk3p6u30().s[56]++;
  try {
    const {
      delegateId,
      amount,
      coinId,
      expiresAt
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[57]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[58]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[59]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[8][0]++;
      cov_2dzk3p6u30().s[60]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[8][1]++;
    }
    cov_2dzk3p6u30().s[61]++;
    if (
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[10][0]++, !delegateId) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[10][1]++, !amount) ||
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[10][2]++, amount <= 0)) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[9][0]++;
      cov_2dzk3p6u30().s[62]++;
      return res.status(400).json({
        error: 'Valid delegate ID and amount are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[9][1]++;
    }
    const delegation =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[63]++, await daoService.delegateVotingPower(userId, delegateId, amount, coinId, expiresAt ?
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[11][0]++, new Date(expiresAt)) :
    /* istanbul ignore next */
    (cov_2dzk3p6u30().b[11][1]++, undefined)));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[64]++;
    res.status(201).json({
      success: true,
      data: delegation
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[65]++;
    logger_1.logger.error('Error creating DAO delegation', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[66]++;
    res.status(500).json({
      error: 'Failed to create delegation'
    });
  }
});
/**
 * @route GET /api/v1/dao/treasury
 * @desc Get DAO treasury
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[67]++;
router.get('/treasury', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[5]++;
  cov_2dzk3p6u30().s[68]++;
  try {
    const {
      treasuryId
    } =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[69]++, req.query);
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[70]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[71]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[12][0]++;
      cov_2dzk3p6u30().s[72]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[12][1]++;
    }
    const treasury =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[73]++, await daoService.getTreasury(treasuryId));
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[74]++;
    res.status(200).json({
      success: true,
      data: treasury
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[75]++;
    logger_1.logger.error('Error getting DAO treasury', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[76]++;
    res.status(500).json({
      error: 'Failed to get treasury'
    });
  }
});
/**
 * @route GET /api/v1/dao/analytics
 * @desc Get DAO analytics
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[77]++;
router.get('/analytics', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[6]++;
  cov_2dzk3p6u30().s[78]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[79]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[80]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[13][0]++;
      cov_2dzk3p6u30().s[81]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[13][1]++;
    }
    const analytics =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[82]++, await daoService.getDAOAnalytics());
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[83]++;
    res.status(200).json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[84]++;
    logger_1.logger.error('Error getting DAO analytics', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[85]++;
    res.status(500).json({
      error: 'Failed to get DAO analytics'
    });
  }
});
/**
 * @route GET /api/v1/dao/proposals/active
 * @desc Get active proposals
 */
/* istanbul ignore next */
cov_2dzk3p6u30().s[86]++;
router.get('/proposals/active', async (req, res) => {
  /* istanbul ignore next */
  cov_2dzk3p6u30().f[7]++;
  cov_2dzk3p6u30().s[87]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[88]++, req.user?.userId);
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[89]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_2dzk3p6u30().b[14][0]++;
      cov_2dzk3p6u30().s[90]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dzk3p6u30().b[14][1]++;
    }
    const proposals =
    /* istanbul ignore next */
    (cov_2dzk3p6u30().s[91]++, await daoService.getActiveProposals());
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[92]++;
    res.status(200).json({
      success: true,
      data: proposals
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[93]++;
    logger_1.logger.error('Error getting active proposals', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_2dzk3p6u30().s[94]++;
    res.status(500).json({
      error: 'Failed to get active proposals'
    });
  }
});
/* istanbul ignore next */
cov_2dzk3p6u30().s[95]++;
exports.default = router;