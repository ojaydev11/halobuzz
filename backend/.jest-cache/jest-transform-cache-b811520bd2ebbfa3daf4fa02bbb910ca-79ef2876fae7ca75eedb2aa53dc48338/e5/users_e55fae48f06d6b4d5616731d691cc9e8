a3300a0ea1b3680f80f57101a240b3e4
"use strict";

/* istanbul ignore next */
function cov_io0heckts() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\users.ts";
  var hash = "6108fa77227742052f58f24d20c7976787062935";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\users.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 51
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 47
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "9": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 50
        }
      },
      "10": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 53
        }
      },
      "11": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "12": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 19,
          column: 45
        }
      },
      "13": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 114
        }
      },
      "14": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 55
        }
      },
      "15": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 39
        }
      },
      "16": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 24
        }
      },
      "17": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "18": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 31,
          column: 14
        }
      },
      "19": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "20": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 40
        }
      },
      "21": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "23": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "24": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 46
        }
      },
      "25": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 55
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "28": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 86,
          column: 3
        }
      },
      "29": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "30": {
        start: {
          line: 71,
          column: 21
        },
        end: {
          line: 73,
          column: 19
        }
      },
      "31": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "32": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 69
        }
      },
      "33": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 23
        }
      },
      "34": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 54
        }
      },
      "35": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "36": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "37": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "38": {
        start: {
          line: 94,
          column: 38
        },
        end: {
          line: 94,
          column: 46
        }
      },
      "39": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 77
        }
      },
      "41": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 62
        }
      },
      "42": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "43": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 69
        }
      },
      "44": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "45": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 77
        }
      },
      "46": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 29
        }
      },
      "47": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 32
        }
      },
      "48": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "49": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 52
        }
      },
      "50": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 26
        }
      },
      "51": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "52": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "53": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 54
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "55": {
        start: {
          line: 145,
          column: 0
        },
        end: {
          line: 183,
          column: 3
        }
      },
      "56": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "57": {
        start: {
          line: 147,
          column: 21
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "58": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "59": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 69
        }
      },
      "60": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "61": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 73
        }
      },
      "62": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 30
        }
      },
      "63": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 35
        }
      },
      "64": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 38
        }
      },
      "65": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 26
        }
      },
      "66": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 166,
          column: 11
        }
      },
      "67": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "68": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 56
        }
      },
      "69": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "70": {
        start: {
          line: 189,
          column: 0
        },
        end: {
          line: 236,
          column: 3
        }
      },
      "71": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 235,
          column: 5
        }
      },
      "72": {
        start: {
          line: 191,
          column: 21
        },
        end: {
          line: 191,
          column: 62
        }
      },
      "73": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "74": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 69
        }
      },
      "75": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "76": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 75
        }
      },
      "77": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 36
        }
      },
      "78": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 32
        }
      },
      "79": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 46
        }
      },
      "80": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 64
        }
      },
      "81": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "82": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 42
        }
      },
      "83": {
        start: {
          line: 206,
          column: 13
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "84": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 38
        }
      },
      "85": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 26
        }
      },
      "86": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 218,
          column: 11
        }
      },
      "87": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "88": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 57
        }
      },
      "89": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "90": {
        start: {
          line: 242,
          column: 0
        },
        end: {
          line: 280,
          column: 3
        }
      },
      "91": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 279,
          column: 5
        }
      },
      "92": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 35
        }
      },
      "93": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "94": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 83
        }
      },
      "95": {
        start: {
          line: 248,
          column: 21
        },
        end: {
          line: 248,
          column: 62
        }
      },
      "96": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "97": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 69
        }
      },
      "98": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 36
        }
      },
      "99": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 26
        }
      },
      "100": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 263,
          column: 11
        }
      },
      "101": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 271,
          column: 11
        }
      },
      "102": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 274,
          column: 56
        }
      },
      "103": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 278,
          column: 11
        }
      },
      "104": {
        start: {
          line: 286,
          column: 0
        },
        end: {
          line: 329,
          column: 3
        }
      },
      "105": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 328,
          column: 5
        }
      },
      "106": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "107": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 94
        }
      },
      "108": {
        start: {
          line: 292,
          column: 25
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "109": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "110": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 67
        }
      },
      "111": {
        start: {
          line: 296,
          column: 21
        },
        end: {
          line: 296,
          column: 62
        }
      },
      "112": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "113": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 69
        }
      },
      "114": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 33
        }
      },
      "115": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 25
        }
      },
      "116": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 26
        }
      },
      "117": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "118": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 320,
          column: 11
        }
      },
      "119": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 57
        }
      },
      "120": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 327,
          column: 11
        }
      },
      "121": {
        start: {
          line: 330,
          column: 0
        },
        end: {
          line: 330,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 78
          },
          end: {
            line: 14,
            column: 79
          }
        },
        loc: {
          start: {
            line: 14,
            column: 98
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 69,
            column: 81
          },
          end: {
            line: 69,
            column: 82
          }
        },
        loc: {
          start: {
            line: 69,
            column: 101
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 69
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 92,
            column: 87
          },
          end: {
            line: 92,
            column: 88
          }
        },
        loc: {
          start: {
            line: 92,
            column: 107
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 92
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 145,
            column: 89
          },
          end: {
            line: 145,
            column: 90
          }
        },
        loc: {
          start: {
            line: 145,
            column: 109
          },
          end: {
            line: 183,
            column: 1
          }
        },
        line: 145
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 189,
            column: 95
          },
          end: {
            line: 189,
            column: 96
          }
        },
        loc: {
          start: {
            line: 189,
            column: 115
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 189
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 242,
            column: 94
          },
          end: {
            line: 242,
            column: 95
          }
        },
        loc: {
          start: {
            line: 242,
            column: 114
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 242
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 286,
            column: 87
          },
          end: {
            line: 286,
            column: 88
          }
        },
        loc: {
          start: {
            line: 286,
            column: 107
          },
          end: {
            line: 329,
            column: 1
          }
        },
        line: 286
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 45
          }
        }, {
          start: {
            line: 16,
            column: 49
          },
          end: {
            line: 16,
            column: 50
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 22
          },
          end: {
            line: 17,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 22
          },
          end: {
            line: 17,
            column: 47
          }
        }, {
          start: {
            line: 17,
            column: 51
          },
          end: {
            line: 17,
            column: 53
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 57
          },
          end: {
            line: 20,
            column: 61
          }
        }, {
          start: {
            line: 20,
            column: 64
          },
          end: {
            line: 20,
            column: 114
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 64
          },
          end: {
            line: 20,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 97
          },
          end: {
            line: 20,
            column: 102
          }
        }, {
          start: {
            line: 20,
            column: 105
          },
          end: {
            line: 20,
            column: 114
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 21,
            column: 39
          }
        }, {
          start: {
            line: 21,
            column: 43
          },
          end: {
            line: 21,
            column: 55
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 60,
            column: 21
          },
          end: {
            line: 60,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 46
          },
          end: {
            line: 60,
            column: 59
          }
        }, {
          start: {
            line: 60,
            column: 62
          },
          end: {
            line: 60,
            column: 77
          }
        }],
        line: 60
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 83,
            column: 21
          },
          end: {
            line: 83,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 83,
            column: 59
          }
        }, {
          start: {
            line: 83,
            column: 62
          },
          end: {
            line: 83,
            column: 77
          }
        }],
        line: 83
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "13": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "14": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "15": {
        loc: {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 136,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 46
          },
          end: {
            line: 136,
            column: 59
          }
        }, {
          start: {
            line: 136,
            column: 62
          },
          end: {
            line: 136,
            column: 77
          }
        }],
        line: 136
      },
      "16": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "17": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "18": {
        loc: {
          start: {
            line: 180,
            column: 21
          },
          end: {
            line: 180,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 46
          },
          end: {
            line: 180,
            column: 59
          }
        }, {
          start: {
            line: 180,
            column: 62
          },
          end: {
            line: 180,
            column: 77
          }
        }],
        line: 180
      },
      "19": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "21": {
        loc: {
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: 206,
            column: 13
          },
          end: {
            line: 208,
            column: 9
          }
        }],
        line: 203
      },
      "22": {
        loc: {
          start: {
            line: 206,
            column: 13
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 13
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "23": {
        loc: {
          start: {
            line: 233,
            column: 21
          },
          end: {
            line: 233,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 46
          },
          end: {
            line: 233,
            column: 59
          }
        }, {
          start: {
            line: 233,
            column: 62
          },
          end: {
            line: 233,
            column: 77
          }
        }],
        line: 233
      },
      "24": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "25": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "26": {
        loc: {
          start: {
            line: 277,
            column: 21
          },
          end: {
            line: 277,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 46
          },
          end: {
            line: 277,
            column: 59
          }
        }, {
          start: {
            line: 277,
            column: 62
          },
          end: {
            line: 277,
            column: 77
          }
        }],
        line: 277
      },
      "27": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "28": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "29": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 299,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "30": {
        loc: {
          start: {
            line: 326,
            column: 21
          },
          end: {
            line: 326,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 46
          },
          end: {
            line: 326,
            column: 59
          }
        }, {
          start: {
            line: 326,
            column: 62
          },
          end: {
            line: 326,
            column: 77
          }
        }],
        line: 326
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6108fa77227742052f58f24d20c7976787062935"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_io0heckts = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_io0heckts();
cov_io0heckts().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_io0heckts().s[1]++, require("express"));
const User_1 =
/* istanbul ignore next */
(cov_io0heckts().s[2]++, require("../../models/User"));
const AuditLog_1 =
/* istanbul ignore next */
(cov_io0heckts().s[3]++, require("../../models/AuditLog"));
const auth_1 =
/* istanbul ignore next */
(cov_io0heckts().s[4]++, require("../../middleware/auth"));
const rbac_1 =
/* istanbul ignore next */
(cov_io0heckts().s[5]++, require("../../middleware/rbac"));
const router =
/* istanbul ignore next */
(cov_io0heckts().s[6]++, (0, express_1.Router)());
/**
 * GET /api/v1/admin/users
 * Get paginated list of users
 * Requires: admin:read scope
 */
/* istanbul ignore next */
cov_io0heckts().s[7]++;
router.get('/', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:read']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[0]++;
  cov_io0heckts().s[8]++;
  try {
    const page =
    /* istanbul ignore next */
    (cov_io0heckts().s[9]++,
    /* istanbul ignore next */
    (cov_io0heckts().b[0][0]++, parseInt(req.query.page)) ||
    /* istanbul ignore next */
    (cov_io0heckts().b[0][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_io0heckts().s[10]++,
    /* istanbul ignore next */
    (cov_io0heckts().b[1][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_io0heckts().b[1][1]++, 20));
    const search =
    /* istanbul ignore next */
    (cov_io0heckts().s[11]++, req.query.search);
    const kycStatus =
    /* istanbul ignore next */
    (cov_io0heckts().s[12]++, req.query.kycStatus);
    const isBanned =
    /* istanbul ignore next */
    (cov_io0heckts().s[13]++, req.query.isBanned === 'true' ?
    /* istanbul ignore next */
    (cov_io0heckts().b[2][0]++, true) :
    /* istanbul ignore next */
    (cov_io0heckts().b[2][1]++, req.query.isBanned === 'false' ?
    /* istanbul ignore next */
    (cov_io0heckts().b[3][0]++, false) :
    /* istanbul ignore next */
    (cov_io0heckts().b[3][1]++, undefined)));
    const sortBy =
    /* istanbul ignore next */
    (cov_io0heckts().s[14]++,
    /* istanbul ignore next */
    (cov_io0heckts().b[4][0]++, req.query.sortBy) ||
    /* istanbul ignore next */
    (cov_io0heckts().b[4][1]++, '-createdAt'));
    const skip =
    /* istanbul ignore next */
    (cov_io0heckts().s[15]++, (page - 1) * limit);
    // Build query
    const query =
    /* istanbul ignore next */
    (cov_io0heckts().s[16]++, {});
    /* istanbul ignore next */
    cov_io0heckts().s[17]++;
    if (search) {
      /* istanbul ignore next */
      cov_io0heckts().b[5][0]++;
      cov_io0heckts().s[18]++;
      query.$or = [{
        username: {
          $regex: search,
          $options: 'i'
        }
      }, {
        email: {
          $regex: search,
          $options: 'i'
        }
      }, {
        phone: {
          $regex: search,
          $options: 'i'
        }
      }, {
        displayName: {
          $regex: search,
          $options: 'i'
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[5][1]++;
    }
    cov_io0heckts().s[19]++;
    if (kycStatus) {
      /* istanbul ignore next */
      cov_io0heckts().b[6][0]++;
      cov_io0heckts().s[20]++;
      query.kycStatus = kycStatus;
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[6][1]++;
    }
    cov_io0heckts().s[21]++;
    if (isBanned !== undefined) {
      /* istanbul ignore next */
      cov_io0heckts().b[7][0]++;
      cov_io0heckts().s[22]++;
      query.isBanned = isBanned;
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[7][1]++;
    }
    const [users, total] =
    /* istanbul ignore next */
    (cov_io0heckts().s[23]++, await Promise.all([User_1.User.find(query).sort(sortBy).skip(skip).limit(limit).select('-password -totpSecret -mfaSecret -backupCodes -deviceTokens -kycDocuments').lean(), User_1.User.countDocuments(query)]));
    const pages =
    /* istanbul ignore next */
    (cov_io0heckts().s[24]++, Math.ceil(total / limit));
    /* istanbul ignore next */
    cov_io0heckts().s[25]++;
    res.json({
      data: users,
      total,
      page,
      pages
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[26]++;
    console.error('Admin get users error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[27]++;
    res.status(500).json({
      error: 'Failed to fetch users',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[8][1]++, 'Unknown error')
    });
  }
});
/**
 * GET /api/v1/admin/users/:id
 * Get single user by ID
 * Requires: admin:read scope
 */
/* istanbul ignore next */
cov_io0heckts().s[28]++;
router.get('/:id', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:read']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[1]++;
  cov_io0heckts().s[29]++;
  try {
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[30]++, await User_1.User.findById(req.params.id).select('-password -totpSecret -mfaSecret -backupCodes -deviceTokens').lean());
    /* istanbul ignore next */
    cov_io0heckts().s[31]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[9][0]++;
      cov_io0heckts().s[32]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[9][1]++;
    }
    cov_io0heckts().s[33]++;
    res.json(user);
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[34]++;
    console.error('Admin get user error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[35]++;
    res.status(500).json({
      error: 'Failed to fetch user',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[10][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/v1/admin/users/:id/ban
 * Ban a user
 * Requires: admin:write scope
 */
/* istanbul ignore next */
cov_io0heckts().s[36]++;
router.post('/:id/ban', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:write']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[2]++;
  cov_io0heckts().s[37]++;
  try {
    const {
      reason,
      expiresAt
    } =
    /* istanbul ignore next */
    (cov_io0heckts().s[38]++, req.body);
    /* istanbul ignore next */
    cov_io0heckts().s[39]++;
    if (!reason) {
      /* istanbul ignore next */
      cov_io0heckts().b[11][0]++;
      cov_io0heckts().s[40]++;
      return res.status(400).json({
        error: 'Ban reason is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[11][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[41]++, await User_1.User.findById(req.params.id));
    /* istanbul ignore next */
    cov_io0heckts().s[42]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[12][0]++;
      cov_io0heckts().s[43]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[12][1]++;
    }
    cov_io0heckts().s[44]++;
    if (user.isBanned) {
      /* istanbul ignore next */
      cov_io0heckts().b[13][0]++;
      cov_io0heckts().s[45]++;
      return res.status(400).json({
        error: 'User is already banned'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[13][1]++;
    }
    cov_io0heckts().s[46]++;
    user.isBanned = true;
    /* istanbul ignore next */
    cov_io0heckts().s[47]++;
    user.banReason = reason;
    /* istanbul ignore next */
    cov_io0heckts().s[48]++;
    if (expiresAt) {
      /* istanbul ignore next */
      cov_io0heckts().b[14][0]++;
      cov_io0heckts().s[49]++;
      user.banExpiresAt = new Date(expiresAt);
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[14][1]++;
    }
    cov_io0heckts().s[50]++;
    await user.save();
    // Log action
    /* istanbul ignore next */
    cov_io0heckts().s[51]++;
    await AuditLog_1.AuditLog.create({
      admin: req.user.userId,
      action: 'user.ban',
      resource: 'user',
      resourceId: user._id,
      details: {
        reason,
        expiresAt
      },
      ip: req.ip,
      userAgent: req.get('user-agent')
    });
    /* istanbul ignore next */
    cov_io0heckts().s[52]++;
    res.json({
      message: 'User banned successfully',
      user: {
        _id: user._id,
        username: user.username,
        isBanned: user.isBanned,
        banReason: user.banReason,
        banExpiresAt: user.banExpiresAt
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[53]++;
    console.error('Admin ban user error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[54]++;
    res.status(500).json({
      error: 'Failed to ban user',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[15][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/v1/admin/users/:id/unban
 * Unban a user
 * Requires: admin:write scope
 */
/* istanbul ignore next */
cov_io0heckts().s[55]++;
router.post('/:id/unban', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:write']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[3]++;
  cov_io0heckts().s[56]++;
  try {
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[57]++, await User_1.User.findById(req.params.id));
    /* istanbul ignore next */
    cov_io0heckts().s[58]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[16][0]++;
      cov_io0heckts().s[59]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[16][1]++;
    }
    cov_io0heckts().s[60]++;
    if (!user.isBanned) {
      /* istanbul ignore next */
      cov_io0heckts().b[17][0]++;
      cov_io0heckts().s[61]++;
      return res.status(400).json({
        error: 'User is not banned'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[17][1]++;
    }
    cov_io0heckts().s[62]++;
    user.isBanned = false;
    /* istanbul ignore next */
    cov_io0heckts().s[63]++;
    user.banReason = undefined;
    /* istanbul ignore next */
    cov_io0heckts().s[64]++;
    user.banExpiresAt = undefined;
    /* istanbul ignore next */
    cov_io0heckts().s[65]++;
    await user.save();
    // Log action
    /* istanbul ignore next */
    cov_io0heckts().s[66]++;
    await AuditLog_1.AuditLog.create({
      admin: req.user.userId,
      action: 'user.unban',
      resource: 'user',
      resourceId: user._id,
      ip: req.ip,
      userAgent: req.get('user-agent')
    });
    /* istanbul ignore next */
    cov_io0heckts().s[67]++;
    res.json({
      message: 'User unbanned successfully',
      user: {
        _id: user._id,
        username: user.username,
        isBanned: user.isBanned
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[68]++;
    console.error('Admin unban user error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[69]++;
    res.status(500).json({
      error: 'Failed to unban user',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[18][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[18][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/v1/admin/users/:id/kyc/approve
 * Approve KYC for a user
 * Requires: admin:write scope
 */
/* istanbul ignore next */
cov_io0heckts().s[70]++;
router.post('/:id/kyc/approve', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:write']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[4]++;
  cov_io0heckts().s[71]++;
  try {
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[72]++, await User_1.User.findById(req.params.id));
    /* istanbul ignore next */
    cov_io0heckts().s[73]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[19][0]++;
      cov_io0heckts().s[74]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[19][1]++;
    }
    cov_io0heckts().s[75]++;
    if (user.kycStatus === 'verified') {
      /* istanbul ignore next */
      cov_io0heckts().b[20][0]++;
      cov_io0heckts().s[76]++;
      return res.status(400).json({
        error: 'KYC already verified'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[20][1]++;
    }
    cov_io0heckts().s[77]++;
    user.kycStatus = 'verified';
    /* istanbul ignore next */
    cov_io0heckts().s[78]++;
    user.ageVerified = true;
    /* istanbul ignore next */
    cov_io0heckts().s[79]++;
    user.trust.factors.kycVerified = true;
    /* istanbul ignore next */
    cov_io0heckts().s[80]++;
    user.trust.score = Math.min(100, user.trust.score + 20);
    // Update trust level based on score
    /* istanbul ignore next */
    cov_io0heckts().s[81]++;
    if (user.trust.score >= 80) {
      /* istanbul ignore next */
      cov_io0heckts().b[21][0]++;
      cov_io0heckts().s[82]++;
      user.trust.level = 'verified';
    } else {
      /* istanbul ignore next */
      cov_io0heckts().b[21][1]++;
      cov_io0heckts().s[83]++;
      if (user.trust.score >= 60) {
        /* istanbul ignore next */
        cov_io0heckts().b[22][0]++;
        cov_io0heckts().s[84]++;
        user.trust.level = 'high';
      } else
      /* istanbul ignore next */
      {
        cov_io0heckts().b[22][1]++;
      }
    }
    /* istanbul ignore next */
    cov_io0heckts().s[85]++;
    await user.save();
    // Log action
    /* istanbul ignore next */
    cov_io0heckts().s[86]++;
    await AuditLog_1.AuditLog.create({
      admin: req.user.userId,
      action: 'kyc.approve',
      resource: 'user',
      resourceId: user._id,
      ip: req.ip,
      userAgent: req.get('user-agent')
    });
    /* istanbul ignore next */
    cov_io0heckts().s[87]++;
    res.json({
      message: 'KYC approved successfully',
      user: {
        _id: user._id,
        username: user.username,
        kycStatus: user.kycStatus,
        trust: user.trust
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[88]++;
    console.error('Admin approve KYC error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[89]++;
    res.status(500).json({
      error: 'Failed to approve KYC',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[23][1]++, 'Unknown error')
    });
  }
});
/**
 * POST /api/v1/admin/users/:id/kyc/reject
 * Reject KYC for a user
 * Requires: admin:write scope
 */
/* istanbul ignore next */
cov_io0heckts().s[90]++;
router.post('/:id/kyc/reject', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:write']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[5]++;
  cov_io0heckts().s[91]++;
  try {
    const {
      reason
    } =
    /* istanbul ignore next */
    (cov_io0heckts().s[92]++, req.body);
    /* istanbul ignore next */
    cov_io0heckts().s[93]++;
    if (!reason) {
      /* istanbul ignore next */
      cov_io0heckts().b[24][0]++;
      cov_io0heckts().s[94]++;
      return res.status(400).json({
        error: 'Rejection reason is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[24][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[95]++, await User_1.User.findById(req.params.id));
    /* istanbul ignore next */
    cov_io0heckts().s[96]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[25][0]++;
      cov_io0heckts().s[97]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[25][1]++;
    }
    cov_io0heckts().s[98]++;
    user.kycStatus = 'rejected';
    /* istanbul ignore next */
    cov_io0heckts().s[99]++;
    await user.save();
    // Log action
    /* istanbul ignore next */
    cov_io0heckts().s[100]++;
    await AuditLog_1.AuditLog.create({
      admin: req.user.userId,
      action: 'kyc.reject',
      resource: 'user',
      resourceId: user._id,
      details: {
        reason
      },
      ip: req.ip,
      userAgent: req.get('user-agent')
    });
    /* istanbul ignore next */
    cov_io0heckts().s[101]++;
    res.json({
      message: 'KYC rejected successfully',
      user: {
        _id: user._id,
        username: user.username,
        kycStatus: user.kycStatus
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[102]++;
    console.error('Admin reject KYC error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[103]++;
    res.status(500).json({
      error: 'Failed to reject KYC',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[26][1]++, 'Unknown error')
    });
  }
});
/**
 * PUT /api/v1/admin/users/:id/role
 * Update user role
 * Requires: super_admin role
 */
/* istanbul ignore next */
cov_io0heckts().s[104]++;
router.put('/:id/role', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:write']), async (req, res) => {
  /* istanbul ignore next */
  cov_io0heckts().f[6]++;
  cov_io0heckts().s[105]++;
  try {
    /* istanbul ignore next */
    cov_io0heckts().s[106]++;
    // Only super admins can change roles
    if (!req.user?.roles?.includes('super_admin')) {
      /* istanbul ignore next */
      cov_io0heckts().b[27][0]++;
      cov_io0heckts().s[107]++;
      return res.status(403).json({
        error: 'Only super admins can change user roles'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[27][1]++;
    }
    const {
      role
    } =
    /* istanbul ignore next */
    (cov_io0heckts().s[108]++, req.body);
    /* istanbul ignore next */
    cov_io0heckts().s[109]++;
    if (!['user', 'admin', 'moderator', 'super_admin'].includes(role)) {
      /* istanbul ignore next */
      cov_io0heckts().b[28][0]++;
      cov_io0heckts().s[110]++;
      return res.status(400).json({
        error: 'Invalid role'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[28][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_io0heckts().s[111]++, await User_1.User.findById(req.params.id));
    /* istanbul ignore next */
    cov_io0heckts().s[112]++;
    if (!user) {
      /* istanbul ignore next */
      cov_io0heckts().b[29][0]++;
      cov_io0heckts().s[113]++;
      return res.status(404).json({
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_io0heckts().b[29][1]++;
    }
    const oldRole =
    /* istanbul ignore next */
    (cov_io0heckts().s[114]++, user.role);
    /* istanbul ignore next */
    cov_io0heckts().s[115]++;
    user.role = role;
    /* istanbul ignore next */
    cov_io0heckts().s[116]++;
    await user.save();
    // Log action
    /* istanbul ignore next */
    cov_io0heckts().s[117]++;
    await AuditLog_1.AuditLog.create({
      admin: req.user.userId,
      action: 'user.role.update',
      resource: 'user',
      resourceId: user._id,
      details: {
        oldRole,
        newRole: role
      },
      ip: req.ip,
      userAgent: req.get('user-agent')
    });
    /* istanbul ignore next */
    cov_io0heckts().s[118]++;
    res.json({
      message: 'User role updated successfully',
      user: {
        _id: user._id,
        username: user.username,
        role: user.role
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_io0heckts().s[119]++;
    console.error('Admin update role error:', error);
    /* istanbul ignore next */
    cov_io0heckts().s[120]++;
    res.status(500).json({
      error: 'Failed to update user role',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_io0heckts().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_io0heckts().b[30][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_io0heckts().s[121]++;
exports.default = router;