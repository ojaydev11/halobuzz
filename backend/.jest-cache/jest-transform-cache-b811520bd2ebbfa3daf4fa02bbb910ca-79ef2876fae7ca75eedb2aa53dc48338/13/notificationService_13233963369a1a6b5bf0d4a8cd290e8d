c737eeecfa0f5a9df6c63c8ecd42e1f3
"use strict";

/* istanbul ignore next */
function cov_g84t32xjs() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\notificationService.ts";
  var hash = "21cfdd28127f4626f0b412406bca45a4e6afcaee";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\notificationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 41
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "7": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 12,
          column: 94
        }
      },
      "8": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 15,
          column: 13
        }
      },
      "9": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 29
        }
      },
      "10": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 19,
          column: 13
        }
      },
      "11": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 29
        }
      },
      "12": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 28,
          column: 15
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "14": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 68
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "17": {
        start: {
          line: 39,
          column: 37
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "18": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 54
        }
      },
      "19": {
        start: {
          line: 52,
          column: 43
        },
        end: {
          line: 52,
          column: 86
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 60
        }
      },
      "21": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "22": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 49
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 79
        }
      },
      "24": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 70
        }
      },
      "26": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "27": {
        start: {
          line: 72,
          column: 29
        },
        end: {
          line: 72,
          column: 54
        }
      },
      "28": {
        start: {
          line: 73,
          column: 35
        },
        end: {
          line: 73,
          column: 78
        }
      },
      "29": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 49
        }
      },
      "30": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 69
        }
      },
      "31": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 22
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "33": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 54
        }
      },
      "34": {
        start: {
          line: 85,
          column: 35
        },
        end: {
          line: 85,
          column: 78
        }
      },
      "35": {
        start: {
          line: 86,
          column: 38
        },
        end: {
          line: 86,
          column: 93
        }
      },
      "36": {
        start: {
          line: 86,
          column: 69
        },
        end: {
          line: 86,
          column: 92
        }
      },
      "37": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "38": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 61
        }
      },
      "39": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 75
        }
      },
      "40": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 28
        }
      },
      "41": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "42": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 71
        }
      },
      "43": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "44": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "45": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 54
        }
      },
      "46": {
        start: {
          line: 103,
          column: 35
        },
        end: {
          line: 103,
          column: 78
        }
      },
      "47": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "48": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 41
        }
      },
      "49": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 71
        }
      },
      "50": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 76
        }
      },
      "51": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "52": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "53": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "54": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 68
        }
      },
      "55": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "56": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      },
      "57": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "58": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 75
        }
      },
      "59": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "60": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "61": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 76
        }
      },
      "62": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "63": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "64": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 76
        }
      },
      "65": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "66": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "67": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 72
        }
      },
      "68": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "69": {
        start: {
          line: 199,
          column: 29
        },
        end: {
          line: 199,
          column: 54
        }
      },
      "70": {
        start: {
          line: 200,
          column: 35
        },
        end: {
          line: 200,
          column: 78
        }
      },
      "71": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 63
        }
      },
      "72": {
        start: {
          line: 201,
          column: 47
        },
        end: {
          line: 201,
          column: 54
        }
      },
      "73": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 76
        }
      },
      "74": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "75": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "76": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 81
        }
      },
      "77": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 73
        }
      },
      "78": {
        start: {
          line: 220,
          column: 0
        },
        end: {
          line: 220,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 60
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 61
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 58
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 64
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 62
          },
          end: {
            line: 86,
            column: 63
          }
        },
        loc: {
          start: {
            line: 86,
            column: 69
          },
          end: {
            line: 86,
            column: 92
          }
        },
        line: 86
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 52
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 100
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 34
          },
          end: {
            line: 104,
            column: 35
          }
        },
        loc: {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 106,
            column: 13
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 79
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 114
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 61
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 136
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 66
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 155
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 76
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 169
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 64
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 183
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 197,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        loc: {
          start: {
            line: 197,
            column: 52
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 197
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 201,
            column: 40
          },
          end: {
            line: 201,
            column: 41
          }
        },
        loc: {
          start: {
            line: 201,
            column: 47
          },
          end: {
            line: 201,
            column: 54
          }
        },
        line: 201
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 45
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 209
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 15,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 15,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 21
          }
        }, {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 13,
            column: 50
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 19,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 39
          }
        }, {
          start: {
            line: 45,
            column: 43
          },
          end: {
            line: 45,
            column: 45
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 49
          }
        }, {
          start: {
            line: 47,
            column: 53
          },
          end: {
            line: 47,
            column: 99
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 52,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 43
          },
          end: {
            line: 52,
            column: 80
          }
        }, {
          start: {
            line: 52,
            column: 84
          },
          end: {
            line: 52,
            column: 86
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 46
          },
          end: {
            line: 70,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 70,
            column: 54
          },
          end: {
            line: 70,
            column: 56
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 35
          },
          end: {
            line: 73,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 35
          },
          end: {
            line: 73,
            column: 72
          }
        }, {
          start: {
            line: 73,
            column: 76
          },
          end: {
            line: 73,
            column: 78
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 35
          },
          end: {
            line: 85,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 35
          },
          end: {
            line: 85,
            column: 72
          }
        }, {
          start: {
            line: 85,
            column: 76
          },
          end: {
            line: 85,
            column: 78
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 72
          }
        }, {
          start: {
            line: 103,
            column: 76
          },
          end: {
            line: 103,
            column: 78
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 200,
            column: 35
          },
          end: {
            line: 200,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 35
          },
          end: {
            line: 200,
            column: 72
          }
        }, {
          start: {
            line: 200,
            column: 76
          },
          end: {
            line: 200,
            column: 78
          }
        }],
        line: 200
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "21cfdd28127f4626f0b412406bca45a4e6afcaee"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g84t32xjs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_g84t32xjs();
cov_g84t32xjs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_g84t32xjs().s[1]++;
exports.NotificationService = void 0;
const User_1 =
/* istanbul ignore next */
(cov_g84t32xjs().s[2]++, require("@/models/User"));
const logger_1 =
/* istanbul ignore next */
(cov_g84t32xjs().s[3]++, require("@/config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_g84t32xjs().s[4]++, require("@/config/redis"));
const logger =
/* istanbul ignore next */
(cov_g84t32xjs().s[5]++, (0, logger_1.setupLogger)());
class NotificationService {
  // Send push notification
  static async sendPushNotification(userId, notification) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[0]++;
    cov_g84t32xjs().s[6]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[7]++, await User_1.User.findById(userId).select('deviceTokens preferences'));
      /* istanbul ignore next */
      cov_g84t32xjs().s[8]++;
      if (
      /* istanbul ignore next */
      (cov_g84t32xjs().b[1][0]++, !user) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[1][1]++, !user.deviceTokens.length)) {
        /* istanbul ignore next */
        cov_g84t32xjs().b[0][0]++;
        cov_g84t32xjs().s[9]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_g84t32xjs().b[0][1]++;
      }
      // Check if user has push notifications enabled
      cov_g84t32xjs().s[10]++;
      if (!user.preferences.notifications.push) {
        /* istanbul ignore next */
        cov_g84t32xjs().b[2][0]++;
        cov_g84t32xjs().s[11]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_g84t32xjs().b[2][1]++;
      }
      // Here you would integrate with FCM/APNs
      // For now, we'll just log the notification
      cov_g84t32xjs().s[12]++;
      logger.info('Push notification sent', {
        userId,
        title: notification.title,
        body: notification.body,
        type: notification.type,
        deviceTokens: user.deviceTokens.length
      });
      /* istanbul ignore next */
      cov_g84t32xjs().s[13]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[14]++;
      logger.error('Error sending push notification:', error);
      /* istanbul ignore next */
      cov_g84t32xjs().s[15]++;
      return false;
    }
  }
  // Send in-app notification
  static async sendInAppNotification(userId, notification) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[1]++;
    cov_g84t32xjs().s[16]++;
    try {
      const notificationData =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[17]++, {
        id: Date.now().toString(),
        userId,
        title: notification.title,
        message: notification.message,
        type: notification.type,
        data:
        /* istanbul ignore next */
        (cov_g84t32xjs().b[3][0]++, notification.data) ||
        /* istanbul ignore next */
        (cov_g84t32xjs().b[3][1]++, {}),
        createdAt: new Date(),
        expiresAt:
        /* istanbul ignore next */
        (cov_g84t32xjs().b[4][0]++, notification.expiresAt) ||
        /* istanbul ignore next */
        (cov_g84t32xjs().b[4][1]++, new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)),
        // 7 days
        read: false
      });
      // Store in cache for real-time access
      const cacheKey =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[18]++, `notifications:${userId}`);
      const existingNotifications =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[19]++,
      /* istanbul ignore next */
      (cov_g84t32xjs().b[5][0]++, await (0, redis_1.getCache)(cacheKey)) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[5][1]++, []));
      /* istanbul ignore next */
      cov_g84t32xjs().s[20]++;
      existingNotifications.unshift(notificationData);
      // Keep only last 50 notifications
      /* istanbul ignore next */
      cov_g84t32xjs().s[21]++;
      if (existingNotifications.length > 50) {
        /* istanbul ignore next */
        cov_g84t32xjs().b[6][0]++;
        cov_g84t32xjs().s[22]++;
        existingNotifications.splice(50);
      } else
      /* istanbul ignore next */
      {
        cov_g84t32xjs().b[6][1]++;
      }
      cov_g84t32xjs().s[23]++;
      await (0, redis_1.setCache)(cacheKey, existingNotifications, 3600); // 1 hour
      /* istanbul ignore next */
      cov_g84t32xjs().s[24]++;
      logger.info('In-app notification sent', {
        userId,
        title: notification.title,
        type: notification.type
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[25]++;
      logger.error('Error sending in-app notification:', error);
    }
  }
  // Get user notifications
  static async getUserNotifications(userId, limit =
  /* istanbul ignore next */
  (cov_g84t32xjs().b[7][0]++, 20)) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[2]++;
    cov_g84t32xjs().s[26]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[27]++, `notifications:${userId}`);
      const notifications =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[28]++,
      /* istanbul ignore next */
      (cov_g84t32xjs().b[8][0]++, await (0, redis_1.getCache)(cacheKey)) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[8][1]++, []));
      /* istanbul ignore next */
      cov_g84t32xjs().s[29]++;
      return notifications.slice(0, limit);
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[30]++;
      logger.error('Error getting user notifications:', error);
      /* istanbul ignore next */
      cov_g84t32xjs().s[31]++;
      return [];
    }
  }
  // Mark notification as read
  static async markNotificationAsRead(userId, notificationId) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[3]++;
    cov_g84t32xjs().s[32]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[33]++, `notifications:${userId}`);
      const notifications =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[34]++,
      /* istanbul ignore next */
      (cov_g84t32xjs().b[9][0]++, await (0, redis_1.getCache)(cacheKey)) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[9][1]++, []));
      const notificationIndex =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[35]++, notifications.findIndex(n => {
        /* istanbul ignore next */
        cov_g84t32xjs().f[4]++;
        cov_g84t32xjs().s[36]++;
        return n.id === notificationId;
      }));
      /* istanbul ignore next */
      cov_g84t32xjs().s[37]++;
      if (notificationIndex > -1) {
        /* istanbul ignore next */
        cov_g84t32xjs().b[10][0]++;
        cov_g84t32xjs().s[38]++;
        notifications[notificationIndex].read = true;
        /* istanbul ignore next */
        cov_g84t32xjs().s[39]++;
        await (0, redis_1.setCache)(cacheKey, notifications, 3600);
        /* istanbul ignore next */
        cov_g84t32xjs().s[40]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_g84t32xjs().b[10][1]++;
      }
      cov_g84t32xjs().s[41]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[42]++;
      logger.error('Error marking notification as read:', error);
      /* istanbul ignore next */
      cov_g84t32xjs().s[43]++;
      return false;
    }
  }
  // Mark all notifications as read
  static async markAllNotificationsAsRead(userId) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[5]++;
    cov_g84t32xjs().s[44]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[45]++, `notifications:${userId}`);
      const notifications =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[46]++,
      /* istanbul ignore next */
      (cov_g84t32xjs().b[11][0]++, await (0, redis_1.getCache)(cacheKey)) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[11][1]++, []));
      /* istanbul ignore next */
      cov_g84t32xjs().s[47]++;
      notifications.forEach(notification => {
        /* istanbul ignore next */
        cov_g84t32xjs().f[6]++;
        cov_g84t32xjs().s[48]++;
        notification.read = true;
      });
      /* istanbul ignore next */
      cov_g84t32xjs().s[49]++;
      await (0, redis_1.setCache)(cacheKey, notifications, 3600);
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[50]++;
      logger.error('Error marking all notifications as read:', error);
    }
  }
  // Send gift notification
  static async sendGiftNotification(senderId, recipientId, giftName, amount) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[7]++;
    cov_g84t32xjs().s[51]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[52]++;
      // Send to recipient
      await this.sendInAppNotification(recipientId, {
        title: '🎁 Gift Received!',
        message: `You received ${amount} coins from ${giftName}!`,
        type: 'gift',
        data: {
          senderId,
          giftName,
          amount
        }
      });
      // Send to sender
      /* istanbul ignore next */
      cov_g84t32xjs().s[53]++;
      await this.sendInAppNotification(senderId, {
        title: '💝 Gift Sent!',
        message: `You sent ${giftName} to a streamer!`,
        type: 'gift',
        data: {
          recipientId,
          giftName,
          amount
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[54]++;
      logger.error('Error sending gift notification:', error);
    }
  }
  // Send OG level up notification
  static async sendOGLevelUpNotification(userId, newLevel) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[8]++;
    cov_g84t32xjs().s[55]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[56]++;
      await this.sendInAppNotification(userId, {
        title: '👑 OG Level Up!',
        message: `Congratulations! You've reached OG Level ${newLevel}!`,
        type: 'og',
        data: {
          newLevel
        }
      });
      /* istanbul ignore next */
      cov_g84t32xjs().s[57]++;
      await this.sendPushNotification(userId, {
        title: '👑 OG Level Up!',
        body: `Congratulations! You've reached OG Level ${newLevel}!`,
        type: 'og'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[58]++;
      logger.error('Error sending OG level up notification:', error);
    }
  }
  // Send throne claim notification
  static async sendThroneClaimNotification(userId, streamTitle) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[9]++;
    cov_g84t32xjs().s[59]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[60]++;
      await this.sendInAppNotification(userId, {
        title: '🪑 Throne Claimed!',
        message: `You claimed the throne in "${streamTitle}"!`,
        type: 'throne',
        data: {
          streamTitle
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[61]++;
      logger.error('Error sending throne claim notification:', error);
    }
  }
  // Send battle boost notification
  static async sendBattleBoostNotification(userId, boostType, multiplier) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[10]++;
    cov_g84t32xjs().s[62]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[63]++;
      await this.sendInAppNotification(userId, {
        title: '⚡ Battle Boost!',
        message: `${boostType} activated! ${multiplier}x multiplier active!`,
        type: 'battle',
        data: {
          boostType,
          multiplier
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[64]++;
      logger.error('Error sending battle boost notification:', error);
    }
  }
  // Send festival notification
  static async sendFestivalNotification(userId, festivalName) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[11]++;
    cov_g84t32xjs().s[65]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[66]++;
      await this.sendInAppNotification(userId, {
        title: '🎉 Festival Time!',
        message: `${festivalName} festival is now active! Special gifts and skins available!`,
        type: 'festival',
        data: {
          festivalName
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[67]++;
      logger.error('Error sending festival notification:', error);
    }
  }
  // Get unread notification count
  static async getUnreadNotificationCount(userId) {
    /* istanbul ignore next */
    cov_g84t32xjs().f[12]++;
    cov_g84t32xjs().s[68]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[69]++, `notifications:${userId}`);
      const notifications =
      /* istanbul ignore next */
      (cov_g84t32xjs().s[70]++,
      /* istanbul ignore next */
      (cov_g84t32xjs().b[12][0]++, await (0, redis_1.getCache)(cacheKey)) ||
      /* istanbul ignore next */
      (cov_g84t32xjs().b[12][1]++, []));
      /* istanbul ignore next */
      cov_g84t32xjs().s[71]++;
      return notifications.filter(n => {
        /* istanbul ignore next */
        cov_g84t32xjs().f[13]++;
        cov_g84t32xjs().s[72]++;
        return !n.read;
      }).length;
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[73]++;
      logger.error('Error getting unread notification count:', error);
      /* istanbul ignore next */
      cov_g84t32xjs().s[74]++;
      return 0;
    }
  }
  // Clear expired notifications
  static async clearExpiredNotifications() {
    /* istanbul ignore next */
    cov_g84t32xjs().f[14]++;
    cov_g84t32xjs().s[75]++;
    try {
      /* istanbul ignore next */
      cov_g84t32xjs().s[76]++;
      // This would typically be done in a scheduled job
      // For now, we'll just log that it should be implemented
      logger.info('Clear expired notifications job should be implemented');
    } catch (error) {
      /* istanbul ignore next */
      cov_g84t32xjs().s[77]++;
      logger.error('Error clearing expired notifications:', error);
    }
  }
}
/* istanbul ignore next */
cov_g84t32xjs().s[78]++;
exports.NotificationService = NotificationService;