9b4d36c08d75a3b7531056a85b9f12f0
"use strict";

/* istanbul ignore next */
function cov_1x4w0to4il() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\authService.ts";
  var hash = "b5c2b1d3887860a4e41bd69be3a08a25dc7e1e3a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\authService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 29
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 63
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 45
        }
      },
      "9": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "10": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "11": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "12": {
        start: {
          line: 16,
          column: 37
        },
        end: {
          line: 16,
          column: 71
        }
      },
      "13": {
        start: {
          line: 17,
          column: 38
        },
        end: {
          line: 17,
          column: 81
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "15": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 30,
          column: 14
        }
      },
      "16": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "17": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 91
        }
      },
      "18": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "19": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 36,
          column: 63
        }
      },
      "20": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 39,
          column: 17
        }
      },
      "21": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 74
        }
      },
      "22": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 81
        }
      },
      "25": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 73
        }
      },
      "26": {
        start: {
          line: 58,
          column: 38
        },
        end: {
          line: 58,
          column: 161
        }
      },
      "27": {
        start: {
          line: 59,
          column: 37
        },
        end: {
          line: 59,
          column: 132
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 90
        }
      },
      "29": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "30": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 59
        }
      },
      "31": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 90
        }
      },
      "32": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "33": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 64
        }
      },
      "34": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "35": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "36": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 88,
          column: 30
        }
      },
      "37": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "38": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 55
        }
      },
      "39": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "40": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "41": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "42": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 99,
          column: 42
        }
      },
      "43": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "44": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "45": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "46": {
        start: {
          line: 106,
          column: 36
        },
        end: {
          line: 106,
          column: 84
        }
      },
      "47": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "48": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 55
        }
      },
      "49": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "50": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 30
        }
      },
      "51": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 81
        }
      },
      "52": {
        start: {
          line: 116,
          column: 27
        },
        end: {
          line: 116,
          column: 73
        }
      },
      "53": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 85
        }
      },
      "54": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "55": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 57
        }
      },
      "56": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 205,
          column: 9
        }
      },
      "58": {
        start: {
          line: 134,
          column: 33
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "59": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "60": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 55
        }
      },
      "61": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 42
        }
      },
      "62": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 101
        }
      },
      "63": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 85
        }
      },
      "64": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 100
        }
      },
      "65": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 149,
          column: 18
        }
      },
      "66": {
        start: {
          line: 152,
          column: 34
        },
        end: {
          line: 152,
          column: 96
        }
      },
      "67": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "68": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 161,
          column: 18
        }
      },
      "69": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 56
        }
      },
      "70": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 43
        }
      },
      "71": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 103
        }
      },
      "72": {
        start: {
          line: 167,
          column: 31
        },
        end: {
          line: 167,
          column: 86
        }
      },
      "73": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 110
        }
      },
      "74": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 172,
          column: 18
        }
      },
      "75": {
        start: {
          line: 175,
          column: 29
        },
        end: {
          line: 175,
          column: 112
        }
      },
      "76": {
        start: {
          line: 176,
          column: 28
        },
        end: {
          line: 190,
          column: 14
        }
      },
      "77": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 33
        }
      },
      "78": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 87
        }
      },
      "79": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 76
        }
      },
      "80": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 102
        }
      },
      "81": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 200,
          column: 14
        }
      },
      "82": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 64
        }
      },
      "83": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 24
        }
      },
      "84": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "85": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 103
        }
      },
      "86": {
        start: {
          line: 215,
          column: 25
        },
        end: {
          line: 215,
          column: 67
        }
      },
      "87": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 218,
          column: 13
        }
      },
      "88": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 50
        }
      },
      "89": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "90": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 53
        }
      },
      "91": {
        start: {
          line: 224,
          column: 27
        },
        end: {
          line: 224,
          column: 73
        }
      },
      "92": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 79
        }
      },
      "93": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "94": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 65
        }
      },
      "95": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 24
        }
      },
      "96": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "97": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 67
        }
      },
      "98": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 63
        }
      },
      "99": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 58
        }
      },
      "100": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "101": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "102": {
        start: {
          line: 257,
          column: 37
        },
        end: {
          line: 257,
          column: 68
        }
      },
      "103": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 88
        }
      },
      "104": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 88
        }
      },
      "105": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 71
        }
      },
      "106": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 68
        }
      },
      "107": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 24
        }
      },
      "108": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "109": {
        start: {
          line: 274,
          column: 31
        },
        end: {
          line: 274,
          column: 83
        }
      },
      "110": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "111": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 78
        }
      },
      "112": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 84
        }
      },
      "113": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 65
        }
      },
      "114": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 28
        }
      },
      "115": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 25
        }
      },
      "116": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 68
        }
      },
      "117": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 24
        }
      },
      "118": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "119": {
        start: {
          line: 296,
          column: 35
        },
        end: {
          line: 296,
          column: 83
        }
      },
      "120": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 297,
          column: 59
        }
      },
      "121": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "122": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 50
        }
      },
      "123": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 78
        }
      },
      "124": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "125": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 30
        }
      },
      "126": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 81
        }
      },
      "127": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 104
        }
      },
      "128": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 66
        }
      },
      "129": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 24
        }
      },
      "130": {
        start: {
          line: 321,
          column: 28
        },
        end: {
          line: 321,
          column: 142
        }
      },
      "131": {
        start: {
          line: 322,
          column: 29
        },
        end: {
          line: 322,
          column: 152
        }
      },
      "132": {
        start: {
          line: 323,
          column: 26
        },
        end: {
          line: 323,
          column: 68
        }
      },
      "133": {
        start: {
          line: 324,
          column: 33
        },
        end: {
          line: 324,
          column: 78
        }
      },
      "134": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 329,
          column: 10
        }
      },
      "135": {
        start: {
          line: 335,
          column: 25
        },
        end: {
          line: 335,
          column: 81
        }
      },
      "136": {
        start: {
          line: 336,
          column: 22
        },
        end: {
          line: 336,
          column: 23
        }
      },
      "137": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 337,
          column: 36
        }
      },
      "138": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "139": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 52
        }
      },
      "140": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 22
        }
      },
      "141": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 29
        }
      },
      "142": {
        start: {
          line: 348,
          column: 22
        },
        end: {
          line: 348,
          column: 94
        }
      },
      "143": {
        start: {
          line: 349,
          column: 23
        },
        end: {
          line: 349,
          column: 25
        }
      },
      "144": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "145": {
        start: {
          line: 350,
          column: 21
        },
        end: {
          line: 350,
          column: 22
        }
      },
      "146": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 79
        }
      },
      "147": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 24
        }
      },
      "148": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 70
        }
      },
      "149": {
        start: {
          line: 365,
          column: 22
        },
        end: {
          line: 365,
          column: 32
        }
      },
      "150": {
        start: {
          line: 366,
          column: 26
        },
        end: {
          line: 366,
          column: 47
        }
      },
      "151": {
        start: {
          line: 367,
          column: 18
        },
        end: {
          line: 367,
          column: 63
        }
      },
      "152": {
        start: {
          line: 368,
          column: 26
        },
        end: {
          line: 368,
          column: 65
        }
      },
      "153": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "154": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 18
        }
      },
      "155": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 19
        }
      },
      "156": {
        start: {
          line: 375,
          column: 0
        },
        end: {
          line: 375,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 36
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 35
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 131
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 44
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 210
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        loc: {
          start: {
            line: 239,
            column: 32
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 239
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 44
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 255
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 44
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 272
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 46
          },
          end: {
            line: 316,
            column: 5
          }
        },
        line: 293
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 40
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 320
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 54
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 334
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 42
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 347
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 38
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 358
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 37
          },
          end: {
            line: 373,
            column: 5
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 16,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 16,
            column: 63
          }
        }, {
          start: {
            line: 16,
            column: 67
          },
          end: {
            line: 16,
            column: 71
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 17,
            column: 72
          }
        }, {
          start: {
            line: 17,
            column: 76
          },
          end: {
            line: 17,
            column: 81
          }
        }],
        line: 17
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 28,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 37
          },
          end: {
            line: 28,
            column: 60
          }
        }, {
          start: {
            line: 28,
            column: 63
          },
          end: {
            line: 28,
            column: 65
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "9": {
        loc: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 39
          }
        }, {
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 47
          }
        }],
        line: 48
      },
      "10": {
        loc: {
          start: {
            line: 59,
            column: 40
          },
          end: {
            line: 59,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 40
          },
          end: {
            line: 59,
            column: 64
          }
        }, {
          start: {
            line: 59,
            column: 68
          },
          end: {
            line: 59,
            column: 90
          }
        }],
        line: 59
      },
      "11": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "12": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        }, {
          start: {
            line: 97,
            column: 21
          },
          end: {
            line: 103,
            column: 17
          }
        }],
        line: 94
      },
      "15": {
        loc: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 37
          }
        }, {
          start: {
            line: 94,
            column: 41
          },
          end: {
            line: 94,
            column: 71
          }
        }],
        line: 94
      },
      "16": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "17": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "18": {
        loc: {
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "19": {
        loc: {
          start: {
            line: 175,
            column: 63
          },
          end: {
            line: 175,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 63
          },
          end: {
            line: 175,
            column: 72
          }
        }, {
          start: {
            line: 175,
            column: 76
          },
          end: {
            line: 175,
            column: 101
          }
        }, {
          start: {
            line: 175,
            column: 105
          },
          end: {
            line: 175,
            column: 111
          }
        }],
        line: 175
      },
      "20": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 218,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "21": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "22": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "23": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "24": {
        loc: {
          start: {
            line: 301,
            column: 29
          },
          end: {
            line: 301,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 54
          },
          end: {
            line: 301,
            column: 64
          }
        }, {
          start: {
            line: 301,
            column: 67
          },
          end: {
            line: 301,
            column: 77
          }
        }],
        line: 301
      },
      "25": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 371,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "26": {
        loc: {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 25
          }
        }, {
          start: {
            line: 369,
            column: 30
          },
          end: {
            line: 369,
            column: 45
          }
        }, {
          start: {
            line: 369,
            column: 49
          },
          end: {
            line: 369,
            column: 86
          }
        }],
        line: 369
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b5c2b1d3887860a4e41bd69be3a08a25dc7e1e3a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1x4w0to4il = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1x4w0to4il();
var __importDefault =
/* istanbul ignore next */
(cov_1x4w0to4il().s[0]++,
/* istanbul ignore next */
(cov_1x4w0to4il().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1x4w0to4il().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1x4w0to4il().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1x4w0to4il().f[0]++;
  cov_1x4w0to4il().s[1]++;
  return /* istanbul ignore next */(cov_1x4w0to4il().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1x4w0to4il().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1x4w0to4il().s[3]++;
exports.AuthService = void 0;
const jsonwebtoken_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[4]++, __importDefault(require("jsonwebtoken")));
const User_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[5]++, require("@/models/User"));
const logger_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[6]++, require("../config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[7]++, require("@/config/redis"));
const secrets_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[8]++, require("@/config/secrets"));
const emailService_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[9]++, require("./emailService"));
const smsService_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[10]++, require("./smsService"));
const aiService_1 =
/* istanbul ignore next */
(cov_1x4w0to4il().s[11]++, require("./aiService"));
class AuthService {
  static ACCESS_TOKEN_EXPIRES_IN =
  /* istanbul ignore next */
  (cov_1x4w0to4il().s[12]++,
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[3][0]++, process.env.JWT_EXPIRES_IN) ||
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[3][1]++, '7d'));
  static REFRESH_TOKEN_EXPIRES_IN =
  /* istanbul ignore next */
  (cov_1x4w0to4il().s[13]++,
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[4][0]++, process.env.JWT_REFRESH_EXPIRES_IN) ||
  /* istanbul ignore next */
  (cov_1x4w0to4il().b[4][1]++, '30d'));
  /**
   * Register a new user
   */
  static async register(data) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[1]++;
    cov_1x4w0to4il().s[14]++;
    try {
      // Check if user already exists
      const existingUser =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[15]++, await User_1.User.findOne({
        $or: [{
          email: data.email.toLowerCase()
        }, {
          username: data.username
        }, ...(data.phone ?
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[5][0]++, [{
          phone: data.phone
        }]) :
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[5][1]++, []))]
      }));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[16]++;
      if (existingUser) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[6][0]++;
        cov_1x4w0to4il().s[17]++;
        throw new Error('User already exists with this email, username, or phone');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[6][1]++;
      }
      // Validate age (must be 13+)
      cov_1x4w0to4il().s[18]++;
      if (data.dateOfBirth) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[7][0]++;
        const age =
        /* istanbul ignore next */
        (cov_1x4w0to4il().s[19]++, this.calculateAge(data.dateOfBirth));
        /* istanbul ignore next */
        cov_1x4w0to4il().s[20]++;
        if (age < 13) {
          /* istanbul ignore next */
          cov_1x4w0to4il().b[8][0]++;
          cov_1x4w0to4il().s[21]++;
          throw new Error('User must be at least 13 years old');
        } else
        /* istanbul ignore next */
        {
          cov_1x4w0to4il().b[8][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[7][1]++;
      }
      // Create new user
      const user =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[22]++, new User_1.User({
        username: data.username,
        email: data.email.toLowerCase(),
        phone: data.phone,
        password: data.password,
        country: data.country,
        language:
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[9][0]++, data.language) ||
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[9][1]++, 'en'),
        dateOfBirth: data.dateOfBirth,
        gender: data.gender
      }));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[23]++;
      await user.save();
      // Cache user data
      /* istanbul ignore next */
      cov_1x4w0to4il().s[24]++;
      await (0, redis_1.setCache)(`user:${user._id}`, user.toJSON(), 3600); // 1 hour
      // Generate tokens
      const tokens =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[25]++, await this.generateTokens(user._id.toString()));
      // Send welcome email with verification
      const verificationToken =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[26]++, jsonwebtoken_1.default.sign({
        userId: user._id,
        type: 'email_verification'
      }, process.env.JWT_SECRET, {
        expiresIn: '24h'
      }));
      const verificationLink =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[27]++, `${
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[10][0]++, process.env.FRONTEND_URL) ||
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[10][1]++, 'https://halobuzz.com')}/verify-email?token=${verificationToken}`);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[28]++;
      await emailService_1.EmailService.sendWelcomeEmail(user.email, user.username);
      // Send verification SMS if phone provided
      /* istanbul ignore next */
      cov_1x4w0to4il().s[29]++;
      if (data.phone) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[11][0]++;
        cov_1x4w0to4il().s[30]++;
        await this.sendVerificationSMS(data.phone);
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[11][1]++;
      }
      cov_1x4w0to4il().s[31]++;
      logger_1.logger.info(`New user registered: ${user.username} (${user.email})`);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[32]++;
      return {
        user: user.toJSON(),
        ...tokens
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[33]++;
      logger_1.logger.error('Registration error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[34]++;
      throw error;
    }
  }
  /**
   * Login user with email/phone/username and password
   */
  static async login(credentials) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[2]++;
    cov_1x4w0to4il().s[35]++;
    try {
      // Find user with timeout handling
      const user =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[36]++, await User_1.User.findOne({
        $or: [{
          email: credentials.email?.toLowerCase()
        }, {
          phone: credentials.phone
        }, {
          username: credentials.username
        }]
      }).maxTimeMS(5000)); // 5 second timeout
      /* istanbul ignore next */
      cov_1x4w0to4il().s[37]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[12][0]++;
        cov_1x4w0to4il().s[38]++;
        throw new Error('Invalid credentials');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[12][1]++;
      }
      // Check if user is banned
      cov_1x4w0to4il().s[39]++;
      if (user.isBanned) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[13][0]++;
        cov_1x4w0to4il().s[40]++;
        if (
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[15][0]++, user.banExpiresAt) &&
        /* istanbul ignore next */
        (cov_1x4w0to4il().b[15][1]++, new Date() < user.banExpiresAt)) {
          /* istanbul ignore next */
          cov_1x4w0to4il().b[14][0]++;
          cov_1x4w0to4il().s[41]++;
          throw new Error(`Account banned: ${user.banReason}`);
        } else {
          /* istanbul ignore next */
          cov_1x4w0to4il().b[14][1]++;
          cov_1x4w0to4il().s[42]++;
          // Unban user if ban has expired
          user.isBanned = false;
          /* istanbul ignore next */
          cov_1x4w0to4il().s[43]++;
          user.banReason = undefined;
          /* istanbul ignore next */
          cov_1x4w0to4il().s[44]++;
          user.banExpiresAt = undefined;
          /* istanbul ignore next */
          cov_1x4w0to4il().s[45]++;
          await user.save();
        }
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[13][1]++;
      }
      // Verify password
      const isValidPassword =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[46]++, await user.comparePassword(credentials.password));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[47]++;
      if (!isValidPassword) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[16][0]++;
        cov_1x4w0to4il().s[48]++;
        throw new Error('Invalid credentials');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[16][1]++;
      }
      // Update last active
      cov_1x4w0to4il().s[49]++;
      user.lastActiveAt = new Date();
      /* istanbul ignore next */
      cov_1x4w0to4il().s[50]++;
      await user.save();
      // Cache user data
      /* istanbul ignore next */
      cov_1x4w0to4il().s[51]++;
      await (0, redis_1.setCache)(`user:${user._id}`, user.toJSON(), 3600);
      // Generate tokens
      const tokens =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[52]++, await this.generateTokens(user._id.toString()));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[53]++;
      logger_1.logger.info(`User logged in: ${user.username} (${user.email})`);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[54]++;
      return {
        user: user.toJSON(),
        ...tokens
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[55]++;
      logger_1.logger.error('Login error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[56]++;
      throw error;
    }
  }
  /**
   * Social login (Google, Facebook, Apple)
   */
  static async socialLogin(data) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[3]++;
    cov_1x4w0to4il().s[57]++;
    try {
      // Find existing user by social login
      const existingUser =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[58]++, await User_1.User.findOne({
        [`socialLogin.${data.provider}.id`]: data.providerId
      }));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[59]++;
      if (existingUser) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[17][0]++;
        cov_1x4w0to4il().s[60]++;
        // Update last active
        existingUser.lastActiveAt = new Date();
        /* istanbul ignore next */
        cov_1x4w0to4il().s[61]++;
        await existingUser.save();
        // Cache user data
        /* istanbul ignore next */
        cov_1x4w0to4il().s[62]++;
        await (0, redis_1.setCache)(`user:${existingUser._id}`, existingUser.toJSON(), 3600);
        // Generate tokens
        const tokens =
        /* istanbul ignore next */
        (cov_1x4w0to4il().s[63]++, await this.generateTokens(existingUser._id.toString()));
        /* istanbul ignore next */
        cov_1x4w0to4il().s[64]++;
        logger_1.logger.info(`Social login: ${existingUser.username} via ${data.provider}`);
        /* istanbul ignore next */
        cov_1x4w0to4il().s[65]++;
        return {
          user: existingUser.toJSON(),
          ...tokens
        };
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[17][1]++;
      }
      // Check if email already exists
      const userWithEmail =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[66]++, await User_1.User.findOne({
        email: data.email.toLowerCase()
      }));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[67]++;
      if (userWithEmail) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[18][0]++;
        cov_1x4w0to4il().s[68]++;
        // Link social account to existing user
        userWithEmail.socialLogin = {
          ...userWithEmail.socialLogin,
          [data.provider]: {
            id: data.providerId,
            email: data.email
          }
        };
        /* istanbul ignore next */
        cov_1x4w0to4il().s[69]++;
        userWithEmail.lastActiveAt = new Date();
        /* istanbul ignore next */
        cov_1x4w0to4il().s[70]++;
        await userWithEmail.save();
        // Cache user data
        /* istanbul ignore next */
        cov_1x4w0to4il().s[71]++;
        await (0, redis_1.setCache)(`user:${userWithEmail._id}`, userWithEmail.toJSON(), 3600);
        // Generate tokens
        const tokens =
        /* istanbul ignore next */
        (cov_1x4w0to4il().s[72]++, await this.generateTokens(userWithEmail._id.toString()));
        /* istanbul ignore next */
        cov_1x4w0to4il().s[73]++;
        logger_1.logger.info(`Social account linked: ${userWithEmail.username} via ${data.provider}`);
        /* istanbul ignore next */
        cov_1x4w0to4il().s[74]++;
        return {
          user: userWithEmail.toJSON(),
          ...tokens
        };
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[18][1]++;
      }
      // Create new user with social login
      const username =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[75]++, await this.generateUniqueUsername(
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[19][0]++, data.name) ||
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[19][1]++, data.email?.split('@')[0]) ||
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[19][2]++, 'user')));
      const newUser =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[76]++, new User_1.User({
        username,
        email: data.email.toLowerCase(),
        password: await this.generateRandomPassword(),
        country: 'NP',
        // Default to Nepal
        language: 'en',
        avatar: data.avatar,
        socialLogin: {
          [data.provider]: {
            id: data.providerId,
            email: data.email
          }
        },
        isVerified: true // Social login users are pre-verified
      }));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[77]++;
      await newUser.save();
      // Cache user data
      /* istanbul ignore next */
      cov_1x4w0to4il().s[78]++;
      await (0, redis_1.setCache)(`user:${newUser._id}`, newUser.toJSON(), 3600);
      // Generate tokens
      const tokens =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[79]++, await this.generateTokens(newUser._id.toString()));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[80]++;
      logger_1.logger.info(`New social user created: ${newUser.username} via ${data.provider}`);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[81]++;
      return {
        user: newUser.toJSON(),
        ...tokens
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[82]++;
      logger_1.logger.error('Social login error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[83]++;
      throw error;
    }
  }
  /**
   * Refresh access token
   */
  static async refreshToken(refreshToken) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[4]++;
    cov_1x4w0to4il().s[84]++;
    try {
      // Verify refresh token
      const decoded =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[85]++, jsonwebtoken_1.default.verify(refreshToken, process.env.JWT_REFRESH_SECRET));
      // Find user
      const user =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[86]++, await User_1.User.findById(decoded.userId));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[87]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[20][0]++;
        cov_1x4w0to4il().s[88]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[20][1]++;
      }
      // Check if user is banned
      cov_1x4w0to4il().s[89]++;
      if (user.isBanned) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[21][0]++;
        cov_1x4w0to4il().s[90]++;
        throw new Error('Account is banned');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[21][1]++;
      }
      // Generate new tokens
      const tokens =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[91]++, await this.generateTokens(user._id.toString()));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[92]++;
      logger_1.logger.info(`Token refreshed for user: ${user.username}`);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[93]++;
      return {
        user: user.toJSON(),
        ...tokens
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[94]++;
      logger_1.logger.error('Token refresh error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[95]++;
      throw error;
    }
  }
  /**
   * Logout user
   */
  static async logout(userId) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[5]++;
    cov_1x4w0to4il().s[96]++;
    try {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[97]++;
      // Remove user from cache
      await (0, redis_1.setCache)(`user:${userId}`, null, 1);
      // Add token to blacklist (implement if needed)
      // await this.blacklistToken(token);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[98]++;
      logger_1.logger.info(`User logged out: ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[99]++;
      logger_1.logger.error('Logout error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[100]++;
      throw error;
    }
  }
  /**
   * Send verification SMS
   */
  static async sendVerificationSMS(phone) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[6]++;
    cov_1x4w0to4il().s[101]++;
    try {
      const verificationCode =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[102]++, this.generateVerificationCode());
      // Cache verification code
      /* istanbul ignore next */
      cov_1x4w0to4il().s[103]++;
      await (0, redis_1.setCache)(`verification:${phone}`, verificationCode, 300); // 5 minutes
      // Send SMS
      /* istanbul ignore next */
      cov_1x4w0to4il().s[104]++;
      await smsService_1.SMSService.sendVerificationCode(phone, verificationCode);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[105]++;
      logger_1.logger.info(`Verification SMS sent to: ${phone}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[106]++;
      logger_1.logger.error('SMS verification error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[107]++;
      throw error;
    }
  }
  /**
   * Verify SMS code
   */
  static async verifySMSCode(phone, code) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[7]++;
    cov_1x4w0to4il().s[108]++;
    try {
      const cachedCode =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[109]++, await (0, redis_1.getCache)(`verification:${phone}`));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[110]++;
      if (cachedCode === code) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[22][0]++;
        cov_1x4w0to4il().s[111]++;
        // Remove cached code
        await (0, redis_1.setCache)(`verification:${phone}`, null, 1);
        // Update user verification status
        /* istanbul ignore next */
        cov_1x4w0to4il().s[112]++;
        await User_1.User.findOneAndUpdate({
          phone
        }, {
          isVerified: true
        });
        /* istanbul ignore next */
        cov_1x4w0to4il().s[113]++;
        logger_1.logger.info(`Phone verified: ${phone}`);
        /* istanbul ignore next */
        cov_1x4w0to4il().s[114]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[22][1]++;
      }
      cov_1x4w0to4il().s[115]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[116]++;
      logger_1.logger.error('SMS verification error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[117]++;
      throw error;
    }
  }
  /**
   * Submit KYC documents
   */
  static async submitKYC(userId, documents) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[8]++;
    cov_1x4w0to4il().s[118]++;
    try {
      // Process documents with AI
      const aiVerification =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[119]++, await aiService_1.AIService.verifyKYC(documents));
      const user =
      /* istanbul ignore next */
      (cov_1x4w0to4il().s[120]++, await User_1.User.findById(userId));
      /* istanbul ignore next */
      cov_1x4w0to4il().s[121]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1x4w0to4il().b[23][0]++;
        cov_1x4w0to4il().s[122]++;
        throw new Error('User not found');
      } else
      /* istanbul ignore next */
      {
        cov_1x4w0to4il().b[23][1]++;
      }
      cov_1x4w0to4il().s[123]++;
      user.kycStatus = aiVerification.isValid ?
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[24][0]++, 'verified') :
      /* istanbul ignore next */
      (cov_1x4w0to4il().b[24][1]++, 'rejected');
      /* istanbul ignore next */
      cov_1x4w0to4il().s[124]++;
      user.kycDocuments = {
        idCard: documents.idCard,
        selfie: documents.selfie,
        verificationDate: new Date()
      };
      /* istanbul ignore next */
      cov_1x4w0to4il().s[125]++;
      await user.save();
      // Cache updated user data
      /* istanbul ignore next */
      cov_1x4w0to4il().s[126]++;
      await (0, redis_1.setCache)(`user:${user._id}`, user.toJSON(), 3600);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[127]++;
      logger_1.logger.info(`KYC submitted for user: ${user.username}, status: ${user.kycStatus}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[128]++;
      logger_1.logger.error('KYC submission error:', error);
      /* istanbul ignore next */
      cov_1x4w0to4il().s[129]++;
      throw error;
    }
  }
  /**
   * Generate JWT tokens
   */
  static async generateTokens(userId) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[9]++;
    const accessToken =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[130]++, jsonwebtoken_1.default.sign({
      userId
    }, secrets_1.secrets.JWT_SECRET, {
      expiresIn: this.ACCESS_TOKEN_EXPIRES_IN
    }));
    const refreshToken =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[131]++, jsonwebtoken_1.default.sign({
      userId
    }, secrets_1.secrets.JWT_REFRESH_SECRET, {
      expiresIn: this.REFRESH_TOKEN_EXPIRES_IN
    }));
    const expiresIn =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[132]++, jsonwebtoken_1.default.decode(accessToken));
    const expiresInSeconds =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[133]++, expiresIn.exp - Math.floor(Date.now() / 1000));
    /* istanbul ignore next */
    cov_1x4w0to4il().s[134]++;
    return {
      accessToken,
      refreshToken,
      expiresIn: expiresInSeconds
    };
  }
  /**
   * Generate unique username
   */
  static async generateUniqueUsername(baseUsername) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[10]++;
    const username =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[135]++, baseUsername.replace(/[^a-zA-Z0-9_]/g, '').toLowerCase());
    let counter =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[136]++, 1);
    let finalUsername =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[137]++, username);
    /* istanbul ignore next */
    cov_1x4w0to4il().s[138]++;
    while (await User_1.User.findOne({
      username: finalUsername
    })) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[139]++;
      finalUsername = `${username}${counter}`;
      /* istanbul ignore next */
      cov_1x4w0to4il().s[140]++;
      counter++;
    }
    /* istanbul ignore next */
    cov_1x4w0to4il().s[141]++;
    return finalUsername;
  }
  /**
   * Generate random password for social login users
   */
  static async generateRandomPassword() {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[11]++;
    const chars =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[142]++, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*');
    let password =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[143]++, '');
    /* istanbul ignore next */
    cov_1x4w0to4il().s[144]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[145]++, 0); i < 12; i++) {
      /* istanbul ignore next */
      cov_1x4w0to4il().s[146]++;
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    /* istanbul ignore next */
    cov_1x4w0to4il().s[147]++;
    return password;
  }
  /**
   * Generate verification code
   */
  static generateVerificationCode() {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[12]++;
    cov_1x4w0to4il().s[148]++;
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
  /**
   * Calculate age from date of birth
   */
  static calculateAge(dateOfBirth) {
    /* istanbul ignore next */
    cov_1x4w0to4il().f[13]++;
    const today =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[149]++, new Date());
    const birthDate =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[150]++, new Date(dateOfBirth));
    let age =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[151]++, today.getFullYear() - birthDate.getFullYear());
    const monthDiff =
    /* istanbul ignore next */
    (cov_1x4w0to4il().s[152]++, today.getMonth() - birthDate.getMonth());
    /* istanbul ignore next */
    cov_1x4w0to4il().s[153]++;
    if (
    /* istanbul ignore next */
    (cov_1x4w0to4il().b[26][0]++, monthDiff < 0) ||
    /* istanbul ignore next */
    (cov_1x4w0to4il().b[26][1]++, monthDiff === 0) &&
    /* istanbul ignore next */
    (cov_1x4w0to4il().b[26][2]++, today.getDate() < birthDate.getDate())) {
      /* istanbul ignore next */
      cov_1x4w0to4il().b[25][0]++;
      cov_1x4w0to4il().s[154]++;
      age--;
    } else
    /* istanbul ignore next */
    {
      cov_1x4w0to4il().b[25][1]++;
    }
    cov_1x4w0to4il().s[155]++;
    return age;
  }
}
/* istanbul ignore next */
cov_1x4w0to4il().s[156]++;
exports.AuthService = AuthService;