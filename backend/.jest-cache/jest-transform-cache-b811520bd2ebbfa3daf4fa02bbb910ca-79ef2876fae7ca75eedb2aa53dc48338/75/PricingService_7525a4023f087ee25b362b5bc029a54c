dbe7698e0aa427f8aa3282143e1c88a7
"use strict";

/* istanbul ignore next */
function cov_z6rouuc2f() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\PricingService.ts";
  var hash = "6f0609ba67364179d75efd18ed9c4053f31e2882";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\PricingService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 9,
          column: 9
        }
      },
      "3": {
        start: {
          line: 8,
          column: 12
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 65
        }
      },
      "6": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 56
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "8": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 104
        }
      },
      "9": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 51
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 12
          },
          end: {
            line: 7,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 12
          },
          end: {
            line: 7,
            column: 39
          }
        }, {
          start: {
            line: 7,
            column: 43
          },
          end: {
            line: 7,
            column: 66
          }
        }],
        line: 7
      },
      "2": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "3": {
        loc: {
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 26
          }
        }, {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 10,
            column: 40
          }
        }],
        line: 10
      },
      "4": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6f0609ba67364179d75efd18ed9c4053f31e2882"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z6rouuc2f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z6rouuc2f();
cov_z6rouuc2f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_z6rouuc2f().s[1]++;
exports.PricingService = void 0;
class PricingService {
  // NP baseline: NPR 10 = 500 coins => 1 coin = 0.02 NPR; 1 NPR = 50 coins
  static validateNepalBaseline(amountNpr, coins) {
    /* istanbul ignore next */
    cov_z6rouuc2f().f[0]++;
    cov_z6rouuc2f().s[2]++;
    if (
    /* istanbul ignore next */
    (cov_z6rouuc2f().b[1][0]++, !Number.isFinite(amountNpr)) ||
    /* istanbul ignore next */
    (cov_z6rouuc2f().b[1][1]++, !Number.isFinite(coins))) {
      /* istanbul ignore next */
      cov_z6rouuc2f().b[0][0]++;
      cov_z6rouuc2f().s[3]++;
      throw new Error('Invalid pricing inputs');
    } else
    /* istanbul ignore next */
    {
      cov_z6rouuc2f().b[0][1]++;
    }
    cov_z6rouuc2f().s[4]++;
    if (
    /* istanbul ignore next */
    (cov_z6rouuc2f().b[3][0]++, amountNpr <= 0) ||
    /* istanbul ignore next */
    (cov_z6rouuc2f().b[3][1]++, coins <= 0)) {
      /* istanbul ignore next */
      cov_z6rouuc2f().b[2][0]++;
      cov_z6rouuc2f().s[5]++;
      throw new Error('Amount and coins must be positive');
    } else
    /* istanbul ignore next */
    {
      cov_z6rouuc2f().b[2][1]++;
    }
    const expectedCoins =
    /* istanbul ignore next */
    (cov_z6rouuc2f().s[6]++, Math.round(amountNpr * 50));
    /* istanbul ignore next */
    cov_z6rouuc2f().s[7]++;
    if (coins !== expectedCoins) {
      /* istanbul ignore next */
      cov_z6rouuc2f().b[4][0]++;
      cov_z6rouuc2f().s[8]++;
      throw new Error(`Invalid NP pricing: expected ${expectedCoins} coins for NPR ${amountNpr}`);
    } else
    /* istanbul ignore next */
    {
      cov_z6rouuc2f().b[4][1]++;
    }
  }
}
/* istanbul ignore next */
cov_z6rouuc2f().s[9]++;
exports.PricingService = PricingService;