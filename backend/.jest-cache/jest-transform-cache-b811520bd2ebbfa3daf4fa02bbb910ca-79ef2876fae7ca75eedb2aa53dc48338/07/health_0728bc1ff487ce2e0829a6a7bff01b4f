7c6294d05ad6d6cf9be5bb21e0000b9d
"use strict";

/* istanbul ignore next */
function cov_vs2a6dkg3() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\health.ts";
  var hash = "4a3dd25bdd16e8e8a943a1cb711c3011c398fd17";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\health.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 55
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 41
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 60,
          column: 3
        }
      },
      "9": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "10": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "11": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "13": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 44
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 39
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 70
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 35
        }
      },
      "19": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "20": {
        start: {
          line: 42,
          column: 28
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "21": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "22": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "23": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "24": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 46,
          column: 51
        }
      },
      "25": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 41
        }
      },
      "26": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "27": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 67
        }
      },
      "28": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "29": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 35
        }
      },
      "30": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 57
        }
      },
      "31": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 40
        }
      },
      "32": {
        start: {
          line: 62,
          column: 0
        },
        end: {
          line: 138,
          column: 3
        }
      },
      "33": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "34": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "36": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 36
        }
      },
      "37": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 66
        }
      },
      "38": {
        start: {
          line: 100,
          column: 33
        },
        end: {
          line: 100,
          column: 51
        }
      },
      "39": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 59
        }
      },
      "40": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 73
        }
      },
      "41": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "42": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 47
        }
      },
      "43": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 79
        }
      },
      "44": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 58
        }
      },
      "45": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 104
        }
      },
      "46": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 43
        }
      },
      "47": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "48": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "49": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "50": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "51": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 37
        }
      },
      "52": {
        start: {
          line: 121,
          column: 33
        },
        end: {
          line: 121,
          column: 51
        }
      },
      "53": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 56
        }
      },
      "54": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 59
        }
      },
      "55": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 70
        }
      },
      "56": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 62
        }
      },
      "57": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "58": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 55
        }
      },
      "59": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 101
        }
      },
      "60": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 43
        }
      },
      "61": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 65
        }
      },
      "62": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 48
        }
      },
      "63": {
        start: {
          line: 139,
          column: 0
        },
        end: {
          line: 139,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 23
          }
        },
        loc: {
          start: {
            line: 12,
            column: 42
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 32
          }
        },
        loc: {
          start: {
            line: 62,
            column: 51
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 62
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: 30,
            column: 13
          },
          end: {
            line: 33,
            column: 9
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: 49,
            column: 13
          },
          end: {
            line: 51,
            column: 9
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 58,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 48
          },
          end: {
            line: 58,
            column: 51
          }
        }, {
          start: {
            line: 58,
            column: 54
          },
          end: {
            line: 58,
            column: 57
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 84,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 25
          },
          end: {
            line: 84,
            column: 56
          }
        }, {
          start: {
            line: 84,
            column: 60
          },
          end: {
            line: 84,
            column: 69
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 107,
            column: 9
          }
        }],
        line: 97
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 49
          },
          end: {
            line: 112,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 74
          },
          end: {
            line: 112,
            column: 87
          }
        }, {
          start: {
            line: 112,
            column: 90
          },
          end: {
            line: 112,
            column: 103
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: 126,
            column: 13
          },
          end: {
            line: 128,
            column: 9
          }
        }],
        line: 118
      },
      "10": {
        loc: {
          start: {
            line: 133,
            column: 46
          },
          end: {
            line: 133,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 71
          },
          end: {
            line: 133,
            column: 84
          }
        }, {
          start: {
            line: 133,
            column: 87
          },
          end: {
            line: 133,
            column: 100
          }
        }],
        line: 133
      },
      "11": {
        loc: {
          start: {
            line: 136,
            column: 23
          },
          end: {
            line: 136,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 56
          },
          end: {
            line: 136,
            column: 59
          }
        }, {
          start: {
            line: 136,
            column: 62
          },
          end: {
            line: 136,
            column: 65
          }
        }],
        line: 136
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4a3dd25bdd16e8e8a943a1cb711c3011c398fd17"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vs2a6dkg3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vs2a6dkg3();
var __importDefault =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[0]++,
/* istanbul ignore next */
(cov_vs2a6dkg3().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_vs2a6dkg3().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_vs2a6dkg3().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_vs2a6dkg3().f[0]++;
  cov_vs2a6dkg3().s[1]++;
  return /* istanbul ignore next */(cov_vs2a6dkg3().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_vs2a6dkg3().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[3]++, __importDefault(require("express")));
const mongoose_1 =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[4]++, __importDefault(require("mongoose")));
const redis_1 =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[5]++, require("../config/redis"));
const logger_1 =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[6]++, require("../config/logger"));
const router =
/* istanbul ignore next */
(cov_vs2a6dkg3().s[7]++, express_1.default.Router());
// Health check endpoint
/* istanbul ignore next */
cov_vs2a6dkg3().s[8]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_vs2a6dkg3().f[1]++;
  const health =
  /* istanbul ignore next */
  (cov_vs2a6dkg3().s[9]++, {
    status: 'ok',
    timestamp: new Date().toISOString(),
    services: {
      database: 'unknown',
      redis: 'unknown',
      api: 'ok'
    },
    uptime: process.uptime()
  });
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[10]++;
  try {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[11]++;
    // Check database connection
    if (mongoose_1.default.connection.readyState === 1) {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[3][0]++;
      cov_vs2a6dkg3().s[12]++;
      // Test database query
      await mongoose_1.default.connection.db.admin().ping();
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[13]++;
      health.services.database = 'ok';
    } else {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[3][1]++;
      cov_vs2a6dkg3().s[14]++;
      health.services.database = 'disconnected';
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[15]++;
      health.status = 'degraded';
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[16]++;
    logger_1.logger.error('Database health check failed:', error);
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[17]++;
    health.services.database = 'error';
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[18]++;
    health.status = 'degraded';
  }
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[19]++;
  try {
    // Check Redis connection
    const redisClient =
    /* istanbul ignore next */
    (cov_vs2a6dkg3().s[20]++, (0, redis_1.getRedisClient)());
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[21]++;
    if (redisClient) {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[4][0]++;
      const start =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[22]++, Date.now());
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[23]++;
      await redisClient.ping();
      const responseTime =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[24]++, Date.now() - start);
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[25]++;
      health.services.redis = 'ok';
    } else {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[4][1]++;
      cov_vs2a6dkg3().s[26]++;
      health.services.redis = 'disabled';
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[27]++;
    logger_1.logger.error('Redis health check failed:', error);
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[28]++;
    health.services.redis = 'error';
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[29]++;
    health.status = 'degraded';
  }
  const statusCode =
  /* istanbul ignore next */
  (cov_vs2a6dkg3().s[30]++, health.status === 'ok' ?
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[5][0]++, 200) :
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[5][1]++, 503));
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[31]++;
  res.status(statusCode).json(health);
});
// Detailed health check with more information
/* istanbul ignore next */
cov_vs2a6dkg3().s[32]++;
router.get('/health/detailed', async (req, res) => {
  /* istanbul ignore next */
  cov_vs2a6dkg3().f[2]++;
  const detailedHealth =
  /* istanbul ignore next */
  (cov_vs2a6dkg3().s[33]++, {
    status: 'ok',
    timestamp: new Date().toISOString(),
    services: {
      database: {
        status: 'unknown',
        connectionState: mongoose_1.default.connection.readyState,
        host: mongoose_1.default.connection.host,
        port: mongoose_1.default.connection.port,
        name: mongoose_1.default.connection.name,
        responseTime: 0,
        error: ''
      },
      redis: {
        status: 'unknown',
        connected: false,
        responseTime: 0,
        error: ''
      },
      api: {
        status: 'ok',
        version:
        /* istanbul ignore next */
        (cov_vs2a6dkg3().b[6][0]++, process.env.npm_package_version) ||
        /* istanbul ignore next */
        (cov_vs2a6dkg3().b[6][1]++, 'unknown'),
        nodeVersion: process.version,
        platform: process.platform
      }
    },
    system: {
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      cpu: process.cpuUsage()
    }
  });
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[34]++;
  try {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[35]++;
    // Check database connection
    if (mongoose_1.default.connection.readyState === 1) {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[7][0]++;
      const start =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[36]++, Date.now());
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[37]++;
      await mongoose_1.default.connection.db.admin().ping();
      const responseTime =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[38]++, Date.now() - start);
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[39]++;
      detailedHealth.services.database.status = 'ok';
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[40]++;
      detailedHealth.services.database.responseTime = responseTime;
    } else {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[7][1]++;
      cov_vs2a6dkg3().s[41]++;
      detailedHealth.services.database.status = 'disconnected';
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[42]++;
      detailedHealth.status = 'degraded';
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[43]++;
    logger_1.logger.error('Database detailed health check failed:', error);
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[44]++;
    detailedHealth.services.database.status = 'error';
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[45]++;
    detailedHealth.services.database.error = error instanceof Error ?
    /* istanbul ignore next */
    (cov_vs2a6dkg3().b[8][0]++, error.message) :
    /* istanbul ignore next */
    (cov_vs2a6dkg3().b[8][1]++, String(error));
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[46]++;
    detailedHealth.status = 'degraded';
  }
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[47]++;
  try {
    // Check Redis connection
    const redisClient =
    /* istanbul ignore next */
    (cov_vs2a6dkg3().s[48]++, (0, redis_1.getRedisClient)());
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[49]++;
    if (redisClient) {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[9][0]++;
      const start =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[50]++, Date.now());
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[51]++;
      await redisClient.ping();
      const responseTime =
      /* istanbul ignore next */
      (cov_vs2a6dkg3().s[52]++, Date.now() - start);
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[53]++;
      detailedHealth.services.redis.status = 'ok';
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[54]++;
      detailedHealth.services.redis.connected = true;
      /* istanbul ignore next */
      cov_vs2a6dkg3().s[55]++;
      detailedHealth.services.redis.responseTime = responseTime;
    } else {
      /* istanbul ignore next */
      cov_vs2a6dkg3().b[9][1]++;
      cov_vs2a6dkg3().s[56]++;
      detailedHealth.services.redis.status = 'disabled';
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[57]++;
    logger_1.logger.error('Redis detailed health check failed:', error);
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[58]++;
    detailedHealth.services.redis.status = 'error';
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[59]++;
    detailedHealth.services.redis.error = error instanceof Error ?
    /* istanbul ignore next */
    (cov_vs2a6dkg3().b[10][0]++, error.message) :
    /* istanbul ignore next */
    (cov_vs2a6dkg3().b[10][1]++, String(error));
    /* istanbul ignore next */
    cov_vs2a6dkg3().s[60]++;
    detailedHealth.status = 'degraded';
  }
  const statusCode =
  /* istanbul ignore next */
  (cov_vs2a6dkg3().s[61]++, detailedHealth.status === 'ok' ?
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[11][0]++, 200) :
  /* istanbul ignore next */
  (cov_vs2a6dkg3().b[11][1]++, 503));
  /* istanbul ignore next */
  cov_vs2a6dkg3().s[62]++;
  res.status(statusCode).json(detailedHealth);
});
/* istanbul ignore next */
cov_vs2a6dkg3().s[63]++;
exports.default = router;