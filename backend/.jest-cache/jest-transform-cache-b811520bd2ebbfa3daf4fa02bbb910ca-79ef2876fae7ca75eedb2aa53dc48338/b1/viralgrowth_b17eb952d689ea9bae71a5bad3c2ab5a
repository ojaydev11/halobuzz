d2f15d3763973a2645a0224c18e2bfea
"use strict";

/* istanbul ignore next */
function cov_1jegmsitq9() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\viral-growth.ts";
  var hash = "c35ca0ac38b6553b4059c624be3a0f83dc6f2e13";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\viral-growth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 29
        },
        end: {
          line: 4,
          column: 69
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "9": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 43,
          column: 3
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "11": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 39
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "13": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 24,
          column: 15
        }
      },
      "14": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 26,
          column: 103
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 72
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "18": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 67,
          column: 3
        }
      },
      "19": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "20": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 39
        }
      },
      "21": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "22": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 52,
          column: 15
        }
      },
      "23": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 92
        }
      },
      "24": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "25": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "27": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 92,
          column: 3
        }
      },
      "28": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "29": {
        start: {
          line: 71,
          column: 33
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "30": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 39
        }
      },
      "31": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "33": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 106
        }
      },
      "34": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "35": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 67
        }
      },
      "36": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "37": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 109,
          column: 3
        }
      },
      "38": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "39": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 96,
          column: 91
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "41": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 71
        }
      },
      "42": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "43": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "44": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "45": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 113,
          column: 37
        }
      },
      "46": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 104
        }
      },
      "47": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "48": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 71
        }
      },
      "49": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "50": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 145,
          column: 3
        }
      },
      "51": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "52": {
        start: {
          line: 131,
          column: 37
        },
        end: {
          line: 131,
          column: 46
        }
      },
      "53": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 97
        }
      },
      "54": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "55": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 70
        }
      },
      "56": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "57": {
        start: {
          line: 147,
          column: 0
        },
        end: {
          line: 165,
          column: 3
        }
      },
      "58": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "59": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 95
        }
      },
      "60": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "61": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 73
        }
      },
      "62": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "63": {
        start: {
          line: 167,
          column: 0
        },
        end: {
          line: 183,
          column: 3
        }
      },
      "64": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "65": {
        start: {
          line: 169,
          column: 31
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "66": {
        start: {
          line: 170,
          column: 29
        },
        end: {
          line: 170,
          column: 107
        }
      },
      "67": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "68": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 69
        }
      },
      "69": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "70": {
        start: {
          line: 185,
          column: 0
        },
        end: {
          line: 201,
          column: 3
        }
      },
      "71": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 200,
          column: 5
        }
      },
      "72": {
        start: {
          line: 187,
          column: 31
        },
        end: {
          line: 187,
          column: 40
        }
      },
      "73": {
        start: {
          line: 188,
          column: 28
        },
        end: {
          line: 188,
          column: 113
        }
      },
      "74": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "75": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 76
        }
      },
      "76": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "77": {
        start: {
          line: 203,
          column: 0
        },
        end: {
          line: 226,
          column: 3
        }
      },
      "78": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "79": {
        start: {
          line: 205,
          column: 40
        },
        end: {
          line: 205,
          column: 48
        }
      },
      "80": {
        start: {
          line: 206,
          column: 23
        },
        end: {
          line: 206,
          column: 39
        }
      },
      "81": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "82": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 211,
          column: 15
        }
      },
      "83": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 99
        }
      },
      "84": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      },
      "85": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 68
        }
      },
      "86": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "87": {
        start: {
          line: 227,
          column: 0
        },
        end: {
          line: 227,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 34
          },
          end: {
            line: 17,
            column: 35
          }
        },
        loc: {
          start: {
            line: 17,
            column: 54
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 30
          },
          end: {
            line: 45,
            column: 31
          }
        },
        loc: {
          start: {
            line: 45,
            column: 50
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 69,
            column: 30
          }
        },
        loc: {
          start: {
            line: 69,
            column: 49
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 69
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 25
          },
          end: {
            line: 94,
            column: 26
          }
        },
        loc: {
          start: {
            line: 94,
            column: 45
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 27
          }
        },
        loc: {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 111
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 129,
            column: 24
          }
        },
        loc: {
          start: {
            line: 129,
            column: 43
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 129
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 147,
            column: 33
          },
          end: {
            line: 147,
            column: 34
          }
        },
        loc: {
          start: {
            line: 147,
            column: 53
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 147
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 30
          }
        },
        loc: {
          start: {
            line: 167,
            column: 49
          },
          end: {
            line: 183,
            column: 1
          }
        },
        line: 167
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 185,
            column: 27
          },
          end: {
            line: 185,
            column: 28
          }
        },
        loc: {
          start: {
            line: 185,
            column: 47
          },
          end: {
            line: 201,
            column: 1
          }
        },
        line: 185
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 203,
            column: 28
          },
          end: {
            line: 203,
            column: 29
          }
        },
        loc: {
          start: {
            line: 203,
            column: 48
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 203
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 131,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 28
          },
          end: {
            line: 131,
            column: 32
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 169,
            column: 24
          },
          end: {
            line: 169,
            column: 26
          }
        }],
        line: 169
      },
      "5": {
        loc: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 187,
            column: 24
          },
          end: {
            line: 187,
            column: 26
          }
        }],
        line: 187
      },
      "6": {
        loc: {
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c35ca0ac38b6553b4059c624be3a0f83dc6f2e13"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jegmsitq9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jegmsitq9();
cov_1jegmsitq9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1jegmsitq9().s[1]++, require("express"));
const ViralGrowthService_1 =
/* istanbul ignore next */
(cov_1jegmsitq9().s[2]++, require("@/services/ViralGrowthService"));
const auth_1 =
/* istanbul ignore next */
(cov_1jegmsitq9().s[3]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_1jegmsitq9().s[4]++, require("@/middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_1jegmsitq9().s[5]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_1jegmsitq9().s[6]++, (0, express_1.Router)());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_1jegmsitq9().s[7]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_1jegmsitq9().s[8]++;
router.use(security_1.socialLimiter);
/**
 * Viral Growth Routes
 * Handles referral programs, viral campaigns, and growth mechanics
 */
// Generate referral code
/* istanbul ignore next */
cov_1jegmsitq9().s[9]++;
router.post('/referral/generate', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[0]++;
  cov_1jegmsitq9().s[10]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[11]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[12]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1jegmsitq9().b[0][0]++;
      cov_1jegmsitq9().s[13]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jegmsitq9().b[0][1]++;
    }
    const referralCode =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[14]++, await ViralGrowthService_1.viralGrowthService.generateReferralCode(userId));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[15]++;
    return res.json({
      success: true,
      data: {
        referralCode,
        userId,
        createdAt: new Date()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[16]++;
    logger_1.logger.error('Error generating referral code:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[17]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to generate referral code'
    });
  }
});
// Get referral stats
/* istanbul ignore next */
cov_1jegmsitq9().s[18]++;
router.get('/referral/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[1]++;
  cov_1jegmsitq9().s[19]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[20]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[21]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1jegmsitq9().b[1][0]++;
      cov_1jegmsitq9().s[22]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jegmsitq9().b[1][1]++;
    }
    const stats =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[23]++, await ViralGrowthService_1.viralGrowthService.getReferralStats(userId));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[24]++;
    return res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[25]++;
    logger_1.logger.error('Error getting referral stats:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[26]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get referral stats'
    });
  }
});
// Use referral code
/* istanbul ignore next */
cov_1jegmsitq9().s[27]++;
router.post('/referral/use', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[2]++;
  cov_1jegmsitq9().s[28]++;
  try {
    const {
      referralCode
    } =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[29]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[30]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[31]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1jegmsitq9().b[2][0]++;
      cov_1jegmsitq9().s[32]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jegmsitq9().b[2][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[33]++, await ViralGrowthService_1.viralGrowthService.useReferralCode(userId, referralCode));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[34]++;
    return res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[35]++;
    logger_1.logger.error('Error using referral code:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[36]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to use referral code'
    });
  }
});
// Get viral campaigns (Admin only)
/* istanbul ignore next */
cov_1jegmsitq9().s[37]++;
router.get('/campaigns', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[3]++;
  cov_1jegmsitq9().s[38]++;
  try {
    const campaigns =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[39]++, await ViralGrowthService_1.viralGrowthService.getViralCampaigns());
    /* istanbul ignore next */
    cov_1jegmsitq9().s[40]++;
    return res.json({
      success: true,
      data: campaigns
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[41]++;
    logger_1.logger.error('Error getting viral campaigns:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[42]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get viral campaigns'
    });
  }
});
// Create viral campaign (Admin only)
/* istanbul ignore next */
cov_1jegmsitq9().s[43]++;
router.post('/campaigns', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[4]++;
  cov_1jegmsitq9().s[44]++;
  try {
    const campaignData =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[45]++, req.body);
    const campaign =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[46]++, await ViralGrowthService_1.viralGrowthService.createViralCampaign(campaignData));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[47]++;
    return res.json({
      success: true,
      data: campaign
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[48]++;
    logger_1.logger.error('Error creating viral campaign:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[49]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to create viral campaign'
    });
  }
});
// Get growth metrics (Admin only)
/* istanbul ignore next */
cov_1jegmsitq9().s[50]++;
router.get('/metrics', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[5]++;
  cov_1jegmsitq9().s[51]++;
  try {
    const {
      timeRange =
      /* istanbul ignore next */
      (cov_1jegmsitq9().b[3][0]++, '7d')
    } =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[52]++, req.query);
    const metrics =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[53]++, await ViralGrowthService_1.viralGrowthService.getGrowthMetrics(timeRange));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[54]++;
    return res.json({
      success: true,
      data: metrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[55]++;
    logger_1.logger.error('Error getting growth metrics:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[56]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get growth metrics'
    });
  }
});
// Get viral coefficient (Admin only)
/* istanbul ignore next */
cov_1jegmsitq9().s[57]++;
router.get('/viral-coefficient', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[6]++;
  cov_1jegmsitq9().s[58]++;
  try {
    const coefficient =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[59]++, await ViralGrowthService_1.viralGrowthService.getViralCoefficient());
    /* istanbul ignore next */
    cov_1jegmsitq9().s[60]++;
    return res.json({
      success: true,
      data: {
        coefficient,
        timestamp: new Date()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[61]++;
    logger_1.logger.error('Error getting viral coefficient:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[62]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get viral coefficient'
    });
  }
});
// Get top referrers (Admin only)
/* istanbul ignore next */
cov_1jegmsitq9().s[63]++;
router.get('/top-referrers', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[7]++;
  cov_1jegmsitq9().s[64]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1jegmsitq9().b[4][0]++, 10)
    } =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[65]++, req.query);
    const topReferrers =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[66]++, await ViralGrowthService_1.viralGrowthService.getTopReferrers(parseInt(limit)));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[67]++;
    return res.json({
      success: true,
      data: topReferrers
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[68]++;
    logger_1.logger.error('Error getting top referrers:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[69]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get top referrers'
    });
  }
});
// Get referral leaderboard
/* istanbul ignore next */
cov_1jegmsitq9().s[70]++;
router.get('/leaderboard', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[8]++;
  cov_1jegmsitq9().s[71]++;
  try {
    const {
      limit =
      /* istanbul ignore next */
      (cov_1jegmsitq9().b[5][0]++, 50)
    } =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[72]++, req.query);
    const leaderboard =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[73]++, await ViralGrowthService_1.viralGrowthService.getReferralLeaderboard(parseInt(limit)));
    /* istanbul ignore next */
    cov_1jegmsitq9().s[74]++;
    return res.json({
      success: true,
      data: leaderboard
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[75]++;
    logger_1.logger.error('Error getting referral leaderboard:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[76]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to get referral leaderboard'
    });
  }
});
// Track viral event
/* istanbul ignore next */
cov_1jegmsitq9().s[77]++;
router.post('/track-event', async (req, res) => {
  /* istanbul ignore next */
  cov_1jegmsitq9().f[9]++;
  cov_1jegmsitq9().s[78]++;
  try {
    const {
      eventType,
      metadata
    } =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[79]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1jegmsitq9().s[80]++, req.user?.userId);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[81]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_1jegmsitq9().b[6][0]++;
      cov_1jegmsitq9().s[82]++;
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1jegmsitq9().b[6][1]++;
    }
    cov_1jegmsitq9().s[83]++;
    await ViralGrowthService_1.viralGrowthService.trackViralEvent(userId, eventType, metadata);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[84]++;
    return res.json({
      success: true,
      message: 'Viral event tracked successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1jegmsitq9().s[85]++;
    logger_1.logger.error('Error tracking viral event:', error);
    /* istanbul ignore next */
    cov_1jegmsitq9().s[86]++;
    return res.status(500).json({
      success: false,
      error: 'Failed to track viral event'
    });
  }
});
/* istanbul ignore next */
cov_1jegmsitq9().s[87]++;
exports.default = router;