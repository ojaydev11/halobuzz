b08585306ad5ac8ec5c1ed4cfbac8d0c
"use strict";

/* istanbul ignore next */
function cov_1lhulomv1h() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\webrtc.ts";
  var hash = "00b6014960b51faab248f225efe6d2b0259d5123";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\webrtc.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 41
        }
      },
      "7": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "9": {
        start: {
          line: 16,
          column: 49
        },
        end: {
          line: 16,
          column: 57
        }
      },
      "10": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "12": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "13": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 97
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 61
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "17": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "18": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "19": {
        start: {
          line: 45,
          column: 35
        },
        end: {
          line: 45,
          column: 43
        }
      },
      "20": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "21": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "22": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 88
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "24": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 64
        }
      },
      "25": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "26": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 92,
          column: 3
        }
      },
      "27": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "28": {
        start: {
          line: 72,
          column: 27
        },
        end: {
          line: 72,
          column: 37
        }
      },
      "29": {
        start: {
          line: 73,
          column: 22
        },
        end: {
          line: 73,
          column: 78
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "31": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "32": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "33": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 58
        }
      },
      "34": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 11
        }
      },
      "35": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 113,
          column: 3
        }
      },
      "36": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "37": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 37
        }
      },
      "38": {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 86
        }
      },
      "39": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "40": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 63
        }
      },
      "41": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "42": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 133,
          column: 3
        }
      },
      "43": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "44": {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 74
        }
      },
      "45": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "46": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 60
        }
      },
      "47": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "48": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "49": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "50": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 77
        }
      },
      "51": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "52": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 61
        }
      },
      "53": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "54": {
        start: {
          line: 158,
          column: 0
        },
        end: {
          line: 173,
          column: 3
        }
      },
      "55": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "56": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 67
        }
      },
      "57": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 164,
          column: 11
        }
      },
      "58": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 66
        }
      },
      "59": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "60": {
        start: {
          line: 174,
          column: 0
        },
        end: {
          line: 174,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 45
          },
          end: {
            line: 14,
            column: 46
          }
        },
        loc: {
          start: {
            line: 14,
            column: 65
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 46
          },
          end: {
            line: 43,
            column: 47
          }
        },
        loc: {
          start: {
            line: 43,
            column: 66
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 70,
            column: 57
          },
          end: {
            line: 70,
            column: 58
          }
        },
        loc: {
          start: {
            line: 70,
            column: 77
          },
          end: {
            line: 92,
            column: 1
          }
        },
        line: 70
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 54
          },
          end: {
            line: 97,
            column: 55
          }
        },
        loc: {
          start: {
            line: 97,
            column: 74
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 118,
            column: 44
          },
          end: {
            line: 118,
            column: 45
          }
        },
        loc: {
          start: {
            line: 118,
            column: 64
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 118
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 23
          }
        },
        loc: {
          start: {
            line: 138,
            column: 42
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 138
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 48
          }
        },
        loc: {
          start: {
            line: 158,
            column: 67
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 158
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 16,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 16,
            column: 44
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "6": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 19
          }
        }, {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 30
          }
        }],
        line: 46
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "00b6014960b51faab248f225efe6d2b0259d5123"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lhulomv1h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lhulomv1h();
var __importDefault =
/* istanbul ignore next */
(cov_1lhulomv1h().s[0]++,
/* istanbul ignore next */
(cov_1lhulomv1h().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1lhulomv1h().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1lhulomv1h().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[0]++;
  cov_1lhulomv1h().s[1]++;
  return /* istanbul ignore next */(cov_1lhulomv1h().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1lhulomv1h().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1lhulomv1h().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1lhulomv1h().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1lhulomv1h().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1lhulomv1h().s[3]++, __importDefault(require("express")));
const WebRTCService_1 =
/* istanbul ignore next */
(cov_1lhulomv1h().s[4]++, require("../services/WebRTCService"));
const auth_1 =
/* istanbul ignore next */
(cov_1lhulomv1h().s[5]++, require("../middleware/auth"));
const router =
/* istanbul ignore next */
(cov_1lhulomv1h().s[6]++, express_1.default.Router());
/**
 * @route POST /webrtc/offer
 * @desc Create WebRTC offer for streaming
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[7]++;
router.post('/offer', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[1]++;
  cov_1lhulomv1h().s[8]++;
  try {
    const {
      streamId,
      quality =
      /* istanbul ignore next */
      (cov_1lhulomv1h().b[3][0]++, 'medium')
    } =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[9]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[10]++, req.user?.id);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[11]++;
    if (!streamId) {
      /* istanbul ignore next */
      cov_1lhulomv1h().b[4][0]++;
      cov_1lhulomv1h().s[12]++;
      return res.status(400).json({
        success: false,
        error: 'Stream ID is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lhulomv1h().b[4][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[13]++, await WebRTCService_1.webRTCService.createOffer(userId, streamId, quality));
    /* istanbul ignore next */
    cov_1lhulomv1h().s[14]++;
    res.json({
      success: result.success,
      data: result.offer,
      error: result.error
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[15]++;
    console.error('Error creating WebRTC offer:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[16]++;
    res.status(500).json({
      success: false,
      error: 'Failed to create WebRTC offer'
    });
  }
});
/**
 * @route POST /webrtc/answer
 * @desc Process WebRTC answer
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[17]++;
router.post('/answer', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[2]++;
  cov_1lhulomv1h().s[18]++;
  try {
    const {
      peerId,
      answer
    } =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[19]++, req.body);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_1lhulomv1h().b[6][0]++, !peerId) ||
    /* istanbul ignore next */
    (cov_1lhulomv1h().b[6][1]++, !answer)) {
      /* istanbul ignore next */
      cov_1lhulomv1h().b[5][0]++;
      cov_1lhulomv1h().s[21]++;
      return res.status(400).json({
        success: false,
        error: 'Peer ID and answer are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lhulomv1h().b[5][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[22]++, await WebRTCService_1.webRTCService.processAnswer(peerId, answer));
    /* istanbul ignore next */
    cov_1lhulomv1h().s[23]++;
    res.json({
      success: result.success,
      error: result.error
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[24]++;
    console.error('Error processing WebRTC answer:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[25]++;
    res.status(500).json({
      success: false,
      error: 'Failed to process WebRTC answer'
    });
  }
});
/**
 * @route GET /webrtc/peer/:peerId/stats
 * @desc Get peer connection stats
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[26]++;
router.get('/peer/:peerId/stats', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[3]++;
  cov_1lhulomv1h().s[27]++;
  try {
    const {
      peerId
    } =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[28]++, req.params);
    const stats =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[29]++, await WebRTCService_1.webRTCService.getPeerStats(peerId));
    /* istanbul ignore next */
    cov_1lhulomv1h().s[30]++;
    if (!stats) {
      /* istanbul ignore next */
      cov_1lhulomv1h().b[7][0]++;
      cov_1lhulomv1h().s[31]++;
      return res.status(404).json({
        success: false,
        error: 'Peer not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1lhulomv1h().b[7][1]++;
    }
    cov_1lhulomv1h().s[32]++;
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[33]++;
    console.error('Error getting peer stats:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[34]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get peer stats'
    });
  }
});
/**
 * @route DELETE /webrtc/peer/:peerId
 * @desc Close peer connection
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[35]++;
router.delete('/peer/:peerId', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[4]++;
  cov_1lhulomv1h().s[36]++;
  try {
    const {
      peerId
    } =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[37]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[38]++, await WebRTCService_1.webRTCService.closePeerConnection(peerId));
    /* istanbul ignore next */
    cov_1lhulomv1h().s[39]++;
    res.json({
      success: result.success,
      error: result.error
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[40]++;
    console.error('Error closing peer connection:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to close peer connection'
    });
  }
});
/**
 * @route GET /webrtc/peers
 * @desc Get all active peers
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[42]++;
router.get('/peers', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[5]++;
  cov_1lhulomv1h().s[43]++;
  try {
    const peers =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[44]++, await WebRTCService_1.webRTCService.getActivePeers());
    /* istanbul ignore next */
    cov_1lhulomv1h().s[45]++;
    res.json({
      success: true,
      peers
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[46]++;
    console.error('Error getting active peers:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[47]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get active peers'
    });
  }
});
/**
 * @route GET /webrtc/status
 * @desc Get WebRTC service status
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[48]++;
router.get('/status', async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[6]++;
  cov_1lhulomv1h().s[49]++;
  try {
    const status =
    /* istanbul ignore next */
    (cov_1lhulomv1h().s[50]++, await WebRTCService_1.webRTCService.getServiceStatus());
    /* istanbul ignore next */
    cov_1lhulomv1h().s[51]++;
    res.json({
      success: true,
      status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[52]++;
    console.error('Error getting WebRTC status:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[53]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get WebRTC status'
    });
  }
});
/**
 * @route POST /webrtc/cleanup
 * @desc Cleanup inactive peers
 */
/* istanbul ignore next */
cov_1lhulomv1h().s[54]++;
router.post('/cleanup', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_1lhulomv1h().f[7]++;
  cov_1lhulomv1h().s[55]++;
  try {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[56]++;
    await WebRTCService_1.webRTCService.cleanupInactivePeers();
    /* istanbul ignore next */
    cov_1lhulomv1h().s[57]++;
    res.json({
      success: true,
      message: 'Inactive peers cleaned up successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lhulomv1h().s[58]++;
    console.error('Error cleaning up inactive peers:', error);
    /* istanbul ignore next */
    cov_1lhulomv1h().s[59]++;
    res.status(500).json({
      success: false,
      error: 'Failed to cleanup inactive peers'
    });
  }
});
/* istanbul ignore next */
cov_1lhulomv1h().s[60]++;
exports.default = router;