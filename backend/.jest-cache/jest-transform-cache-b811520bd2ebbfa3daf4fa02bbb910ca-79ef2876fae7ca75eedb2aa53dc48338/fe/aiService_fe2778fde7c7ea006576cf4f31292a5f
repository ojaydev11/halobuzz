f55ecb8d5d2c7ef93415ceca558eafac
"use strict";

/* istanbul ignore next */
function cov_1be9ff6am0() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\aiService.ts";
  var hash = "8876eefffb7433e251933897a2f2f3aa5294f7af";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\aiService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 27
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 10,
          column: 9
        }
      },
      "4": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 49
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 86
        }
      },
      "8": {
        start: {
          line: 17,
          column: 33
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "10": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 95
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 54
        }
      },
      "12": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 43,
          column: 14
        }
      },
      "13": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "14": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 72
        }
      },
      "15": {
        start: {
          line: 47,
          column: 25
        },
        end: {
          line: 47,
          column: 46
        }
      },
      "16": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 62
        }
      },
      "17": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 64
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 107
        }
      },
      "19": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "20": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 51
        }
      },
      "22": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "23": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "24": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 81,
          column: 14
        }
      },
      "25": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 101
        }
      },
      "26": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 70
        }
      },
      "27": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 53
        }
      },
      "28": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "29": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 92,
          column: 28
        }
      },
      "30": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 34
        }
      },
      "31": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "32": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 100
        }
      },
      "33": {
        start: {
          line: 97,
          column: 31
        },
        end: {
          line: 97,
          column: 82
        }
      },
      "34": {
        start: {
          line: 97,
          column: 59
        },
        end: {
          line: 97,
          column: 81
        }
      },
      "35": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "36": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 71
        }
      },
      "37": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 33
        }
      },
      "38": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 92
        }
      },
      "39": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "40": {
        start: {
          line: 106,
          column: 34
        },
        end: {
          line: 106,
          column: 92
        }
      },
      "41": {
        start: {
          line: 107,
          column: 34
        },
        end: {
          line: 107,
          column: 95
        }
      },
      "42": {
        start: {
          line: 108,
          column: 34
        },
        end: {
          line: 108,
          column: 93
        }
      },
      "43": {
        start: {
          line: 108,
          column: 63
        },
        end: {
          line: 108,
          column: 85
        }
      },
      "44": {
        start: {
          line: 109,
          column: 34
        },
        end: {
          line: 109,
          column: 93
        }
      },
      "45": {
        start: {
          line: 109,
          column: 63
        },
        end: {
          line: 109,
          column: 85
        }
      },
      "46": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 97
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 29
        }
      },
      "48": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "49": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "50": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "51": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "52": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 47
        }
      },
      "53": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "54": {
        start: {
          line: 150,
          column: 0
        },
        end: {
          line: 150,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 25
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 26
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 97,
            column: 51
          },
          end: {
            line: 97,
            column: 52
          }
        },
        loc: {
          start: {
            line: 97,
            column: 59
          },
          end: {
            line: 97,
            column: 81
          }
        },
        line: 97
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 55
          },
          end: {
            line: 108,
            column: 56
          }
        },
        loc: {
          start: {
            line: 108,
            column: 63
          },
          end: {
            line: 108,
            column: 85
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 109,
            column: 55
          },
          end: {
            line: 109,
            column: 56
          }
        },
        loc: {
          start: {
            line: 109,
            column: 63
          },
          end: {
            line: 109,
            column: 85
          }
        },
        line: 109
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 124
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 130
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 40
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 142
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 15
          },
          end: {
            line: 67,
            column: 28
          }
        }, {
          start: {
            line: 67,
            column: 32
          },
          end: {
            line: 67,
            column: 50
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 35
          }
        }, {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 42
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 45
          }
        }, {
          start: {
            line: 74,
            column: 49
          },
          end: {
            line: 74,
            column: 52
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 80,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 80,
            column: 55
          }
        }, {
          start: {
            line: 80,
            column: 59
          },
          end: {
            line: 80,
            column: 61
          }
        }],
        line: 80
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 103,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8876eefffb7433e251933897a2f2f3aa5294f7af"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1be9ff6am0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1be9ff6am0();
cov_1be9ff6am0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1be9ff6am0().s[1]++;
exports.AIService = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_1be9ff6am0().s[2]++, require("../config/logger"));
class AIService {
  static instance;
  static getInstance() {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[0]++;
    cov_1be9ff6am0().s[3]++;
    if (!AIService.instance) {
      /* istanbul ignore next */
      cov_1be9ff6am0().b[0][0]++;
      cov_1be9ff6am0().s[4]++;
      AIService.instance = new AIService();
    } else
    /* istanbul ignore next */
    {
      cov_1be9ff6am0().b[0][1]++;
    }
    cov_1be9ff6am0().s[5]++;
    return AIService.instance;
  }
  async analyzeContent(options) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[1]++;
    cov_1be9ff6am0().s[6]++;
    try {
      /* istanbul ignore next */
      cov_1be9ff6am0().s[7]++;
      logger_1.logger.info('Analyzing content with AI', {
        type: options.type
      });
      // Use OpenAI API for content analysis
      const openaiApiKey =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[8]++, process.env.OPENAI_API_KEY);
      /* istanbul ignore next */
      cov_1be9ff6am0().s[9]++;
      if (!openaiApiKey) {
        /* istanbul ignore next */
        cov_1be9ff6am0().b[1][0]++;
        cov_1be9ff6am0().s[10]++;
        logger_1.logger.warn('OpenAI API key not configured, using fallback analysis');
        /* istanbul ignore next */
        cov_1be9ff6am0().s[11]++;
        return this.fallbackAnalysis(options);
      } else
      /* istanbul ignore next */
      {
        cov_1be9ff6am0().b[1][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[12]++, await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [{
            role: 'system',
            content: this.getSystemPrompt(options.type)
          }, {
            role: 'user',
            content: options.content
          }],
          max_tokens: 500,
          temperature: 0.3
        })
      }));
      /* istanbul ignore next */
      cov_1be9ff6am0().s[13]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1be9ff6am0().b[2][0]++;
        cov_1be9ff6am0().s[14]++;
        throw new Error(`OpenAI API error: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_1be9ff6am0().b[2][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[15]++, await response.json());
      const analysis =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[16]++, data.choices[0]?.message?.content);
      /* istanbul ignore next */
      cov_1be9ff6am0().s[17]++;
      return this.parseAIResponse(analysis, options.type);
    } catch (error) {
      /* istanbul ignore next */
      cov_1be9ff6am0().s[18]++;
      logger_1.logger.error('Failed to analyze content with AI, using fallback', {
        error,
        options
      });
      /* istanbul ignore next */
      cov_1be9ff6am0().s[19]++;
      return this.fallbackAnalysis(options);
    }
  }
  getSystemPrompt(type) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[2]++;
    const prompts =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[20]++, {
      moderation: `Analyze this content for inappropriate material, hate speech, violence, or harmful content. 
      Return a JSON response with: {"score": 0.0-1.0, "confidence": 0.0-1.0, "flagged": true/false, "reason": "explanation", "recommendations": ["action1", "action2"]}`,
      sentiment: `Analyze the sentiment of this content. 
      Return a JSON response with: {"score": -1.0 to 1.0, "confidence": 0.0-1.0, "sentiment": "positive/negative/neutral", "emotions": ["emotion1", "emotion2"]}`,
      content_quality: `Assess the quality and engagement potential of this content. 
      Return a JSON response with: {"score": 0.0-1.0, "confidence": 0.0-1.0, "quality": "high/medium/low", "recommendations": ["improvement1", "improvement2"]}`,
      kyc: `Verify the authenticity of these KYC documents. 
      Return a JSON response with: {"score": 0.0-1.0, "confidence": 0.0-1.0, "verified": true/false, "issues": ["issue1", "issue2"]}`
    });
    /* istanbul ignore next */
    cov_1be9ff6am0().s[21]++;
    return /* istanbul ignore next */(cov_1be9ff6am0().b[3][0]++, prompts[type]) ||
    /* istanbul ignore next */
    (cov_1be9ff6am0().b[3][1]++, prompts.moderation);
  }
  parseAIResponse(analysis, type) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[3]++;
    cov_1be9ff6am0().s[22]++;
    try {
      const parsed =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[23]++, JSON.parse(analysis));
      /* istanbul ignore next */
      cov_1be9ff6am0().s[24]++;
      return {
        score:
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[4][0]++, parsed.score) ||
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[4][1]++, 0.5),
        confidence:
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[5][0]++, parsed.confidence) ||
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[5][1]++, 0.5),
        details: {
          type,
          ...parsed,
          rawAnalysis: analysis
        },
        recommendations:
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[6][0]++, parsed.recommendations) ||
        /* istanbul ignore next */
        (cov_1be9ff6am0().b[6][1]++, [])
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1be9ff6am0().s[25]++;
      logger_1.logger.warn('Failed to parse AI response, using fallback', {
        error,
        analysis
      });
      /* istanbul ignore next */
      cov_1be9ff6am0().s[26]++;
      return this.fallbackAnalysis({
        content: '',
        type: type
      });
    }
  }
  fallbackAnalysis(options) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[4]++;
    // Basic keyword-based analysis as fallback
    const content =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[27]++, options.content.toLowerCase());
    let score =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[28]++, 0.5);
    let confidence =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[29]++, 0.3);
    const recommendations =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[30]++, []);
    // Basic moderation keywords
    /* istanbul ignore next */
    cov_1be9ff6am0().s[31]++;
    if (options.type === 'moderation') {
      /* istanbul ignore next */
      cov_1be9ff6am0().b[7][0]++;
      const flaggedWords =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[32]++, ['spam', 'scam', 'hate', 'violence', 'harassment', 'inappropriate']);
      const foundWords =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[33]++, flaggedWords.filter(word => {
        /* istanbul ignore next */
        cov_1be9ff6am0().f[5]++;
        cov_1be9ff6am0().s[34]++;
        return content.includes(word);
      }));
      /* istanbul ignore next */
      cov_1be9ff6am0().s[35]++;
      if (foundWords.length > 0) {
        /* istanbul ignore next */
        cov_1be9ff6am0().b[8][0]++;
        cov_1be9ff6am0().s[36]++;
        score = Math.min(0.9, 0.5 + foundWords.length * 0.1);
        /* istanbul ignore next */
        cov_1be9ff6am0().s[37]++;
        confidence = 0.7;
        /* istanbul ignore next */
        cov_1be9ff6am0().s[38]++;
        recommendations.push('Content contains potentially inappropriate language');
      } else
      /* istanbul ignore next */
      {
        cov_1be9ff6am0().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1be9ff6am0().b[7][1]++;
    }
    // Basic sentiment analysis
    cov_1be9ff6am0().s[39]++;
    if (options.type === 'sentiment') {
      /* istanbul ignore next */
      cov_1be9ff6am0().b[9][0]++;
      const positiveWords =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[40]++, ['good', 'great', 'amazing', 'love', 'happy', 'excellent']);
      const negativeWords =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[41]++, ['bad', 'terrible', 'hate', 'awful', 'disappointed', 'angry']);
      const positiveCount =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[42]++, positiveWords.filter(word => {
        /* istanbul ignore next */
        cov_1be9ff6am0().f[6]++;
        cov_1be9ff6am0().s[43]++;
        return content.includes(word);
      }).length);
      const negativeCount =
      /* istanbul ignore next */
      (cov_1be9ff6am0().s[44]++, negativeWords.filter(word => {
        /* istanbul ignore next */
        cov_1be9ff6am0().f[7]++;
        cov_1be9ff6am0().s[45]++;
        return content.includes(word);
      }).length);
      /* istanbul ignore next */
      cov_1be9ff6am0().s[46]++;
      score = (positiveCount - negativeCount) / Math.max(1, positiveCount + negativeCount);
      /* istanbul ignore next */
      cov_1be9ff6am0().s[47]++;
      confidence = 0.4;
    } else
    /* istanbul ignore next */
    {
      cov_1be9ff6am0().b[9][1]++;
    }
    cov_1be9ff6am0().s[48]++;
    return {
      score,
      confidence,
      details: {
        type: options.type,
        contentLength: options.content.length,
        fallback: true
      },
      recommendations
    };
  }
  async moderateContent(content) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[8]++;
    cov_1be9ff6am0().s[49]++;
    return this.analyzeContent({
      content,
      type: 'moderation'
    });
  }
  async analyzeSentiment(content) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[9]++;
    cov_1be9ff6am0().s[50]++;
    return this.analyzeContent({
      content,
      type: 'sentiment'
    });
  }
  async assessContentQuality(content) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[10]++;
    cov_1be9ff6am0().s[51]++;
    return this.analyzeContent({
      content,
      type: 'content_quality'
    });
  }
  static async verifyKYC(documents) {
    /* istanbul ignore next */
    cov_1be9ff6am0().f[11]++;
    const service =
    /* istanbul ignore next */
    (cov_1be9ff6am0().s[52]++, AIService.getInstance());
    /* istanbul ignore next */
    cov_1be9ff6am0().s[53]++;
    return service.analyzeContent({
      content: JSON.stringify(documents),
      type: 'moderation'
    });
  }
}
/* istanbul ignore next */
cov_1be9ff6am0().s[54]++;
exports.AIService = AIService;