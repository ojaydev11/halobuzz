e76b37c29335b9542e35995510f5fc9e
"use strict";

/* istanbul ignore next */
function cov_2fffxzk158() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\flags.ts";
  var hash = "111c5549d715ca798bd4ea28af5f18794679f4c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\flags.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 41
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 43
        }
      },
      "7": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "9": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "11": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "13": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "15": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "16": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "17": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "19": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "20": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "21": {
        start: {
          line: 44,
          column: 34
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "22": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "23": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 67
        }
      },
      "24": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "25": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 71
        }
      },
      "27": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "28": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 110,
          column: 3
        }
      },
      "29": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "30": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 69
        }
      },
      "31": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "32": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "33": {
        start: {
          line: 80,
          column: 34
        },
        end: {
          line: 80,
          column: 42
        }
      },
      "34": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 56
        }
      },
      "35": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 26
        }
      },
      "36": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "37": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "38": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 85
        }
      },
      "39": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 63
        }
      },
      "40": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 86
        }
      },
      "41": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "42": {
        start: {
          line: 93,
          column: 35
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "44": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 72
        }
      },
      "45": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "46": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 145,
          column: 3
        }
      },
      "47": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "48": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 117,
          column: 69
        }
      },
      "49": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "50": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 15
        }
      },
      "51": {
        start: {
          line: 124,
          column: 27
        },
        end: {
          line: 124,
          column: 35
        }
      },
      "52": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 56
        }
      },
      "53": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 75
        }
      },
      "54": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "55": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "56": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 81
        }
      },
      "57": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "58": {
        start: {
          line: 147,
          column: 0
        },
        end: {
          line: 167,
          column: 3
        }
      },
      "59": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "60": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 50
        }
      },
      "61": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "62": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "63": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 79
        }
      },
      "64": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "65": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 197,
          column: 3
        }
      },
      "66": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "67": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 34
        }
      },
      "68": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 188,
          column: 11
        }
      },
      "69": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 78
        }
      },
      "70": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "71": {
        start: {
          line: 198,
          column: 0
        },
        end: {
          line: 198,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 17
          }
        },
        loc: {
          start: {
            line: 13,
            column: 36
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 3
          },
          end: {
            line: 34,
            column: 4
          }
        },
        loc: {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 3
          },
          end: {
            line: 71,
            column: 4
          }
        },
        loc: {
          start: {
            line: 71,
            column: 23
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 93,
            column: 30
          }
        },
        loc: {
          start: {
            line: 93,
            column: 35
          },
          end: {
            line: 93,
            column: 65
          }
        },
        line: 93
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 115,
            column: 3
          },
          end: {
            line: 115,
            column: 4
          }
        },
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 115
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 149,
            column: 3
          },
          end: {
            line: 149,
            column: 4
          }
        },
        loc: {
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 149
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 169,
            column: 27
          }
        },
        loc: {
          start: {
            line: 169,
            column: 46
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 169
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 45,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 27
          },
          end: {
            line: 45,
            column: 43
          }
        }, {
          start: {
            line: 45,
            column: 47
          },
          end: {
            line: 45,
            column: 56
          }
        }],
        line: 45
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 27
          },
          end: {
            line: 81,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 27
          },
          end: {
            line: 81,
            column: 43
          }
        }, {
          start: {
            line: 81,
            column: 47
          },
          end: {
            line: 81,
            column: 56
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 125,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 125,
            column: 43
          }
        }, {
          start: {
            line: 125,
            column: 47
          },
          end: {
            line: 125,
            column: 56
          }
        }],
        line: 125
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "111c5549d715ca798bd4ea28af5f18794679f4c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2fffxzk158 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2fffxzk158();
var __importDefault =
/* istanbul ignore next */
(cov_2fffxzk158().s[0]++,
/* istanbul ignore next */
(cov_2fffxzk158().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2fffxzk158().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2fffxzk158().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2fffxzk158().f[0]++;
  cov_2fffxzk158().s[1]++;
  return /* istanbul ignore next */(cov_2fffxzk158().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2fffxzk158().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2fffxzk158().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2fffxzk158().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2fffxzk158().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2fffxzk158().s[3]++, __importDefault(require("express")));
const express_validator_1 =
/* istanbul ignore next */
(cov_2fffxzk158().s[4]++, require("express-validator"));
const flags_1 =
/* istanbul ignore next */
(cov_2fffxzk158().s[5]++, require("@/config/flags"));
const logger_1 =
/* istanbul ignore next */
(cov_2fffxzk158().s[6]++, require("@/config/logger"));
const admin_1 =
/* istanbul ignore next */
(cov_2fffxzk158().s[7]++, require("@/middleware/admin"));
const router =
/* istanbul ignore next */
(cov_2fffxzk158().s[8]++, express_1.default.Router());
// Get all feature flags
/* istanbul ignore next */
cov_2fffxzk158().s[9]++;
router.get('/', async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[1]++;
  cov_2fffxzk158().s[10]++;
  try {
    const flags =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[11]++, await flags_1.featureFlags.getAllFlags());
    /* istanbul ignore next */
    cov_2fffxzk158().s[12]++;
    res.json({
      success: true,
      data: flags
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[13]++;
    logger_1.logger.error('Failed to get feature flags:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[14]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get feature flags'
    });
  }
});
// Update a specific feature flag
/* istanbul ignore next */
cov_2fffxzk158().s[15]++;
router.put('/:key', [admin_1.requireCSRF, (0, express_validator_1.body)('value').isBoolean(), (0, express_validator_1.body)('reason').optional().isString()], async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[2]++;
  cov_2fffxzk158().s[16]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[17]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_2fffxzk158().s[18]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_2fffxzk158().b[3][0]++;
      cov_2fffxzk158().s[19]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fffxzk158().b[3][1]++;
    }
    const {
      key
    } =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[20]++, req.params);
    const {
      value,
      reason
    } =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[21]++, req.body);
    const modifiedBy =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[22]++,
    /* istanbul ignore next */
    (cov_2fffxzk158().b[4][0]++, req.user?.userId) ||
    /* istanbul ignore next */
    (cov_2fffxzk158().b[4][1]++, 'unknown'));
    /* istanbul ignore next */
    cov_2fffxzk158().s[23]++;
    await flags_1.featureFlags.setFlag(key, value, modifiedBy);
    /* istanbul ignore next */
    cov_2fffxzk158().s[24]++;
    logger_1.logger.info(`Feature flag ${key} updated to ${value} by ${modifiedBy}`, {
      reason,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_2fffxzk158().s[25]++;
    res.json({
      success: true,
      message: `Feature flag ${key} updated to ${value}`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[26]++;
    logger_1.logger.error('Failed to update feature flag:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[27]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update feature flag'
    });
  }
});
// Update multiple feature flags
/* istanbul ignore next */
cov_2fffxzk158().s[28]++;
router.put('/', [admin_1.requireCSRF, (0, express_validator_1.body)('flags').isArray(), (0, express_validator_1.body)('flags.*.key').isString(), (0, express_validator_1.body)('flags.*.value').isBoolean(), (0, express_validator_1.body)('reason').optional().isString()], async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[3]++;
  cov_2fffxzk158().s[29]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[30]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_2fffxzk158().s[31]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_2fffxzk158().b[5][0]++;
      cov_2fffxzk158().s[32]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fffxzk158().b[5][1]++;
    }
    const {
      flags,
      reason
    } =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[33]++, req.body);
    const modifiedBy =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[34]++,
    /* istanbul ignore next */
    (cov_2fffxzk158().b[6][0]++, req.user?.userId) ||
    /* istanbul ignore next */
    (cov_2fffxzk158().b[6][1]++, 'unknown'));
    const results =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[35]++, []);
    /* istanbul ignore next */
    cov_2fffxzk158().s[36]++;
    for (const flag of flags) {
      /* istanbul ignore next */
      cov_2fffxzk158().s[37]++;
      try {
        /* istanbul ignore next */
        cov_2fffxzk158().s[38]++;
        await flags_1.featureFlags.setFlag(flag.key, flag.value, modifiedBy);
        /* istanbul ignore next */
        cov_2fffxzk158().s[39]++;
        results.push({
          key: flag.key,
          success: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_2fffxzk158().s[40]++;
        results.push({
          key: flag.key,
          success: false,
          error: error.message
        });
      }
    }
    /* istanbul ignore next */
    cov_2fffxzk158().s[41]++;
    logger_1.logger.info(`Multiple feature flags updated by ${modifiedBy}`, {
      flags: flags.map(f => {
        /* istanbul ignore next */
        cov_2fffxzk158().f[4]++;
        cov_2fffxzk158().s[42]++;
        return {
          key: f.key,
          value: f.value
        };
      }),
      reason,
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_2fffxzk158().s[43]++;
    res.json({
      success: true,
      data: results,
      message: 'Feature flags updated'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[44]++;
    logger_1.logger.error('Failed to update feature flags:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[45]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update feature flags'
    });
  }
});
// Emergency disable all features
/* istanbul ignore next */
cov_2fffxzk158().s[46]++;
router.post('/emergency/disable-all', [admin_1.requireCSRF, (0, express_validator_1.body)('reason').isString().notEmpty()], async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[5]++;
  cov_2fffxzk158().s[47]++;
  try {
    const errors =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[48]++, (0, express_validator_1.validationResult)(req));
    /* istanbul ignore next */
    cov_2fffxzk158().s[49]++;
    if (!errors.isEmpty()) {
      /* istanbul ignore next */
      cov_2fffxzk158().b[7][0]++;
      cov_2fffxzk158().s[50]++;
      return res.status(400).json({
        success: false,
        errors: errors.array()
      });
    } else
    /* istanbul ignore next */
    {
      cov_2fffxzk158().b[7][1]++;
    }
    const {
      reason
    } =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[51]++, req.body);
    const modifiedBy =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[52]++,
    /* istanbul ignore next */
    (cov_2fffxzk158().b[8][0]++, req.user?.userId) ||
    /* istanbul ignore next */
    (cov_2fffxzk158().b[8][1]++, 'unknown'));
    /* istanbul ignore next */
    cov_2fffxzk158().s[53]++;
    await flags_1.featureFlags.emergencyDisableAll(reason, modifiedBy);
    /* istanbul ignore next */
    cov_2fffxzk158().s[54]++;
    logger_1.logger.warn(`EMERGENCY DISABLE ALL executed by ${modifiedBy}`, {
      reason,
      requestId: req.headers['x-request-id'],
      ip: req.ip,
      userAgent: req.headers['user-agent']
    });
    /* istanbul ignore next */
    cov_2fffxzk158().s[55]++;
    res.json({
      success: true,
      message: 'Emergency disable all executed successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[56]++;
    logger_1.logger.error('Failed to execute emergency disable all:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[57]++;
    res.status(500).json({
      success: false,
      error: 'Failed to execute emergency disable all'
    });
  }
});
// Refresh feature flags cache
/* istanbul ignore next */
cov_2fffxzk158().s[58]++;
router.post('/refresh-cache', [admin_1.requireCSRF], async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[6]++;
  cov_2fffxzk158().s[59]++;
  try {
    /* istanbul ignore next */
    cov_2fffxzk158().s[60]++;
    await flags_1.featureFlags.refreshCache();
    /* istanbul ignore next */
    cov_2fffxzk158().s[61]++;
    logger_1.logger.info(`Feature flags cache refreshed by ${req.user?.userId}`, {
      requestId: req.headers['x-request-id']
    });
    /* istanbul ignore next */
    cov_2fffxzk158().s[62]++;
    res.json({
      success: true,
      message: 'Feature flags cache refreshed'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[63]++;
    logger_1.logger.error('Failed to refresh feature flags cache:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[64]++;
    res.status(500).json({
      success: false,
      error: 'Failed to refresh cache'
    });
  }
});
// Get feature flag audit log
/* istanbul ignore next */
cov_2fffxzk158().s[65]++;
router.get('/audit/:key', async (req, res) => {
  /* istanbul ignore next */
  cov_2fffxzk158().f[7]++;
  cov_2fffxzk158().s[66]++;
  try {
    const {
      key
    } =
    /* istanbul ignore next */
    (cov_2fffxzk158().s[67]++, req.params);
    // In a real implementation, this would query an audit log collection
    // For now, we'll return a placeholder response
    /* istanbul ignore next */
    cov_2fffxzk158().s[68]++;
    res.json({
      success: true,
      data: {
        key,
        changes: [{
          timestamp: new Date().toISOString(),
          modifiedBy: 'system',
          oldValue: false,
          newValue: true,
          reason: 'Initial setup'
        }]
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2fffxzk158().s[69]++;
    logger_1.logger.error('Failed to get feature flag audit log:', error);
    /* istanbul ignore next */
    cov_2fffxzk158().s[70]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get audit log'
    });
  }
});
/* istanbul ignore next */
cov_2fffxzk158().s[71]++;
exports.default = router;