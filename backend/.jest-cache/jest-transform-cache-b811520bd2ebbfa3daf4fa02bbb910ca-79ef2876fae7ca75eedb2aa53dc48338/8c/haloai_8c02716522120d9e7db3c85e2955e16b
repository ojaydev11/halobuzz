330804a36f7c2641802dd9665503f2f4
"use strict";

/* istanbul ignore next */
function cov_o77obg0jl() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\haloai.ts";
  var hash = "efea29100a22269d8fb72e6ef4f1c11f9a1b487a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\haloai.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 48
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "9": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "10": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "11": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "12": {
        start: {
          line: 19,
          column: 51
        },
        end: {
          line: 19,
          column: 59
        }
      },
      "13": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "14": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 113
        }
      },
      "15": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 11
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 69
        }
      },
      "17": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "18": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 64,
          column: 3
        }
      },
      "19": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "20": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 35
        }
      },
      "21": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 55
        }
      },
      "22": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "23": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "24": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 89
        }
      },
      "25": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "26": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 68
        }
      },
      "27": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "28": {
        start: {
          line: 69,
          column: 0
        },
        end: {
          line: 104,
          column: 3
        }
      },
      "29": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "30": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "31": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 35
        }
      },
      "32": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 73,
          column: 55
        }
      },
      "33": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "34": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "35": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "36": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "37": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 90,
          column: 10
        }
      },
      "38": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "39": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "40": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 60
        }
      },
      "41": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "42": {
        start: {
          line: 109,
          column: 0
        },
        end: {
          line: 133,
          column: 3
        }
      },
      "43": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 132,
          column: 5
        }
      },
      "44": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 37
        }
      },
      "45": {
        start: {
          line: 112,
          column: 22
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "46": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "47": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 36
        }
      },
      "48": {
        start: {
          line: 120,
          column: 26
        },
        end: {
          line: 120,
          column: 86
        }
      },
      "49": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "50": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 58
        }
      },
      "51": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "52": {
        start: {
          line: 138,
          column: 0
        },
        end: {
          line: 163,
          column: 3
        }
      },
      "53": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "54": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 140,
          column: 35
        }
      },
      "55": {
        start: {
          line: 142,
          column: 21
        },
        end: {
          line: 142,
          column: 55
        }
      },
      "56": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "57": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "58": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 76
        }
      },
      "59": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "60": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 66
        }
      },
      "61": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "62": {
        start: {
          line: 168,
          column: 0
        },
        end: {
          line: 198,
          column: 3
        }
      },
      "63": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "64": {
        start: {
          line: 170,
          column: 23
        },
        end: {
          line: 170,
          column: 35
        }
      },
      "65": {
        start: {
          line: 171,
          column: 37
        },
        end: {
          line: 171,
          column: 46
        }
      },
      "66": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "67": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 126
        }
      },
      "68": {
        start: {
          line: 177,
          column: 13
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "69": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 124
        }
      },
      "70": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 105
        }
      },
      "71": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 189,
          column: 11
        }
      },
      "72": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 64
        }
      },
      "73": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "74": {
        start: {
          line: 203,
          column: 0
        },
        end: {
          line: 223,
          column: 3
        }
      },
      "75": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "76": {
        start: {
          line: 205,
          column: 38
        },
        end: {
          line: 205,
          column: 46
        }
      },
      "77": {
        start: {
          line: 206,
          column: 23
        },
        end: {
          line: 206,
          column: 35
        }
      },
      "78": {
        start: {
          line: 207,
          column: 23
        },
        end: {
          line: 207,
          column: 126
        }
      },
      "79": {
        start: {
          line: 209,
          column: 32
        },
        end: {
          line: 209,
          column: 96
        }
      },
      "80": {
        start: {
          line: 209,
          column: 67
        },
        end: {
          line: 209,
          column: 89
        }
      },
      "81": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "82": {
        start: {
          line: 212,
          column: 52
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "83": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 65
        }
      },
      "84": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "85": {
        start: {
          line: 228,
          column: 0
        },
        end: {
          line: 246,
          column: 3
        }
      },
      "86": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "87": {
        start: {
          line: 230,
          column: 23
        },
        end: {
          line: 230,
          column: 35
        }
      },
      "88": {
        start: {
          line: 231,
          column: 29
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "89": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 117
        }
      },
      "90": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 237,
          column: 11
        }
      },
      "91": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 68
        }
      },
      "92": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 244,
          column: 11
        }
      },
      "93": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 282,
          column: 3
        }
      },
      "94": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 281,
          column: 5
        }
      },
      "95": {
        start: {
          line: 253,
          column: 47
        },
        end: {
          line: 253,
          column: 55
        }
      },
      "96": {
        start: {
          line: 254,
          column: 23
        },
        end: {
          line: 254,
          column: 35
        }
      },
      "97": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 264,
          column: 11
        }
      },
      "98": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "99": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 71
        }
      },
      "100": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 280,
          column: 11
        }
      },
      "101": {
        start: {
          line: 283,
          column: 0
        },
        end: {
          line: 283,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 46
          },
          end: {
            line: 17,
            column: 47
          }
        },
        loc: {
          start: {
            line: 17,
            column: 66
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 58
          },
          end: {
            line: 39,
            column: 59
          }
        },
        loc: {
          start: {
            line: 39,
            column: 78
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 51
          },
          end: {
            line: 69,
            column: 52
          }
        },
        loc: {
          start: {
            line: 69,
            column: 71
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 25
          },
          end: {
            line: 109,
            column: 26
          }
        },
        loc: {
          start: {
            line: 109,
            column: 45
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 55
          },
          end: {
            line: 138,
            column: 56
          }
        },
        loc: {
          start: {
            line: 138,
            column: 75
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 168,
            column: 54
          },
          end: {
            line: 168,
            column: 55
          }
        },
        loc: {
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 168
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 203,
            column: 56
          },
          end: {
            line: 203,
            column: 57
          }
        },
        loc: {
          start: {
            line: 203,
            column: 76
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 203
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 209,
            column: 55
          },
          end: {
            line: 209,
            column: 56
          }
        },
        loc: {
          start: {
            line: 209,
            column: 67
          },
          end: {
            line: 209,
            column: 89
          }
        },
        line: 209
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 212,
            column: 45
          },
          end: {
            line: 212,
            column: 46
          }
        },
        loc: {
          start: {
            line: 212,
            column: 52
          },
          end: {
            line: 212,
            column: 64
          }
        },
        line: 212
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 228,
            column: 58
          },
          end: {
            line: 228,
            column: 59
          }
        },
        loc: {
          start: {
            line: 228,
            column: 78
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 228
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 251,
            column: 61
          },
          end: {
            line: 251,
            column: 62
          }
        },
        loc: {
          start: {
            line: 251,
            column: 81
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 251
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 19,
            column: 37
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 17
          }
        }, {
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 44,
            column: 57
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 44
          }
        }, {
          start: {
            line: 44,
            column: 48
          },
          end: {
            line: 44,
            column: 49
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 40
          }
        }, {
          start: {
            line: 54,
            column: 44
          },
          end: {
            line: 54,
            column: 46
          }
        }],
        line: 54
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 94,
            column: 36
          },
          end: {
            line: 94,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 46
          },
          end: {
            line: 94,
            column: 55
          }
        }, {
          start: {
            line: 94,
            column: 58
          },
          end: {
            line: 94,
            column: 68
          }
        }],
        line: 94
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "13": {
        loc: {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 171,
            column: 23
          },
          end: {
            line: 171,
            column: 32
          }
        }],
        line: 171
      },
      "14": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: 177,
            column: 13
          },
          end: {
            line: 184,
            column: 9
          }
        }],
        line: 173
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 13
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 13
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: 181,
            column: 13
          },
          end: {
            line: 184,
            column: 9
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 187,
            column: 29
          },
          end: {
            line: 187,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 29
          },
          end: {
            line: 187,
            column: 47
          }
        }, {
          start: {
            line: 187,
            column: 51
          },
          end: {
            line: 187,
            column: 53
          }
        }],
        line: 187
      },
      "17": {
        loc: {
          start: {
            line: 209,
            column: 32
          },
          end: {
            line: 209,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 32
          },
          end: {
            line: 209,
            column: 90
          }
        }, {
          start: {
            line: 209,
            column: 94
          },
          end: {
            line: 209,
            column: 96
          }
        }],
        line: 209
      },
      "18": {
        loc: {
          start: {
            line: 259,
            column: 29
          },
          end: {
            line: 259,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 29
          },
          end: {
            line: 259,
            column: 36
          }
        }, {
          start: {
            line: 259,
            column: 40
          },
          end: {
            line: 259,
            column: 45
          }
        }],
        line: 259
      },
      "19": {
        loc: {
          start: {
            line: 260,
            column: 29
          },
          end: {
            line: 260,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 29
          },
          end: {
            line: 260,
            column: 36
          }
        }, {
          start: {
            line: 260,
            column: 40
          },
          end: {
            line: 260,
            column: 44
          }
        }],
        line: 260
      },
      "20": {
        loc: {
          start: {
            line: 261,
            column: 30
          },
          end: {
            line: 261,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 30
          },
          end: {
            line: 261,
            column: 38
          }
        }, {
          start: {
            line: 261,
            column: 42
          },
          end: {
            line: 261,
            column: 44
          }
        }],
        line: 261
      },
      "21": {
        loc: {
          start: {
            line: 269,
            column: 25
          },
          end: {
            line: 269,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 25
          },
          end: {
            line: 269,
            column: 32
          }
        }, {
          start: {
            line: 269,
            column: 36
          },
          end: {
            line: 269,
            column: 41
          }
        }],
        line: 269
      },
      "22": {
        loc: {
          start: {
            line: 270,
            column: 25
          },
          end: {
            line: 270,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 25
          },
          end: {
            line: 270,
            column: 32
          }
        }, {
          start: {
            line: 270,
            column: 36
          },
          end: {
            line: 270,
            column: 40
          }
        }],
        line: 270
      },
      "23": {
        loc: {
          start: {
            line: 271,
            column: 26
          },
          end: {
            line: 271,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 26
          },
          end: {
            line: 271,
            column: 34
          }
        }, {
          start: {
            line: 271,
            column: 38
          },
          end: {
            line: 271,
            column: 40
          }
        }],
        line: 271
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "efea29100a22269d8fb72e6ef4f1c11f9a1b487a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_o77obg0jl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_o77obg0jl();
var __importDefault =
/* istanbul ignore next */
(cov_o77obg0jl().s[0]++,
/* istanbul ignore next */
(cov_o77obg0jl().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_o77obg0jl().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_o77obg0jl().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_o77obg0jl().f[0]++;
  cov_o77obg0jl().s[1]++;
  return /* istanbul ignore next */(cov_o77obg0jl().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_o77obg0jl().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_o77obg0jl().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_o77obg0jl().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_o77obg0jl().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[3]++, __importDefault(require("express")));
const HaloAIService_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[4]++, require("../services/HaloAIService"));
const auth_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[5]++, require("../middleware/auth"));
const User_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[6]++, require("../models/User"));
const Festival_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[7]++, require("../models/Festival"));
const redis_1 =
/* istanbul ignore next */
(cov_o77obg0jl().s[8]++, require("../config/redis"));
const router =
/* istanbul ignore next */
(cov_o77obg0jl().s[9]++, express_1.default.Router());
/**
 * @route POST /haloai/engage
 * @desc Get AI engagement suggestions
 */
/* istanbul ignore next */
cov_o77obg0jl().s[10]++;
router.post('/engage', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[1]++;
  cov_o77obg0jl().s[11]++;
  try {
    const {
      requestType =
      /* istanbul ignore next */
      (cov_o77obg0jl().b[3][0]++, 'boost'),
      context
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[12]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[13]++, req.user?.id);
    const result =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[14]++, await HaloAIService_1.haloAIService.processEngagementRequest(userId, requestType, context));
    /* istanbul ignore next */
    cov_o77obg0jl().s[15]++;
    res.json({
      success: true,
      result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[16]++;
    console.error('Error processing engagement request:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[17]++;
    res.status(500).json({
      success: false,
      error: 'Failed to process engagement request'
    });
  }
});
/**
 * @route GET /haloai/whale-notifications
 * @desc Get whale notifications for user
 */
/* istanbul ignore next */
cov_o77obg0jl().s[18]++;
router.get('/whale-notifications', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[2]++;
  cov_o77obg0jl().s[19]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[20]++, req.user?.id);
    // Check if user is a whale
    const user =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[21]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_o77obg0jl().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_o77obg0jl().b[5][0]++, !user) ||
    /* istanbul ignore next */
    (cov_o77obg0jl().b[5][1]++, (
    /* istanbul ignore next */
    (cov_o77obg0jl().b[6][0]++, user.coins?.totalSpent) ||
    /* istanbul ignore next */
    (cov_o77obg0jl().b[6][1]++, 0)) < 1000)) {
      /* istanbul ignore next */
      cov_o77obg0jl().b[4][0]++;
      cov_o77obg0jl().s[23]++;
      return res.json({
        success: true,
        notifications: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_o77obg0jl().b[4][1]++;
    }
    // Get cached whale notifications
    const notifications =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[24]++, await (0, redis_1.getCache)(`whale_notification:${userId}`));
    /* istanbul ignore next */
    cov_o77obg0jl().s[25]++;
    res.json({
      success: true,
      notifications:
      /* istanbul ignore next */
      (cov_o77obg0jl().b[7][0]++, notifications) ||
      /* istanbul ignore next */
      (cov_o77obg0jl().b[7][1]++, [])
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[26]++;
    console.error('Error fetching whale notifications:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[27]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch whale notifications'
    });
  }
});
/**
 * @route POST /haloai/auto-gifter
 * @desc Enable/disable auto gifter for OG3+ users
 */
/* istanbul ignore next */
cov_o77obg0jl().s[28]++;
router.post('/auto-gifter', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[3]++;
  cov_o77obg0jl().s[29]++;
  try {
    const {
      enabled
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[30]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[31]++, req.user?.id);
    const user =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[32]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_o77obg0jl().s[33]++;
    if (!user) {
      /* istanbul ignore next */
      cov_o77obg0jl().b[8][0]++;
      cov_o77obg0jl().s[34]++;
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_o77obg0jl().b[8][1]++;
    }
    cov_o77obg0jl().s[35]++;
    if (user.ogLevel < 3) {
      /* istanbul ignore next */
      cov_o77obg0jl().b[9][0]++;
      cov_o77obg0jl().s[36]++;
      return res.status(403).json({
        success: false,
        error: 'Auto gifter is only available for OG3+ users'
      });
    } else
    /* istanbul ignore next */
    {
      cov_o77obg0jl().b[9][1]++;
    }
    // Update user preferences
    cov_o77obg0jl().s[37]++;
    user.preferences = {
      ...user.preferences,
      autoGifter: enabled
    };
    /* istanbul ignore next */
    cov_o77obg0jl().s[38]++;
    await user.save();
    /* istanbul ignore next */
    cov_o77obg0jl().s[39]++;
    res.json({
      success: true,
      message: `Auto gifter ${enabled ?
      /* istanbul ignore next */
      (cov_o77obg0jl().b[10][0]++, 'enabled') :
      /* istanbul ignore next */
      (cov_o77obg0jl().b[10][1]++, 'disabled')} successfully`
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[40]++;
    console.error('Error updating auto gifter:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update auto gifter'
    });
  }
});
/**
 * @route GET /haloai/festivals
 * @desc Get active festivals
 */
/* istanbul ignore next */
cov_o77obg0jl().s[42]++;
router.get('/festivals', async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[4]++;
  cov_o77obg0jl().s[43]++;
  try {
    const {
      country
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[44]++, req.query);
    const query =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[45]++, {
      startDate: {
        $lte: new Date()
      },
      endDate: {
        $gte: new Date()
      },
      isActive: true
    });
    /* istanbul ignore next */
    cov_o77obg0jl().s[46]++;
    if (country) {
      /* istanbul ignore next */
      cov_o77obg0jl().b[11][0]++;
      cov_o77obg0jl().s[47]++;
      query.country = country;
    } else
    /* istanbul ignore next */
    {
      cov_o77obg0jl().b[11][1]++;
    }
    const festivals =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[48]++, await Festival_1.Festival.find(query).sort({
      startDate: 1
    }));
    /* istanbul ignore next */
    cov_o77obg0jl().s[49]++;
    res.json({
      success: true,
      festivals
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[50]++;
    console.error('Error fetching festivals:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[51]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch festivals'
    });
  }
});
/**
 * @route POST /haloai/festival-events
 * @desc Trigger festival event creation
 */
/* istanbul ignore next */
cov_o77obg0jl().s[52]++;
router.post('/festival-events', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[5]++;
  cov_o77obg0jl().s[53]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[54]++, req.user?.id);
    // Check if user is admin
    const user =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[55]++, await User_1.User.findById(userId));
    /* istanbul ignore next */
    cov_o77obg0jl().s[56]++;
    if (!user?.isAdmin) {
      /* istanbul ignore next */
      cov_o77obg0jl().b[12][0]++;
      cov_o77obg0jl().s[57]++;
      return res.status(403).json({
        success: false,
        error: 'Admin access required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_o77obg0jl().b[12][1]++;
    }
    // Trigger festival event detection and creation
    cov_o77obg0jl().s[58]++;
    await HaloAIService_1.haloAIService.detectAndCreateFestivalEvents();
    /* istanbul ignore next */
    cov_o77obg0jl().s[59]++;
    res.json({
      success: true,
      message: 'Festival events processed successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[60]++;
    console.error('Error processing festival events:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[61]++;
    res.status(500).json({
      success: false,
      error: 'Failed to process festival events'
    });
  }
});
/**
 * @route GET /haloai/recommendations
 * @desc Get AI recommendations for user
 */
/* istanbul ignore next */
cov_o77obg0jl().s[62]++;
router.get('/recommendations', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[6]++;
  cov_o77obg0jl().s[63]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[64]++, req.user?.id);
    const {
      type =
      /* istanbul ignore next */
      (cov_o77obg0jl().b[13][0]++, 'general')
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[65]++, req.query);
    let result;
    /* istanbul ignore next */
    cov_o77obg0jl().s[66]++;
    if (type === 'streams') {
      /* istanbul ignore next */
      cov_o77obg0jl().b[14][0]++;
      cov_o77obg0jl().s[67]++;
      // Get stream recommendations
      result = await HaloAIService_1.haloAIService.processEngagementRequest(userId, 'suggestions', {
        type: 'streams'
      });
    } else {
      /* istanbul ignore next */
      cov_o77obg0jl().b[14][1]++;
      cov_o77obg0jl().s[68]++;
      if (type === 'gifts') {
        /* istanbul ignore next */
        cov_o77obg0jl().b[15][0]++;
        cov_o77obg0jl().s[69]++;
        // Get gift recommendations
        result = await HaloAIService_1.haloAIService.processEngagementRequest(userId, 'suggestions', {
          type: 'gifts'
        });
      } else {
        /* istanbul ignore next */
        cov_o77obg0jl().b[15][1]++;
        cov_o77obg0jl().s[70]++;
        // Get general recommendations
        result = await HaloAIService_1.haloAIService.processEngagementRequest(userId, 'suggestions');
      }
    }
    /* istanbul ignore next */
    cov_o77obg0jl().s[71]++;
    res.json({
      success: true,
      recommendations:
      /* istanbul ignore next */
      (cov_o77obg0jl().b[16][0]++, result.suggestions) ||
      /* istanbul ignore next */
      (cov_o77obg0jl().b[16][1]++, []),
      metadata: result.metadata
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[72]++;
    console.error('Error fetching recommendations:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[73]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch recommendations'
    });
  }
});
/**
 * @route POST /haloai/chat-suggestions
 * @desc Get AI chat suggestions for stream
 */
/* istanbul ignore next */
cov_o77obg0jl().s[74]++;
router.post('/chat-suggestions', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[7]++;
  cov_o77obg0jl().s[75]++;
  try {
    const {
      streamId,
      context
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[76]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[77]++, req.user?.id);
    const result =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[78]++, await HaloAIService_1.haloAIService.processEngagementRequest(userId, 'boost', {
      streamId,
      ...context
    }));
    // Filter for chat suggestions only
    const chatSuggestions =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[79]++,
    /* istanbul ignore next */
    (cov_o77obg0jl().b[17][0]++, result.actions?.filter(action => {
      /* istanbul ignore next */
      cov_o77obg0jl().f[8]++;
      cov_o77obg0jl().s[80]++;
      return action.type === 'chat';
    })) ||
    /* istanbul ignore next */
    (cov_o77obg0jl().b[17][1]++, []));
    /* istanbul ignore next */
    cov_o77obg0jl().s[81]++;
    res.json({
      success: true,
      suggestions: chatSuggestions.map(s => {
        /* istanbul ignore next */
        cov_o77obg0jl().f[9]++;
        cov_o77obg0jl().s[82]++;
        return s.suggestion;
      }),
      metadata: result.metadata
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[83]++;
    console.error('Error fetching chat suggestions:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[84]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch chat suggestions'
    });
  }
});
/**
 * @route GET /haloai/engagement-analysis
 * @desc Get engagement analysis for user
 */
/* istanbul ignore next */
cov_o77obg0jl().s[85]++;
router.get('/engagement-analysis', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[10]++;
  cov_o77obg0jl().s[86]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[87]++, req.user?.id);
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[88]++, req.query);
    const result =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[89]++, await HaloAIService_1.haloAIService.processEngagementRequest(userId, 'analysis', {
      streamId
    }));
    /* istanbul ignore next */
    cov_o77obg0jl().s[90]++;
    res.json({
      success: true,
      analysis: result.metadata,
      recommendations: result.suggestions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[91]++;
    console.error('Error fetching engagement analysis:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[92]++;
    res.status(500).json({
      success: false,
      error: 'Failed to fetch engagement analysis'
    });
  }
});
/**
 * @route PUT /ai/features/voice-cloning
 * @desc Update voice cloning settings
 */
/* istanbul ignore next */
cov_o77obg0jl().s[93]++;
router.put('/features/voice-cloning', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_o77obg0jl().f[11]++;
  cov_o77obg0jl().s[94]++;
  try {
    const {
      enabled,
      voiceId,
      settings
    } =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[95]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_o77obg0jl().s[96]++, req.user?.id);
    // Update user's voice cloning preferences
    /* istanbul ignore next */
    cov_o77obg0jl().s[97]++;
    await User_1.User.findByIdAndUpdate(userId, {
      $set: {
        'aiFeatures.voiceCloning': {
          enabled:
          /* istanbul ignore next */
          (cov_o77obg0jl().b[18][0]++, enabled) ||
          /* istanbul ignore next */
          (cov_o77obg0jl().b[18][1]++, false),
          voiceId:
          /* istanbul ignore next */
          (cov_o77obg0jl().b[19][0]++, voiceId) ||
          /* istanbul ignore next */
          (cov_o77obg0jl().b[19][1]++, null),
          settings:
          /* istanbul ignore next */
          (cov_o77obg0jl().b[20][0]++, settings) ||
          /* istanbul ignore next */
          (cov_o77obg0jl().b[20][1]++, {})
        }
      }
    });
    /* istanbul ignore next */
    cov_o77obg0jl().s[98]++;
    res.json({
      success: true,
      message: 'Voice cloning settings updated successfully',
      data: {
        enabled:
        /* istanbul ignore next */
        (cov_o77obg0jl().b[21][0]++, enabled) ||
        /* istanbul ignore next */
        (cov_o77obg0jl().b[21][1]++, false),
        voiceId:
        /* istanbul ignore next */
        (cov_o77obg0jl().b[22][0]++, voiceId) ||
        /* istanbul ignore next */
        (cov_o77obg0jl().b[22][1]++, null),
        settings:
        /* istanbul ignore next */
        (cov_o77obg0jl().b[23][0]++, settings) ||
        /* istanbul ignore next */
        (cov_o77obg0jl().b[23][1]++, {})
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_o77obg0jl().s[99]++;
    console.error('Error updating voice cloning settings:', error);
    /* istanbul ignore next */
    cov_o77obg0jl().s[100]++;
    res.status(500).json({
      success: false,
      error: 'Failed to update voice cloning settings'
    });
  }
});
/* istanbul ignore next */
cov_o77obg0jl().s[101]++;
exports.default = router;