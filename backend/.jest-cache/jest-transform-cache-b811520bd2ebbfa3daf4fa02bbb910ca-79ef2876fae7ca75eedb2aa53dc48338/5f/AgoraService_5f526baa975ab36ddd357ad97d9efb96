875a77390a249e2b21fcc6fe4bb0932c
"use strict";

/* istanbul ignore next */
function cov_ztdv48as9() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\AgoraService.ts";
  var hash = "ff41cd629f123239659626546f48a93a88896498";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\AgoraService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 42
        }
      },
      "4": {
        start: {
          line: 7,
          column: 13
        },
        end: {
          line: 7,
          column: 28
        }
      },
      "5": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 10,
          column: 23
        }
      },
      "6": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 30
        }
      },
      "7": {
        start: {
          line: 12,
          column: 22
        },
        end: {
          line: 12,
          column: 26
        }
      },
      "8": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 20
        }
      },
      "9": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "10": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 52
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 70
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "13": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "17": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 41,
          column: 75
        }
      },
      "18": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 69
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "20": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "22": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 70
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "24": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "25": {
        start: {
          line: 69,
          column: 29
        },
        end: {
          line: 69,
          column: 59
        }
      },
      "26": {
        start: {
          line: 70,
          column: 28
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "27": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "28": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 71
        }
      },
      "29": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "30": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "31": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 59
        }
      },
      "32": {
        start: {
          line: 91,
          column: 35
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "33": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 71
        }
      },
      "34": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 72
        }
      },
      "35": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "36": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "37": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 22
        }
      },
      "38": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 71
        }
      },
      "39": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "40": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "41": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "42": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 68
        }
      },
      "43": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "44": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "45": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 75
        }
      },
      "46": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 141,
          column: 69
        }
      },
      "47": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "48": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 150,
          column: 18
        }
      },
      "49": {
        start: {
          line: 153,
          column: 34
        },
        end: {
          line: 153,
          column: 66
        }
      },
      "50": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 155,
          column: 77
        }
      },
      "51": {
        start: {
          line: 156,
          column: 30
        },
        end: {
          line: 156,
          column: 72
        }
      },
      "52": {
        start: {
          line: 158,
          column: 30
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "53": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 75
        }
      },
      "54": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "55": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 70
        }
      },
      "56": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 180,
          column: 14
        }
      },
      "57": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "58": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "59": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 191,
          column: 44
        }
      },
      "60": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 192,
          column: 25
        }
      },
      "61": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "62": {
        start: {
          line: 194,
          column: 26
        },
        end: {
          line: 194,
          column: 58
        }
      },
      "63": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "64": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 34
        }
      },
      "65": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 43
        }
      },
      "66": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 29
        }
      },
      "67": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "68": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 212,
          column: 14
        }
      },
      "69": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 220,
          column: 14
        }
      },
      "70": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 70
        }
      },
      "71": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "72": {
        start: {
          line: 235,
          column: 36
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "73": {
        start: {
          line: 250,
          column: 35
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "74": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 65
        }
      },
      "75": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "76": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 75
        }
      },
      "77": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 84
        }
      },
      "78": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 24
        }
      },
      "79": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "80": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "81": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 64
        }
      },
      "82": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "83": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 66
        }
      },
      "84": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 71
        }
      },
      "85": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "86": {
        start: {
          line: 289,
          column: 36
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "87": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 298,
          column: 15
        }
      },
      "88": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 100
        }
      },
      "89": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 66
        }
      },
      "90": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "91": {
        start: {
          line: 310,
          column: 35
        },
        end: {
          line: 315,
          column: 13
        }
      },
      "92": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "93": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 102
        }
      },
      "94": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 68
        }
      },
      "95": {
        start: {
          line: 327,
          column: 0
        },
        end: {
          line: 327,
          column: 36
        }
      },
      "96": {
        start: {
          line: 328,
          column: 0
        },
        end: {
          line: 328,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 30
          },
          end: {
            line: 31,
            column: 31
          }
        },
        loc: {
          start: {
            line: 31,
            column: 40
          },
          end: {
            line: 33,
            column: 9
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 64
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 67
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 53
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 27
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 73
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 137
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 41
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 186
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 205
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 51
          },
          end: {
            line: 229,
            column: 5
          }
        },
        line: 226
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 63
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 233
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 51
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 269
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 47
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 287
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 49
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 308
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 21
          },
          end: {
            line: 16,
            column: 45
          }
        }, {
          start: {
            line: 16,
            column: 49
          },
          end: {
            line: 16,
            column: 51
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 17,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 17,
            column: 63
          }
        }, {
          start: {
            line: 17,
            column: 67
          },
          end: {
            line: 17,
            column: 69
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 44
          },
          end: {
            line: 38,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 38,
            column: 51
          },
          end: {
            line: 38,
            column: 62
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 19
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 19
          },
          end: {
            line: 71,
            column: 26
          }
        }, {
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 78,
            column: 13
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 137,
            column: 45
          },
          end: {
            line: 137,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 137,
            column: 52
          },
          end: {
            line: 137,
            column: 63
          }
        }],
        line: 137
      },
      "6": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "7": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "8": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 187,
            column: 27
          }
        }, {
          start: {
            line: 187,
            column: 31
          },
          end: {
            line: 187,
            column: 64
          }
        }],
        line: 187
      },
      "9": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "10": {
        loc: {
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: 214,
            column: 13
          },
          end: {
            line: 221,
            column: 9
          }
        }],
        line: 206
      },
      "11": {
        loc: {
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 249,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 235,
            column: 72
          }
        }, {
          start: {
            line: 235,
            column: 76
          },
          end: {
            line: 249,
            column: 13
          }
        }],
        line: 235
      },
      "12": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "13": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "14": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ff41cd629f123239659626546f48a93a88896498"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ztdv48as9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ztdv48as9();
cov_ztdv48as9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ztdv48as9().s[1]++;
exports.AgoraService = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_ztdv48as9().s[2]++, require("../config/logger"));
const redis_1 =
/* istanbul ignore next */
(cov_ztdv48as9().s[3]++, require("../config/redis"));
class AgoraService {
  logger =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[4]++, logger_1.logger);
  appId;
  appCertificate;
  regions =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[5]++, new Map());
  channelMetrics =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[6]++, new Map());
  adaptiveBitrate =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[7]++, true);
  globalCDN =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[8]++, true);
  autoScaling =
  /* istanbul ignore next */
  (cov_ztdv48as9().s[9]++, true);
  constructor() {
    /* istanbul ignore next */
    cov_ztdv48as9().f[0]++;
    cov_ztdv48as9().s[10]++;
    this.appId =
    /* istanbul ignore next */
    (cov_ztdv48as9().b[0][0]++, process.env.AGORA_APP_ID) ||
    /* istanbul ignore next */
    (cov_ztdv48as9().b[0][1]++, '');
    /* istanbul ignore next */
    cov_ztdv48as9().s[11]++;
    this.appCertificate =
    /* istanbul ignore next */
    (cov_ztdv48as9().b[1][0]++, process.env.AGORA_APP_CERTIFICATE) ||
    /* istanbul ignore next */
    (cov_ztdv48as9().b[1][1]++, '');
    /* istanbul ignore next */
    cov_ztdv48as9().s[12]++;
    this.initializeRegions();
  }
  /**
   * Initialize region configurations
   */
  initializeRegions() {
    /* istanbul ignore next */
    cov_ztdv48as9().f[1]++;
    const regionConfigs =
    /* istanbul ignore next */
    (cov_ztdv48as9().s[13]++, [{
      region: 'US East',
      regionCode: 'us-east-1',
      priority: 1,
      latency: 50,
      capacity: 10000
    }, {
      region: 'US West',
      regionCode: 'us-west-1',
      priority: 2,
      latency: 60,
      capacity: 8000
    }, {
      region: 'Europe',
      regionCode: 'eu-west-1',
      priority: 3,
      latency: 70,
      capacity: 12000
    }, {
      region: 'Asia Pacific',
      regionCode: 'ap-southeast-1',
      priority: 4,
      latency: 80,
      capacity: 15000
    }, {
      region: 'India',
      regionCode: 'ap-south-1',
      priority: 5,
      latency: 90,
      capacity: 10000
    }]);
    /* istanbul ignore next */
    cov_ztdv48as9().s[14]++;
    regionConfigs.forEach(region => {
      /* istanbul ignore next */
      cov_ztdv48as9().f[2]++;
      cov_ztdv48as9().s[15]++;
      this.regions.set(region.regionCode, region);
    });
  }
  /**
   * Refresh Agora token
   */
  async refreshToken(channelName, userId, role =
  /* istanbul ignore next */
  (cov_ztdv48as9().b[2][0]++, 'publisher')) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[3]++;
    cov_ztdv48as9().s[16]++;
    try {
      // Check cache first
      const cacheKey =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[17]++, `agora_token:${channelName}:${userId}:${role}`);
      const cachedToken =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[18]++, await (0, redis_1.getCache)(cacheKey));
      /* istanbul ignore next */
      cov_ztdv48as9().s[19]++;
      if (cachedToken) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[3][0]++;
        cov_ztdv48as9().s[20]++;
        return {
          success: true,
          token: cachedToken.token,
          uid: cachedToken.uid,
          expiresAt: cachedToken.expiresAt,
          region: cachedToken.region,
          quality: cachedToken.quality
        };
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[3][1]++;
      }
      // Generate new token
      cov_ztdv48as9().s[21]++;
      return await this.generateToken(channelName, userId, role);
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[22]++;
      this.logger.error('Error refreshing Agora token:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[23]++;
      return {
        success: false,
        error: 'Failed to refresh token'
      };
    }
  }
  /**
   * Get channel metrics
   */
  async getChannelMetrics(channelName) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[4]++;
    cov_ztdv48as9().s[24]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[25]++, `agora_metrics:${channelName}`);
      const metrics =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[26]++, await (0, redis_1.getCache)(cacheKey));
      /* istanbul ignore next */
      cov_ztdv48as9().s[27]++;
      return /* istanbul ignore next */(cov_ztdv48as9().b[4][0]++, metrics) ||
      /* istanbul ignore next */
      (cov_ztdv48as9().b[4][1]++, {
        channelName,
        viewerCount: 0,
        publisherCount: 0,
        bandwidth: 0,
        latency: 0,
        timestamp: new Date()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[28]++;
      this.logger.error('Error getting channel metrics:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[29]++;
      throw error;
    }
  }
  /**
   * Update channel metrics
   */
  async updateChannelMetrics(channelName, metrics) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[5]++;
    cov_ztdv48as9().s[30]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[31]++, `agora_metrics:${channelName}`);
      const updatedMetrics =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[32]++, {
        ...metrics,
        channelName,
        timestamp: new Date()
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[33]++;
      await (0, redis_1.setCache)(cacheKey, updatedMetrics, 300); // 5 minutes
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[34]++;
      this.logger.error('Error updating channel metrics:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[35]++;
      throw error;
    }
  }
  /**
   * Get active channels
   */
  async getActiveChannels() {
    /* istanbul ignore next */
    cov_ztdv48as9().f[6]++;
    cov_ztdv48as9().s[36]++;
    try {
      /* istanbul ignore next */
      cov_ztdv48as9().s[37]++;
      // This would typically query a database or cache
      // For now, return empty array
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[38]++;
      this.logger.error('Error getting active channels:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[39]++;
      throw error;
    }
  }
  /**
   * Get region statistics
   */
  async getRegionStats() {
    /* istanbul ignore next */
    cov_ztdv48as9().f[7]++;
    cov_ztdv48as9().s[40]++;
    try {
      /* istanbul ignore next */
      cov_ztdv48as9().s[41]++;
      return {
        regions: [{
          region: 'US',
          activeChannels: 0,
          totalUsers: 0
        }, {
          region: 'EU',
          activeChannels: 0,
          totalUsers: 0
        }, {
          region: 'AS',
          activeChannels: 0,
          totalUsers: 0
        }],
        timestamp: new Date()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[42]++;
      this.logger.error('Error getting region stats:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[43]++;
      throw error;
    }
  }
  // Enhanced token generation with region optimization
  async generateToken(channelName, userId, role =
  /* istanbul ignore next */
  (cov_ztdv48as9().b[5][0]++, 'publisher'), region) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[8]++;
    cov_ztdv48as9().s[44]++;
    try {
      // Check cache first
      const cacheKey =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[45]++, `agora_token:${channelName}:${userId}:${role}`);
      const cachedToken =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[46]++, await (0, redis_1.getCache)(cacheKey));
      /* istanbul ignore next */
      cov_ztdv48as9().s[47]++;
      if (cachedToken) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[6][0]++;
        cov_ztdv48as9().s[48]++;
        return {
          success: true,
          token: cachedToken.token,
          uid: cachedToken.uid,
          expiresAt: cachedToken.expiresAt,
          region: cachedToken.region,
          quality: cachedToken.quality
        };
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[6][1]++;
      }
      // Select optimal region
      const optimalRegion =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[49]++, this.selectOptimalRegion(region));
      // Generate token (simplified implementation)
      const token =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[50]++, this.generateSimpleToken(channelName, userId, role));
      const expiresAt =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[51]++, new Date(Date.now() + 24 * 60 * 60 * 1000)); // 24 hours
      // Cache the token
      const tokenData =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[52]++, {
        token,
        uid: userId,
        expiresAt,
        region: optimalRegion,
        quality: this.getOptimalQuality(role)
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[53]++;
      await (0, redis_1.setCache)(cacheKey, tokenData, 24 * 60 * 60); // 24 hours
      /* istanbul ignore next */
      cov_ztdv48as9().s[54]++;
      return {
        success: true,
        token,
        uid: userId,
        expiresAt,
        region: optimalRegion,
        quality: this.getOptimalQuality(role)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[55]++;
      this.logger.error('Error generating Agora token:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[56]++;
      return {
        success: false,
        error: 'Failed to generate token'
      };
    }
  }
  /**
   * Select optimal region based on latency and capacity
   */
  selectOptimalRegion(requestedRegion) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[9]++;
    cov_ztdv48as9().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_ztdv48as9().b[8][0]++, requestedRegion) &&
    /* istanbul ignore next */
    (cov_ztdv48as9().b[8][1]++, this.regions.has(requestedRegion))) {
      /* istanbul ignore next */
      cov_ztdv48as9().b[7][0]++;
      cov_ztdv48as9().s[58]++;
      return requestedRegion;
    } else
    /* istanbul ignore next */
    {
      cov_ztdv48as9().b[7][1]++;
    }
    // Find region with lowest latency and highest capacity
    let optimalRegion =
    /* istanbul ignore next */
    (cov_ztdv48as9().s[59]++, 'ap-southeast-1'); // Default
    let bestScore =
    /* istanbul ignore next */
    (cov_ztdv48as9().s[60]++, 0);
    /* istanbul ignore next */
    cov_ztdv48as9().s[61]++;
    for (const [regionCode, region] of this.regions) {
      const score =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[62]++, region.capacity / region.latency);
      /* istanbul ignore next */
      cov_ztdv48as9().s[63]++;
      if (score > bestScore) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[9][0]++;
        cov_ztdv48as9().s[64]++;
        bestScore = score;
        /* istanbul ignore next */
        cov_ztdv48as9().s[65]++;
        optimalRegion = regionCode;
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[9][1]++;
      }
    }
    /* istanbul ignore next */
    cov_ztdv48as9().s[66]++;
    return optimalRegion;
  }
  /**
   * Get optimal quality settings based on role
   */
  getOptimalQuality(role) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[10]++;
    cov_ztdv48as9().s[67]++;
    if (role === 'publisher') {
      /* istanbul ignore next */
      cov_ztdv48as9().b[10][0]++;
      cov_ztdv48as9().s[68]++;
      return {
        resolution: '1080p',
        bitrate: 2000,
        framerate: 30,
        codec: 'H.264'
      };
    } else {
      /* istanbul ignore next */
      cov_ztdv48as9().b[10][1]++;
      cov_ztdv48as9().s[69]++;
      return {
        resolution: '720p',
        bitrate: 1500,
        framerate: 30,
        codec: 'H.264'
      };
    }
  }
  /**
   * Generate simple token (placeholder implementation)
   */
  generateSimpleToken(channelName, userId, role) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[11]++;
    cov_ztdv48as9().s[70]++;
    // In a real implementation, this would use Agora's token generation
    return `token_${channelName}_${userId}_${role}_${Date.now()}`;
  }
  /**
   * Update channel metrics for auto-scaling
   */
  async updateChannelMetricsForScaling(channelName, metrics) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[12]++;
    cov_ztdv48as9().s[71]++;
    try {
      const existingMetrics =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[72]++,
      /* istanbul ignore next */
      (cov_ztdv48as9().b[11][0]++, this.channelMetrics.get(channelName)) ||
      /* istanbul ignore next */
      (cov_ztdv48as9().b[11][1]++, {
        channelName,
        viewerCount: 0,
        publisherCount: 0,
        bandwidth: 0,
        latency: 0,
        quality: {
          resolution: '720p',
          bitrate: 1500,
          framerate: 30,
          codec: 'H.264'
        },
        region: 'ap-southeast-1',
        lastUpdated: new Date()
      }));
      const updatedMetrics =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[73]++, {
        ...existingMetrics,
        ...metrics,
        lastUpdated: new Date()
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[74]++;
      this.channelMetrics.set(channelName, updatedMetrics);
      // Auto-scale based on metrics
      /* istanbul ignore next */
      cov_ztdv48as9().s[75]++;
      if (this.autoScaling) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[12][0]++;
        cov_ztdv48as9().s[76]++;
        await this.performAutoScaling(channelName, updatedMetrics);
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[12][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[77]++;
      this.logger.error('Error updating channel metrics for scaling:', error);
      /* istanbul ignore next */
      cov_ztdv48as9().s[78]++;
      throw error;
    }
  }
  /**
   * Perform auto-scaling based on channel metrics
   */
  async performAutoScaling(channelName, metrics) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[13]++;
    cov_ztdv48as9().s[79]++;
    try {
      /* istanbul ignore next */
      cov_ztdv48as9().s[80]++;
      // Scale up if high viewer count
      if (metrics.viewerCount > 1000) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[13][0]++;
        cov_ztdv48as9().s[81]++;
        await this.scaleUpChannel(channelName, metrics);
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[13][1]++;
      }
      // Scale down if low viewer count
      cov_ztdv48as9().s[82]++;
      if (metrics.viewerCount < 100) {
        /* istanbul ignore next */
        cov_ztdv48as9().b[14][0]++;
        cov_ztdv48as9().s[83]++;
        await this.scaleDownChannel(channelName, metrics);
      } else
      /* istanbul ignore next */
      {
        cov_ztdv48as9().b[14][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[84]++;
      this.logger.error('Error performing auto-scaling:', error);
    }
  }
  /**
   * Scale up channel resources
   */
  async scaleUpChannel(channelName, metrics) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[14]++;
    cov_ztdv48as9().s[85]++;
    try {
      const enhancedQuality =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[86]++, {
        resolution: '1080p',
        bitrate: 2500,
        framerate: 60,
        codec: 'H.265'
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[87]++;
      await this.updateChannelMetrics(channelName, {
        ...metrics,
        quality: enhancedQuality
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[88]++;
      this.logger.info(`Scaled up channel ${channelName} for ${metrics.viewerCount} viewers`);
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[89]++;
      this.logger.error('Error scaling up channel:', error);
    }
  }
  /**
   * Scale down channel resources
   */
  async scaleDownChannel(channelName, metrics) {
    /* istanbul ignore next */
    cov_ztdv48as9().f[15]++;
    cov_ztdv48as9().s[90]++;
    try {
      const reducedQuality =
      /* istanbul ignore next */
      (cov_ztdv48as9().s[91]++, {
        resolution: '480p',
        bitrate: 800,
        framerate: 24,
        codec: 'H.264'
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[92]++;
      await this.updateChannelMetrics(channelName, {
        ...metrics,
        quality: reducedQuality
      });
      /* istanbul ignore next */
      cov_ztdv48as9().s[93]++;
      this.logger.info(`Scaled down channel ${channelName} for ${metrics.viewerCount} viewers`);
    } catch (error) {
      /* istanbul ignore next */
      cov_ztdv48as9().s[94]++;
      this.logger.error('Error scaling down channel:', error);
    }
  }
}
/* istanbul ignore next */
cov_ztdv48as9().s[95]++;
exports.AgoraService = AgoraService;
/* istanbul ignore next */
cov_ztdv48as9().s[96]++;
exports.default = new AgoraService();