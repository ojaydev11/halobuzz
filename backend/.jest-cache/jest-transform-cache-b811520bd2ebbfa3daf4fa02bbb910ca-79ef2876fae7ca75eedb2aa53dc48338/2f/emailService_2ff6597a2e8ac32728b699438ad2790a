8f1d652f2faf8e359284964a221e96be
"use strict";

/* istanbul ignore next */
function cov_1el5gbvzzh() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\services\\emailService.ts";
  var hash = "d0aa9d5763b757abfa759a500c716d0bb7f6509e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\services\\emailService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 10,
          column: 9
        }
      },
      "4": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 9,
          column: 55
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 37
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "7": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 96
        }
      },
      "8": {
        start: {
          line: 17,
          column: 35
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "10": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 88
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "12": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "13": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "14": {
        start: {
          line: 52,
          column: 34
        },
        end: {
          line: 52,
          column: 55
        }
      },
      "15": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 89
        }
      },
      "16": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 80
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 24
        }
      },
      "18": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 78
        }
      },
      "19": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 47
        }
      },
      "20": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 11
        }
      },
      "21": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 20
        }
      },
      "22": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 11
        }
      },
      "23": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 50
        }
      },
      "24": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "25": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 50
        }
      },
      "26": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "27": {
        start: {
          line: 103,
          column: 0
        },
        end: {
          line: 103,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 25
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 63
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 46
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 76
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 54
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 84
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 51
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 93
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 10,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 31
          },
          end: {
            line: 36,
            column: 53
          }
        }, {
          start: {
            line: 36,
            column: 57
          },
          end: {
            line: 36,
            column: 79
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 35
          },
          end: {
            line: 42,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 35
          },
          end: {
            line: 42,
            column: 47
          }
        }, {
          start: {
            line: 42,
            column: 51
          },
          end: {
            line: 42,
            column: 88
          }
        }, {
          start: {
            line: 42,
            column: 92
          },
          end: {
            line: 42,
            column: 94
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 47,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 43
          },
          end: {
            line: 47,
            column: 30
          }
        }, {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 35
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0aa9d5763b757abfa759a500c716d0bb7f6509e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1el5gbvzzh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1el5gbvzzh();
cov_1el5gbvzzh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1el5gbvzzh().s[1]++;
exports.EmailService = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_1el5gbvzzh().s[2]++, require("../config/logger"));
class EmailService {
  static instance;
  static getInstance() {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[0]++;
    cov_1el5gbvzzh().s[3]++;
    if (!EmailService.instance) {
      /* istanbul ignore next */
      cov_1el5gbvzzh().b[0][0]++;
      cov_1el5gbvzzh().s[4]++;
      EmailService.instance = new EmailService();
    } else
    /* istanbul ignore next */
    {
      cov_1el5gbvzzh().b[0][1]++;
    }
    cov_1el5gbvzzh().s[5]++;
    return EmailService.instance;
  }
  async sendEmail(options) {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[1]++;
    cov_1el5gbvzzh().s[6]++;
    try {
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[7]++;
      logger_1.logger.info('Sending email', {
        to: options.to,
        subject: options.subject
      });
      // Use SendGrid for email delivery
      const sendgridApiKey =
      /* istanbul ignore next */
      (cov_1el5gbvzzh().s[8]++, process.env.SENDGRID_API_KEY);
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[9]++;
      if (!sendgridApiKey) {
        /* istanbul ignore next */
        cov_1el5gbvzzh().b[1][0]++;
        cov_1el5gbvzzh().s[10]++;
        logger_1.logger.warn('SendGrid API key not configured, using fallback');
        /* istanbul ignore next */
        cov_1el5gbvzzh().s[11]++;
        return this.fallbackEmail(options);
      } else
      /* istanbul ignore next */
      {
        cov_1el5gbvzzh().b[1][1]++;
      }
      const response =
      /* istanbul ignore next */
      (cov_1el5gbvzzh().s[12]++, await fetch('https://api.sendgrid.com/v3/mail/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${sendgridApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          personalizations: [{
            to: [{
              email: options.to
            }],
            subject: options.subject
          }],
          from: {
            email:
            /* istanbul ignore next */
            (cov_1el5gbvzzh().b[2][0]++, process.env.FROM_EMAIL) ||
            /* istanbul ignore next */
            (cov_1el5gbvzzh().b[2][1]++, 'noreply@halobuzz.com'),
            name: 'HaloBuzz'
          },
          content: [{
            type: 'text/plain',
            value:
            /* istanbul ignore next */
            (cov_1el5gbvzzh().b[3][0]++, options.text) ||
            /* istanbul ignore next */
            (cov_1el5gbvzzh().b[3][1]++, options.html?.replace(/<[^>]*>/g, '')) ||
            /* istanbul ignore next */
            (cov_1el5gbvzzh().b[3][2]++, '')
          }, ...(options.html ?
          /* istanbul ignore next */
          (cov_1el5gbvzzh().b[4][0]++, [{
            type: 'text/html',
            value: options.html
          }]) :
          /* istanbul ignore next */
          (cov_1el5gbvzzh().b[4][1]++, []))]
        })
      }));
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[13]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1el5gbvzzh().b[5][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_1el5gbvzzh().s[14]++, await response.text());
        /* istanbul ignore next */
        cov_1el5gbvzzh().s[15]++;
        throw new Error(`SendGrid API error: ${response.status} - ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_1el5gbvzzh().b[5][1]++;
      }
      cov_1el5gbvzzh().s[16]++;
      logger_1.logger.info('Email sent successfully', {
        to: options.to
      });
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[17]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[18]++;
      logger_1.logger.error('Failed to send email', {
        error,
        options
      });
      /* istanbul ignore next */
      cov_1el5gbvzzh().s[19]++;
      return this.fallbackEmail(options);
    }
  }
  fallbackEmail(options) {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[2]++;
    cov_1el5gbvzzh().s[20]++;
    // Log email for development/testing purposes
    logger_1.logger.info('FALLBACK EMAIL LOGGED', {
      to: options.to,
      subject: options.subject,
      text: options.text,
      html: options.html,
      timestamp: new Date().toISOString()
    });
    // In production, you might want to queue this for retry
    // or use an alternative email service
    /* istanbul ignore next */
    cov_1el5gbvzzh().s[21]++;
    return true;
  }
  async sendVerificationEmail(email, token) {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[3]++;
    cov_1el5gbvzzh().s[22]++;
    return this.sendEmail({
      to: email,
      subject: 'Verify your HaloBuzz account',
      text: `Please verify your account with this token: ${token}`,
      html: `<p>Please verify your account with this token: <strong>${token}</strong></p>`
    });
  }
  static async sendPasswordResetEmail(email, token) {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[4]++;
    const service =
    /* istanbul ignore next */
    (cov_1el5gbvzzh().s[23]++, EmailService.getInstance());
    /* istanbul ignore next */
    cov_1el5gbvzzh().s[24]++;
    return service.sendEmail({
      to: email,
      subject: 'Reset your HaloBuzz password',
      text: `Reset your password with this token: ${token}`,
      html: `<p>Reset your password with this token: <strong>${token}</strong></p>`
    });
  }
  static async sendWelcomeEmail(email, username) {
    /* istanbul ignore next */
    cov_1el5gbvzzh().f[5]++;
    const service =
    /* istanbul ignore next */
    (cov_1el5gbvzzh().s[25]++, EmailService.getInstance());
    /* istanbul ignore next */
    cov_1el5gbvzzh().s[26]++;
    return service.sendEmail({
      to: email,
      subject: 'Welcome to HaloBuzz!',
      text: `Welcome to HaloBuzz, ${username}!`,
      html: `<h1>Welcome to HaloBuzz, ${username}!</h1><p>We're excited to have you join our community.</p>`
    });
  }
}
/* istanbul ignore next */
cov_1el5gbvzzh().s[27]++;
exports.EmailService = EmailService;