3ae16fd67987a3d10e43a61450518b57
"use strict";

/* istanbul ignore next */
function cov_1k9j0jsyzf() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\analytics.ts";
  var hash = "244f6ce8b97372b643ff27cf548b67216673dc71";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\admin\\analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 43
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 55
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 57
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 43
        }
      },
      "7": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "8": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "9": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 47
        }
      },
      "10": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "11": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 145,
          column: 3
        }
      },
      "12": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "13": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 30
        }
      },
      "14": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 21,
          column: 78
        }
      },
      "15": {
        start: {
          line: 22,
          column: 30
        },
        end: {
          line: 22,
          column: 80
        }
      },
      "16": {
        start: {
          line: 23,
          column: 35
        },
        end: {
          line: 23,
          column: 80
        }
      },
      "17": {
        start: {
          line: 25,
          column: 78
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "18": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "19": {
        start: {
          line: 35,
          column: 56
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "20": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 58
        }
      },
      "21": {
        start: {
          line: 66,
          column: 30
        },
        end: {
          line: 66,
          column: 64
        }
      },
      "22": {
        start: {
          line: 67,
          column: 33
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "23": {
        start: {
          line: 71,
          column: 39
        },
        end: {
          line: 78,
          column: 10
        }
      },
      "24": {
        start: {
          line: 79,
          column: 33
        },
        end: {
          line: 79,
          column: 70
        }
      },
      "25": {
        start: {
          line: 81,
          column: 37
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "26": {
        start: {
          line: 94,
          column: 35
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "27": {
        start: {
          line: 96,
          column: 79
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "28": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "29": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "30": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 114,
          column: 14
        }
      },
      "31": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "32": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 65
        }
      },
      "33": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "34": {
        start: {
          line: 146,
          column: 0
        },
        end: {
          line: 146,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 87
          },
          end: {
            line: 18,
            column: 88
          }
        },
        loc: {
          start: {
            line: 18,
            column: 107
          },
          end: {
            line: 145,
            column: 1
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 33,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 14
          },
          end: {
            line: 32,
            column: 81
          }
        }, {
          start: {
            line: 33,
            column: 14
          },
          end: {
            line: 33,
            column: 15
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 51
          },
          end: {
            line: 32,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 51
          },
          end: {
            line: 32,
            column: 68
          }
        }, {
          start: {
            line: 32,
            column: 72
          },
          end: {
            line: 32,
            column: 73
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 27
          },
          end: {
            line: 65,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 27
          },
          end: {
            line: 65,
            column: 53
          }
        }, {
          start: {
            line: 65,
            column: 57
          },
          end: {
            line: 65,
            column: 58
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 66,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 30
          },
          end: {
            line: 66,
            column: 59
          }
        }, {
          start: {
            line: 66,
            column: 63
          },
          end: {
            line: 66,
            column: 64
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 69,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 68,
            column: 14
          },
          end: {
            line: 68,
            column: 66
          }
        }, {
          start: {
            line: 69,
            column: 14
          },
          end: {
            line: 69,
            column: 15
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 33
          },
          end: {
            line: 79,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 33
          },
          end: {
            line: 79,
            column: 65
          }
        }, {
          start: {
            line: 79,
            column: 69
          },
          end: {
            line: 79,
            column: 70
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 35
          },
          end: {
            line: 94,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 35
          },
          end: {
            line: 94,
            column: 63
          }
        }, {
          start: {
            line: 94,
            column: 67
          },
          end: {
            line: 94,
            column: 68
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 21
          },
          end: {
            line: 142,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 46
          },
          end: {
            line: 142,
            column: 59
          }
        }, {
          start: {
            line: 142,
            column: 62
          },
          end: {
            line: 142,
            column: 77
          }
        }],
        line: 142
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "244f6ce8b97372b643ff27cf548b67216673dc71"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1k9j0jsyzf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1k9j0jsyzf();
cov_1k9j0jsyzf().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[1]++, require("express"));
const User_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[2]++, require("../../models/User"));
const CoinTransaction_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[3]++, require("../../models/CoinTransaction"));
const LiveStream_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[4]++, require("../../models/LiveStream"));
const GameSession_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[5]++, require("../../models/GameSession"));
const Reel_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[6]++, require("../../models/Reel"));
const ModerationFlag_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[7]++, require("../../models/ModerationFlag"));
const auth_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[8]++, require("../../middleware/auth"));
const rbac_1 =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[9]++, require("../../middleware/rbac"));
const router =
/* istanbul ignore next */
(cov_1k9j0jsyzf().s[10]++, (0, express_1.Router)());
/**
 * GET /api/v1/admin/analytics/dashboard
 * Get dashboard statistics for admin overview
 * Requires: admin:read scope
 */
/* istanbul ignore next */
cov_1k9j0jsyzf().s[11]++;
router.get('/dashboard', auth_1.requireAuth, (0, rbac_1.requireScope)(['admin:read']), async (req, res) => {
  /* istanbul ignore next */
  cov_1k9j0jsyzf().f[0]++;
  cov_1k9j0jsyzf().s[12]++;
  try {
    const now =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[13]++, new Date());
    const sevenDaysAgo =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[14]++, new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000));
    const thirtyDaysAgo =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[15]++, new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000));
    const twentyFourHoursAgo =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[16]++, new Date(now.getTime() - 24 * 60 * 60 * 1000));
    // USER METRICS
    const [totalUsers, usersSevenDaysAgo, active7dUsers, verifiedUsers] =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[17]++, await Promise.all([User_1.User.countDocuments(), User_1.User.countDocuments({
      createdAt: {
        $lte: sevenDaysAgo
      }
    }), User_1.User.countDocuments({
      lastActiveAt: {
        $gte: sevenDaysAgo
      }
    }), User_1.User.countDocuments({
      isVerified: true
    })]));
    const growth7d =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[18]++, totalUsers > 0 ?
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[0][0]++, (totalUsers - usersSevenDaysAgo) / (
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[1][0]++, usersSevenDaysAgo) ||
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[1][1]++, 1)) * 100) :
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[0][1]++, 0));
    // ECONOMY METRICS
    const [revenue30dResult, revenue30dAgoResult] =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[19]++, await Promise.all([CoinTransaction_1.CoinTransaction.aggregate([{
      $match: {
        type: 'purchase',
        createdAt: {
          $gte: thirtyDaysAgo
        }
      }
    }, {
      $group: {
        _id: null,
        total: {
          $sum: '$amount'
        }
      }
    }]), CoinTransaction_1.CoinTransaction.aggregate([{
      $match: {
        type: 'purchase',
        createdAt: {
          $gte: new Date(thirtyDaysAgo.getTime() - 30 * 24 * 60 * 60 * 1000),
          $lt: thirtyDaysAgo
        }
      }
    }, {
      $group: {
        _id: null,
        total: {
          $sum: '$amount'
        }
      }
    }])]));
    const revenue30d =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[20]++,
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[2][0]++, revenue30dResult[0]?.total) ||
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[2][1]++, 0));
    const revenue30dAgo =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[21]++,
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[3][0]++, revenue30dAgoResult[0]?.total) ||
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[3][1]++, 0));
    const economyGrowth30d =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[22]++, revenue30dAgo > 0 ?
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[4][0]++, (revenue30d - revenue30dAgo) / revenue30dAgo * 100) :
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[4][1]++, 0));
    // Coins circulating
    const coinsCirculatingResult =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[23]++, await User_1.User.aggregate([{
      $group: {
        _id: null,
        total: {
          $sum: '$coins.balance'
        }
      }
    }]));
    const coinsCirculating =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[24]++,
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[5][0]++, coinsCirculatingResult[0]?.total) ||
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[5][1]++, 0));
    // Average transaction size
    const avgTransactionResult =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[25]++, await CoinTransaction_1.CoinTransaction.aggregate([{
      $match: {
        createdAt: {
          $gte: thirtyDaysAgo
        }
      }
    }, {
      $group: {
        _id: null,
        avg: {
          $avg: '$amount'
        }
      }
    }]));
    const avgTransactionSize =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[26]++,
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[6][0]++, avgTransactionResult[0]?.avg) ||
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().b[6][1]++, 0));
    // PLATFORM ACTIVITY
    const [liveSessions, gameSessions24h, reelsCreated24h, flagsPending] =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[27]++, await Promise.all([LiveStream_1.LiveStream.countDocuments({
      status: 'live'
    }), GameSession_1.GameSession.countDocuments({
      createdAt: {
        $gte: twentyFourHoursAgo
      },
      status: 'completed'
    }), Reel_1.Reel.countDocuments({
      createdAt: {
        $gte: twentyFourHoursAgo
      }
    }), ModerationFlag_1.ModerationFlag.countDocuments({
      status: 'pending'
    })]));
    // INFRASTRUCTURE METRICS (Super Admin only)
    let infrastructure =
    /* istanbul ignore next */
    (cov_1k9j0jsyzf().s[28]++, undefined);
    /* istanbul ignore next */
    cov_1k9j0jsyzf().s[29]++;
    if (req.user?.roles?.includes('super_admin')) {
      /* istanbul ignore next */
      cov_1k9j0jsyzf().b[7][0]++;
      cov_1k9j0jsyzf().s[30]++;
      // Simulated metrics - replace with actual monitoring data
      infrastructure = {
        apiResponseTimeP95: 245,
        // ms
        uptime30d: 99.97,
        // percentage
        dbLoad: 42,
        // percentage
        redisHitRate: 94.2 // percentage
      };
    } else
    /* istanbul ignore next */
    {
      cov_1k9j0jsyzf().b[7][1]++;
    }
    cov_1k9j0jsyzf().s[31]++;
    res.json({
      users: {
        total: totalUsers,
        active7d: active7dUsers,
        verified: verifiedUsers,
        growth7d: parseFloat(growth7d.toFixed(2))
      },
      economy: {
        revenue30d,
        coinsCirculating,
        avgTransactionSize: parseFloat(avgTransactionSize.toFixed(2)),
        growth30d: parseFloat(economyGrowth30d.toFixed(2))
      },
      platform: {
        liveSessions,
        gameSessions24h,
        reelsCreated24h,
        flagsPending
      },
      infrastructure
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1k9j0jsyzf().s[32]++;
    console.error('Admin analytics dashboard error:', error);
    /* istanbul ignore next */
    cov_1k9j0jsyzf().s[33]++;
    res.status(500).json({
      error: 'Failed to fetch dashboard statistics',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1k9j0jsyzf().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1k9j0jsyzf().b[8][1]++, 'Unknown error')
    });
  }
});
/* istanbul ignore next */
cov_1k9j0jsyzf().s[34]++;
exports.default = router;