c28585f0cabcc9c17a3723073a281baa
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMorganStream = exports.logger = exports.setupLogger = void 0;
const winston = __importStar(require("winston"));
const path = __importStar(require("path"));
const logLevel = process.env.LOG_LEVEL || 'info';
const logFilePath = process.env.LOG_FILE_PATH || './logs/app.log';
// Define log format
const logFormat = winston.format.combine(winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
}), winston.format.errors({ stack: true }), winston.format.json(), winston.format.prettyPrint());
// Define console format for development
const consoleFormat = winston.format.combine(winston.format.colorize(), winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
}), winston.format.printf(({ timestamp, level, message, ...meta }) => {
    return `${timestamp} [${level}]: ${message} ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''}`;
}));
const setupLogger = () => {
    const transports = [];
    // Console transport for all environments
    transports.push(new winston.transports.Console({
        format: consoleFormat,
        level: logLevel
    }));
    // File transport for production and development
    if (process.env.NODE_ENV !== 'test') {
        transports.push(new winston.transports.File({
            filename: logFilePath,
            format: logFormat,
            level: logLevel,
            maxsize: 5242880, // 5MB
            maxFiles: 5,
            tailable: true
        }));
        // Error log file
        transports.push(new winston.transports.File({
            filename: path.join(path.dirname(logFilePath), 'error.log'),
            format: logFormat,
            level: 'error',
            maxsize: 5242880, // 5MB
            maxFiles: 5,
            tailable: true
        }));
    }
    const logger = winston.createLogger({
        level: logLevel,
        format: logFormat,
        transports,
        exitOnError: false
    });
    // Handle uncaught exceptions
    logger.exceptions.handle(new winston.transports.File({
        filename: path.join(path.dirname(logFilePath), 'exceptions.log'),
        format: logFormat
    }));
    // Handle unhandled promise rejections
    logger.rejections.handle(new winston.transports.File({
        filename: path.join(path.dirname(logFilePath), 'rejections.log'),
        format: logFormat
    }));
    return logger;
};
exports.setupLogger = setupLogger;
// Create a singleton logger instance
exports.logger = (0, exports.setupLogger)();
// Create a stream object for Morgan HTTP request logging
const createMorganStream = () => {
    const logger = (0, exports.setupLogger)();
    return {
        write: (message) => {
            logger.info(message.trim());
        }
    };
};
exports.createMorganStream = createMorganStream;
