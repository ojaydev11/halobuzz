b8f216fe547bc3705aa8d9ae440d1a4b
"use strict";

/* istanbul ignore next */
function cov_raew19ba6() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\subtitles.ts";
  var hash = "25e85546ea19b097e5fae8e8ff51603fe8a5d25a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\subtitles.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 68
        }
      },
      "5": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 44
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 41
        }
      },
      "7": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "9": {
        start: {
          line: 16,
          column: 75
        },
        end: {
          line: 16,
          column: 83
        }
      },
      "10": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "12": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 22,
          column: 15
        }
      },
      "13": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "14": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 60
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "17": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 67,
          column: 3
        }
      },
      "18": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "19": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "20": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "21": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 105
        }
      },
      "22": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 58,
          column: 11
        }
      },
      "23": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 64
        }
      },
      "24": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "25": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "26": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "27": {
        start: {
          line: 74,
          column: 57
        },
        end: {
          line: 74,
          column: 65
        }
      },
      "28": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "29": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "30": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "31": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "32": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 56
        }
      },
      "33": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "34": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 124,
          column: 3
        }
      },
      "35": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "36": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 87
        }
      },
      "37": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "38": {
        start: {
          line: 108,
          column: 53
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "39": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "40": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 67
        }
      },
      "41": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "42": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 156,
          column: 3
        }
      },
      "43": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "44": {
        start: {
          line: 131,
          column: 25
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "45": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "46": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 136,
          column: 15
        }
      },
      "47": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "48": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "49": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "50": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "51": {
        start: {
          line: 157,
          column: 0
        },
        end: {
          line: 157,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 48
          },
          end: {
            line: 14,
            column: 49
          }
        },
        loc: {
          start: {
            line: 14,
            column: 68
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 33
          }
        },
        loc: {
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 72,
            column: 49
          },
          end: {
            line: 72,
            column: 50
          }
        },
        loc: {
          start: {
            line: 72,
            column: 69
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 72
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 26
          }
        },
        loc: {
          start: {
            line: 105,
            column: 45
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 44
          },
          end: {
            line: 108,
            column: 45
          }
        },
        loc: {
          start: {
            line: 108,
            column: 53
          },
          end: {
            line: 111,
            column: 9
          }
        },
        line: 108
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 129,
            column: 56
          }
        },
        loc: {
          start: {
            line: 129,
            column: 75
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 129
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 39
          },
          end: {
            line: 26,
            column: 73
          }
        }, {
          start: {
            line: 26,
            column: 76
          },
          end: {
            line: 26,
            column: 85
          }
        }],
        line: 26
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 52,
            column: 31
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 17
          }
        }, {
          start: {
            line: 75,
            column: 21
          },
          end: {
            line: 75,
            column: 36
          }
        }, {
          start: {
            line: 75,
            column: 40
          },
          end: {
            line: 75,
            column: 55
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "25e85546ea19b097e5fae8e8ff51603fe8a5d25a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_raew19ba6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_raew19ba6();
var __importDefault =
/* istanbul ignore next */
(cov_raew19ba6().s[0]++,
/* istanbul ignore next */
(cov_raew19ba6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_raew19ba6().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_raew19ba6().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_raew19ba6().f[0]++;
  cov_raew19ba6().s[1]++;
  return /* istanbul ignore next */(cov_raew19ba6().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_raew19ba6().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_raew19ba6().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_raew19ba6().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_raew19ba6().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_raew19ba6().s[3]++, __importDefault(require("express")));
const AISubtitleService_1 =
/* istanbul ignore next */
(cov_raew19ba6().s[4]++, require("../services/AISubtitleService"));
const auth_1 =
/* istanbul ignore next */
(cov_raew19ba6().s[5]++, require("../middleware/auth"));
const router =
/* istanbul ignore next */
(cov_raew19ba6().s[6]++, express_1.default.Router());
/**
 * @route POST /subtitles/generate
 * @desc Generate subtitles for content
 */
/* istanbul ignore next */
cov_raew19ba6().s[7]++;
router.post('/generate', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_raew19ba6().f[1]++;
  cov_raew19ba6().s[8]++;
  try {
    const {
      streamId,
      audioBuffer,
      text,
      language,
      targetLanguages
    } =
    /* istanbul ignore next */
    (cov_raew19ba6().s[9]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_raew19ba6().s[10]++, req.user?.id);
    /* istanbul ignore next */
    cov_raew19ba6().s[11]++;
    if (!streamId) {
      /* istanbul ignore next */
      cov_raew19ba6().b[3][0]++;
      cov_raew19ba6().s[12]++;
      return res.status(400).json({
        success: false,
        error: 'Stream ID is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_raew19ba6().b[3][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_raew19ba6().s[13]++, await AISubtitleService_1.aiSubtitleService.generateSubtitles({
      streamId,
      audioBuffer: audioBuffer ?
      /* istanbul ignore next */
      (cov_raew19ba6().b[4][0]++, Buffer.from(audioBuffer, 'base64')) :
      /* istanbul ignore next */
      (cov_raew19ba6().b[4][1]++, undefined),
      text,
      language,
      targetLanguages
    }));
    /* istanbul ignore next */
    cov_raew19ba6().s[14]++;
    res.json({
      success: result.success,
      data: result,
      error: result.error
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_raew19ba6().s[15]++;
    console.error('Error generating subtitles:', error);
    /* istanbul ignore next */
    cov_raew19ba6().s[16]++;
    res.status(500).json({
      success: false,
      error: 'Failed to generate subtitles'
    });
  }
});
/**
 * @route GET /subtitles/stream/:streamId
 * @desc Get subtitles for stream
 */
/* istanbul ignore next */
cov_raew19ba6().s[17]++;
router.get('/stream/:streamId', async (req, res) => {
  /* istanbul ignore next */
  cov_raew19ba6().f[2]++;
  cov_raew19ba6().s[18]++;
  try {
    const {
      streamId
    } =
    /* istanbul ignore next */
    (cov_raew19ba6().s[19]++, req.params);
    const {
      language =
      /* istanbul ignore next */
      (cov_raew19ba6().b[5][0]++, 'en')
    } =
    /* istanbul ignore next */
    (cov_raew19ba6().s[20]++, req.query);
    const result =
    /* istanbul ignore next */
    (cov_raew19ba6().s[21]++, await AISubtitleService_1.aiSubtitleService.getStreamSubtitles(streamId, language));
    /* istanbul ignore next */
    cov_raew19ba6().s[22]++;
    res.json({
      success: result.success,
      data: result,
      error: result.error
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_raew19ba6().s[23]++;
    console.error('Error getting stream subtitles:', error);
    /* istanbul ignore next */
    cov_raew19ba6().s[24]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get stream subtitles'
    });
  }
});
/**
 * @route POST /subtitles/translate
 * @desc Translate text
 */
/* istanbul ignore next */
cov_raew19ba6().s[25]++;
router.post('/translate', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_raew19ba6().f[3]++;
  cov_raew19ba6().s[26]++;
  try {
    const {
      text,
      sourceLanguage,
      targetLanguage
    } =
    /* istanbul ignore next */
    (cov_raew19ba6().s[27]++, req.body);
    /* istanbul ignore next */
    cov_raew19ba6().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_raew19ba6().b[7][0]++, !text) ||
    /* istanbul ignore next */
    (cov_raew19ba6().b[7][1]++, !sourceLanguage) ||
    /* istanbul ignore next */
    (cov_raew19ba6().b[7][2]++, !targetLanguage)) {
      /* istanbul ignore next */
      cov_raew19ba6().b[6][0]++;
      cov_raew19ba6().s[29]++;
      return res.status(400).json({
        success: false,
        error: 'Text, source language, and target language are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_raew19ba6().b[6][1]++;
    }
    // This would call the translation service
    // For now, return a mock response
    const result =
    /* istanbul ignore next */
    (cov_raew19ba6().s[30]++, {
      translatedText: text,
      // Mock translation
      confidence: 0.8,
      detectedLanguage: sourceLanguage
    });
    /* istanbul ignore next */
    cov_raew19ba6().s[31]++;
    res.json({
      success: true,
      result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_raew19ba6().s[32]++;
    console.error('Error translating text:', error);
    /* istanbul ignore next */
    cov_raew19ba6().s[33]++;
    res.status(500).json({
      success: false,
      error: 'Failed to translate text'
    });
  }
});
/**
 * @route GET /subtitles/languages
 * @desc Get supported languages
 */
/* istanbul ignore next */
cov_raew19ba6().s[34]++;
router.get('/languages', async (req, res) => {
  /* istanbul ignore next */
  cov_raew19ba6().f[4]++;
  cov_raew19ba6().s[35]++;
  try {
    const languages =
    /* istanbul ignore next */
    (cov_raew19ba6().s[36]++, AISubtitleService_1.aiSubtitleService.getSupportedLanguages());
    const languageNames =
    /* istanbul ignore next */
    (cov_raew19ba6().s[37]++, languages.map(code => {
      /* istanbul ignore next */
      cov_raew19ba6().f[5]++;
      cov_raew19ba6().s[38]++;
      return {
        code,
        name: AISubtitleService_1.aiSubtitleService.getLanguageName(code)
      };
    }));
    /* istanbul ignore next */
    cov_raew19ba6().s[39]++;
    res.json({
      success: true,
      languages: languageNames
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_raew19ba6().s[40]++;
    console.error('Error getting supported languages:', error);
    /* istanbul ignore next */
    cov_raew19ba6().s[41]++;
    res.status(500).json({
      success: false,
      error: 'Failed to get supported languages'
    });
  }
});
/**
 * @route POST /subtitles/detect-language
 * @desc Detect language of text
 */
/* istanbul ignore next */
cov_raew19ba6().s[42]++;
router.post('/detect-language', auth_1.authMiddleware, async (req, res) => {
  /* istanbul ignore next */
  cov_raew19ba6().f[6]++;
  cov_raew19ba6().s[43]++;
  try {
    const {
      text
    } =
    /* istanbul ignore next */
    (cov_raew19ba6().s[44]++, req.body);
    /* istanbul ignore next */
    cov_raew19ba6().s[45]++;
    if (!text) {
      /* istanbul ignore next */
      cov_raew19ba6().b[8][0]++;
      cov_raew19ba6().s[46]++;
      return res.status(400).json({
        success: false,
        error: 'Text is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_raew19ba6().b[8][1]++;
    }
    // This would call the language detection service
    // For now, return a mock response
    const result =
    /* istanbul ignore next */
    (cov_raew19ba6().s[47]++, {
      language: 'en',
      // Mock detection
      confidence: 0.9
    });
    /* istanbul ignore next */
    cov_raew19ba6().s[48]++;
    res.json({
      success: true,
      result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_raew19ba6().s[49]++;
    console.error('Error detecting language:', error);
    /* istanbul ignore next */
    cov_raew19ba6().s[50]++;
    res.status(500).json({
      success: false,
      error: 'Failed to detect language'
    });
  }
});
/* istanbul ignore next */
cov_raew19ba6().s[51]++;
exports.default = router;