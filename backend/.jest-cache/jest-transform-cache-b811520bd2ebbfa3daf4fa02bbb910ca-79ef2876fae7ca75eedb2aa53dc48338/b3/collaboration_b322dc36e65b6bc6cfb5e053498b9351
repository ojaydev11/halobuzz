72b764fb6066e8587532e35ee8b3bd00
"use strict";

/* istanbul ignore next */
function cov_9bllevjpv() {
  var path = "D:\\halobuzz by cursor\\backend\\src\\routes\\collaboration.ts";
  var hash = "9f563b478d10253b140cfa30e983c6b766e21a5e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\halobuzz by cursor\\backend\\src\\routes\\collaboration.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 38
        },
        end: {
          line: 4,
          column: 101
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 9,
          column: 100
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 34
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 37
        }
      },
      "10": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "11": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "12": {
        start: {
          line: 19,
          column: 51
        },
        end: {
          line: 19,
          column: 59
        }
      },
      "13": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "15": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "17": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 92
        }
      },
      "18": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 117
        }
      },
      "19": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 31,
          column: 11
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 107
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 82
        }
      },
      "22": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "23": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "24": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 40
        }
      },
      "25": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "26": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 39
        }
      },
      "27": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "28": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 77
        }
      },
      "29": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "30": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 81
        }
      },
      "31": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 101
        }
      },
      "32": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "33": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 135
        }
      },
      "34": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 66
        }
      },
      "35": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "36": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "37": {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 70,
          column: 39
        }
      },
      "38": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 71,
          column: 39
        }
      },
      "39": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "40": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 77
        }
      },
      "41": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 81
        }
      },
      "42": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "43": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 138
        }
      },
      "44": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 67
        }
      },
      "45": {
        start: {
          line: 90,
          column: 0
        },
        end: {
          line: 111,
          column: 3
        }
      },
      "46": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "47": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 40
        }
      },
      "48": {
        start: {
          line: 93,
          column: 38
        },
        end: {
          line: 93,
          column: 46
        }
      },
      "49": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 39
        }
      },
      "50": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "51": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 77
        }
      },
      "52": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "53": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 89
        }
      },
      "54": {
        start: {
          line: 101,
          column: 21
        },
        end: {
          line: 101,
          column: 103
        }
      },
      "55": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "56": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 133
        }
      },
      "57": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 64
        }
      },
      "58": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 137,
          column: 3
        }
      },
      "59": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "60": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 40
        }
      },
      "61": {
        start: {
          line: 119,
          column: 39
        },
        end: {
          line: 119,
          column: 47
        }
      },
      "62": {
        start: {
          line: 120,
          column: 23
        },
        end: {
          line: 120,
          column: 39
        }
      },
      "63": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "64": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 77
        }
      },
      "65": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "66": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 74
        }
      },
      "67": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 127,
          column: 98
        }
      },
      "68": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "69": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 124
        }
      },
      "70": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 65
        }
      },
      "71": {
        start: {
          line: 142,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "72": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "73": {
        start: {
          line: 144,
          column: 30
        },
        end: {
          line: 144,
          column: 40
        }
      },
      "74": {
        start: {
          line: 145,
          column: 23
        },
        end: {
          line: 145,
          column: 39
        }
      },
      "75": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "76": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 77
        }
      },
      "77": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 85
        }
      },
      "78": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "79": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 86
        }
      },
      "80": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "81": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 68
        }
      },
      "82": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "83": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 139
        }
      },
      "84": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 79
        }
      },
      "85": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 187,
          column: 3
        }
      },
      "86": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "87": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 173,
          column: 39
        }
      },
      "88": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "89": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 77
        }
      },
      "90": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 177,
          column: 81
        }
      },
      "91": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 181,
          column: 11
        }
      },
      "92": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 104
        }
      },
      "93": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "94": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 209,
          column: 3
        }
      },
      "95": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "96": {
        start: {
          line: 194,
          column: 30
        },
        end: {
          line: 194,
          column: 40
        }
      },
      "97": {
        start: {
          line: 195,
          column: 23
        },
        end: {
          line: 195,
          column: 39
        }
      },
      "98": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "99": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 77
        }
      },
      "100": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 91
        }
      },
      "101": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 203,
          column: 11
        }
      },
      "102": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 134
        }
      },
      "103": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "104": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 231,
          column: 3
        }
      },
      "105": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 230,
          column: 5
        }
      },
      "106": {
        start: {
          line: 216,
          column: 30
        },
        end: {
          line: 216,
          column: 40
        }
      },
      "107": {
        start: {
          line: 217,
          column: 23
        },
        end: {
          line: 217,
          column: 39
        }
      },
      "108": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "109": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 77
        }
      },
      "110": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 89
        }
      },
      "111": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "112": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 141
        }
      },
      "113": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 81
        }
      },
      "114": {
        start: {
          line: 232,
          column: 0
        },
        end: {
          line: 232,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 17,
            column: 25
          }
        },
        loc: {
          start: {
            line: 17,
            column: 44
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 34
          },
          end: {
            line: 42,
            column: 35
          }
        },
        loc: {
          start: {
            line: 42,
            column: 54
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 40
          },
          end: {
            line: 68,
            column: 41
          }
        },
        loc: {
          start: {
            line: 68,
            column: 60
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 32
          },
          end: {
            line: 90,
            column: 33
          }
        },
        loc: {
          start: {
            line: 90,
            column: 52
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 116,
            column: 35
          },
          end: {
            line: 116,
            column: 36
          }
        },
        loc: {
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 116
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 142,
            column: 26
          },
          end: {
            line: 142,
            column: 27
          }
        },
        loc: {
          start: {
            line: 142,
            column: 46
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 142
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 171,
            column: 29
          },
          end: {
            line: 171,
            column: 30
          }
        },
        loc: {
          start: {
            line: 171,
            column: 49
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 171
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 192,
            column: 36
          },
          end: {
            line: 192,
            column: 37
          }
        },
        loc: {
          start: {
            line: 192,
            column: 56
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 192
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 214,
            column: 36
          },
          end: {
            line: 214,
            column: 37
          }
        },
        loc: {
          start: {
            line: 214,
            column: 56
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 214
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 24
          }
        }, {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 24,
            column: 36
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 21
          }
        }, {
          start: {
            line: 50,
            column: 25
          },
          end: {
            line: 50,
            column: 49
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 21
          }
        }, {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 33
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "13": {
        loc: {
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "14": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 156,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "17": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f563b478d10253b140cfa30e983c6b766e21a5e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9bllevjpv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9bllevjpv();
cov_9bllevjpv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_9bllevjpv().s[1]++, require("express"));
const CollaborativeContentService_1 =
/* istanbul ignore next */
(cov_9bllevjpv().s[2]++, require("@/services/collaboration/CollaborativeContentService"));
const auth_1 =
/* istanbul ignore next */
(cov_9bllevjpv().s[3]++, require("@/middleware/auth"));
const security_1 =
/* istanbul ignore next */
(cov_9bllevjpv().s[4]++, require("@/middleware/security"));
const logger_1 =
/* istanbul ignore next */
(cov_9bllevjpv().s[5]++, require("@/config/logger"));
const router =
/* istanbul ignore next */
(cov_9bllevjpv().s[6]++, (0, express_1.Router)());
const collaborationService =
/* istanbul ignore next */
(cov_9bllevjpv().s[7]++, CollaborativeContentService_1.CollaborativeContentService.getInstance());
// Apply authentication and rate limiting to all routes
/* istanbul ignore next */
cov_9bllevjpv().s[8]++;
router.use(auth_1.authMiddleware);
/* istanbul ignore next */
cov_9bllevjpv().s[9]++;
router.use(security_1.socialLimiter);
/**
 * @route POST /api/v1/collaboration/session
 * @desc Create a new collaboration session
 */
/* istanbul ignore next */
cov_9bllevjpv().s[10]++;
router.post('/session', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[0]++;
  cov_9bllevjpv().s[11]++;
  try {
    const {
      contentType,
      content,
      duration
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[12]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[13]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[14]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[0][0]++;
      cov_9bllevjpv().s[15]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[0][1]++;
    }
    cov_9bllevjpv().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_9bllevjpv().b[2][0]++, !contentType) ||
    /* istanbul ignore next */
    (cov_9bllevjpv().b[2][1]++, !content)) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[1][0]++;
      cov_9bllevjpv().s[17]++;
      return res.status(400).json({
        error: 'Content type and content are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[1][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[18]++, await collaborationService.createCollaborationSession(userId, contentType, content, duration));
    /* istanbul ignore next */
    cov_9bllevjpv().s[19]++;
    res.status(201).json({
      success: true,
      data: session
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[20]++;
    logger_1.logger.error('Error creating collaboration session', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[21]++;
    res.status(500).json({
      error: 'Failed to create collaboration session'
    });
  }
});
/**
 * @route POST /api/v1/collaboration/:sessionId/invite
 * @desc Invite users to collaborate
 */
/* istanbul ignore next */
cov_9bllevjpv().s[22]++;
router.post('/:sessionId/invite', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[1]++;
  cov_9bllevjpv().s[23]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[24]++, req.params);
    const {
      invitees
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[25]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[26]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[27]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[3][0]++;
      cov_9bllevjpv().s[28]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[3][1]++;
    }
    cov_9bllevjpv().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_9bllevjpv().b[5][0]++, !invitees) ||
    /* istanbul ignore next */
    (cov_9bllevjpv().b[5][1]++, !Array.isArray(invitees))) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[4][0]++;
      cov_9bllevjpv().s[30]++;
      return res.status(400).json({
        error: 'Invitees array is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[4][1]++;
    }
    const invites =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[31]++, await collaborationService.inviteToCollaboration(sessionId, userId, invitees));
    /* istanbul ignore next */
    cov_9bllevjpv().s[32]++;
    res.status(200).json({
      success: true,
      data: invites
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[33]++;
    logger_1.logger.error('Error inviting to collaboration', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[34]++;
    res.status(500).json({
      error: 'Failed to send invites'
    });
  }
});
/**
 * @route POST /api/v1/collaboration/invite/:inviteId/accept
 * @desc Accept collaboration invite
 */
/* istanbul ignore next */
cov_9bllevjpv().s[35]++;
router.post('/invite/:inviteId/accept', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[2]++;
  cov_9bllevjpv().s[36]++;
  try {
    const {
      inviteId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[37]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[38]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[39]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[6][0]++;
      cov_9bllevjpv().s[40]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[6][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[41]++, await collaborationService.acceptInvite(inviteId, userId));
    /* istanbul ignore next */
    cov_9bllevjpv().s[42]++;
    res.status(200).json({
      success: true,
      data: session
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[43]++;
    logger_1.logger.error('Error accepting collaboration invite', {
      error,
      inviteId: req.params.inviteId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[44]++;
    res.status(500).json({
      error: 'Failed to accept invite'
    });
  }
});
/**
 * @route POST /api/v1/collaboration/:sessionId/edit
 * @desc Apply real-time edit
 */
/* istanbul ignore next */
cov_9bllevjpv().s[45]++;
router.post('/:sessionId/edit', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[3]++;
  cov_9bllevjpv().s[46]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[47]++, req.params);
    const {
      editType,
      changes
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[48]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[49]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[50]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[7][0]++;
      cov_9bllevjpv().s[51]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[7][1]++;
    }
    cov_9bllevjpv().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_9bllevjpv().b[9][0]++, !editType) ||
    /* istanbul ignore next */
    (cov_9bllevjpv().b[9][1]++, !changes)) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[8][0]++;
      cov_9bllevjpv().s[53]++;
      return res.status(400).json({
        error: 'Edit type and changes are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[8][1]++;
    }
    const edit =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[54]++, await collaborationService.applyRealTimeEdit(sessionId, userId, editType, changes));
    /* istanbul ignore next */
    cov_9bllevjpv().s[55]++;
    res.status(200).json({
      success: true,
      data: edit
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[56]++;
    logger_1.logger.error('Error applying real-time edit', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[57]++;
    res.status(500).json({
      error: 'Failed to apply edit'
    });
  }
});
/**
 * @route POST /api/v1/collaboration/:sessionId/comment
 * @desc Add comment to collaboration
 */
/* istanbul ignore next */
cov_9bllevjpv().s[58]++;
router.post('/:sessionId/comment', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[4]++;
  cov_9bllevjpv().s[59]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[60]++, req.params);
    const {
      comment,
      timestamp
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[61]++, req.body);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[62]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[63]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[10][0]++;
      cov_9bllevjpv().s[64]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[10][1]++;
    }
    cov_9bllevjpv().s[65]++;
    if (!comment) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[11][0]++;
      cov_9bllevjpv().s[66]++;
      return res.status(400).json({
        error: 'Comment is required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[11][1]++;
    }
    const event =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[67]++, await collaborationService.addComment(sessionId, userId, comment, timestamp));
    /* istanbul ignore next */
    cov_9bllevjpv().s[68]++;
    res.status(200).json({
      success: true,
      data: event
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[69]++;
    logger_1.logger.error('Error adding comment', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[70]++;
    res.status(500).json({
      error: 'Failed to add comment'
    });
  }
});
/**
 * @route GET /api/v1/collaboration/:sessionId
 * @desc Get collaboration session
 */
/* istanbul ignore next */
cov_9bllevjpv().s[71]++;
router.get('/:sessionId', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[5]++;
  cov_9bllevjpv().s[72]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[73]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[74]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[75]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[12][0]++;
      cov_9bllevjpv().s[76]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[12][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[77]++, await collaborationService.getCollaborationSession(sessionId));
    /* istanbul ignore next */
    cov_9bllevjpv().s[78]++;
    if (!session) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[13][0]++;
      cov_9bllevjpv().s[79]++;
      return res.status(404).json({
        error: 'Collaboration session not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[13][1]++;
    }
    // Check if user has access to this session
    cov_9bllevjpv().s[80]++;
    if (!session.participants.includes(userId)) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[14][0]++;
      cov_9bllevjpv().s[81]++;
      return res.status(403).json({
        error: 'Access denied'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[14][1]++;
    }
    cov_9bllevjpv().s[82]++;
    res.status(200).json({
      success: true,
      data: session
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[83]++;
    logger_1.logger.error('Error getting collaboration session', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[84]++;
    res.status(500).json({
      error: 'Failed to get collaboration session'
    });
  }
});
/**
 * @route GET /api/v1/collaboration/user/sessions
 * @desc Get user's collaboration sessions
 */
/* istanbul ignore next */
cov_9bllevjpv().s[85]++;
router.get('/user/sessions', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[6]++;
  cov_9bllevjpv().s[86]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[87]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[88]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[15][0]++;
      cov_9bllevjpv().s[89]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[15][1]++;
    }
    const sessions =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[90]++, await collaborationService.getUserCollaborations(userId));
    /* istanbul ignore next */
    cov_9bllevjpv().s[91]++;
    res.status(200).json({
      success: true,
      data: sessions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[92]++;
    logger_1.logger.error('Error getting user collaborations', {
      error,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[93]++;
    res.status(500).json({
      error: 'Failed to get user collaborations'
    });
  }
});
/**
 * @route POST /api/v1/collaboration/:sessionId/complete
 * @desc Complete collaboration session
 */
/* istanbul ignore next */
cov_9bllevjpv().s[94]++;
router.post('/:sessionId/complete', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[7]++;
  cov_9bllevjpv().s[95]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[96]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[97]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[98]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[16][0]++;
      cov_9bllevjpv().s[99]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[16][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[100]++, await collaborationService.completeCollaboration(sessionId, userId));
    /* istanbul ignore next */
    cov_9bllevjpv().s[101]++;
    res.status(200).json({
      success: true,
      data: session
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[102]++;
    logger_1.logger.error('Error completing collaboration', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[103]++;
    res.status(500).json({
      error: 'Failed to complete collaboration'
    });
  }
});
/**
 * @route GET /api/v1/collaboration/:sessionId/analytics
 * @desc Get collaboration analytics
 */
/* istanbul ignore next */
cov_9bllevjpv().s[104]++;
router.get('/:sessionId/analytics', async (req, res) => {
  /* istanbul ignore next */
  cov_9bllevjpv().f[8]++;
  cov_9bllevjpv().s[105]++;
  try {
    const {
      sessionId
    } =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[106]++, req.params);
    const userId =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[107]++, req.user?.userId);
    /* istanbul ignore next */
    cov_9bllevjpv().s[108]++;
    if (!userId) {
      /* istanbul ignore next */
      cov_9bllevjpv().b[17][0]++;
      cov_9bllevjpv().s[109]++;
      return res.status(401).json({
        error: 'User not authenticated'
      });
    } else
    /* istanbul ignore next */
    {
      cov_9bllevjpv().b[17][1]++;
    }
    const analytics =
    /* istanbul ignore next */
    (cov_9bllevjpv().s[110]++, await collaborationService.getCollaborationAnalytics(sessionId));
    /* istanbul ignore next */
    cov_9bllevjpv().s[111]++;
    res.status(200).json({
      success: true,
      data: analytics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_9bllevjpv().s[112]++;
    logger_1.logger.error('Error getting collaboration analytics', {
      error,
      sessionId: req.params.sessionId,
      userId: req.user?.userId
    });
    /* istanbul ignore next */
    cov_9bllevjpv().s[113]++;
    res.status(500).json({
      error: 'Failed to get collaboration analytics'
    });
  }
});
/* istanbul ignore next */
cov_9bllevjpv().s[114]++;
exports.default = router;