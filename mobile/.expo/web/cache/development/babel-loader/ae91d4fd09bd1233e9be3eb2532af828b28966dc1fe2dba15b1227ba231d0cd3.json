{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as Font from 'expo-font';\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _Icon;\n  var font = _defineProperty({}, fontName, expoAssetId);\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  var didWarn = false;\n  return _Icon = function (_React$Component) {\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, Icon, [].concat(args));\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n    _inherits(Icon, _React$Component);\n    return _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function () {\n        var _componentDidMount = _asyncToGenerator(function* () {\n          this._mounted = true;\n          if (!this.state.fontIsLoaded) {\n            yield Font.loadAsync(font);\n            this._mounted && this.setState({\n              fontIsLoaded: true\n            });\n          }\n        });\n        function componentDidMount() {\n          return _componentDidMount.apply(this, arguments);\n        }\n        return componentDidMount;\n      }()\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n        }\n        if (!this.state.fontIsLoaded) {\n          return _jsx(Text, {});\n        }\n        return _jsx(RNVIconComponent, _objectSpread({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props));\n      }\n    }]);\n  }(React.Component), _Icon.defaultProps = RNVIconComponent.defaultProps, _Icon.Button = createIconButtonComponent(_Icon), _Icon.glyphMap = glyphMap, _Icon.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _Icon.getFontFamily = function () {\n    return fontName;\n  }, _Icon.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _Icon.font = font, _Icon.getImageSource = function () {\n    var _ref = _asyncToGenerator(function* (name, size, color) {\n      if (__DEV__ && !(name in glyphMap)) {\n        console.warn(`\"${name}\" is not a valid icon name for family \"${fontName}\"`);\n        return null;\n      }\n      if (typeof Font.renderToImageAsync !== 'function') {\n        console.warn(`Font.renderToImageAsync is not available. Please update expo-font.`);\n        return null;\n      }\n      yield Font.loadAsync(font);\n      var imagePathAndDimensions = yield Font.renderToImageAsync(String.fromCodePoint(glyphMap[name]), {\n        fontFamily: fontName,\n        color: color,\n        size: size\n      });\n      if (typeof imagePathAndDimensions === 'string') {\n        if (__DEV__ && !didWarn) {\n          didWarn = true;\n          console.warn('@expo/vector-icons: Font.renderToImageAsync() did not return image dimensions, because an outdated version of expo-font was used. The reported width and height are estimates, instead of real image dimension. Update expo-font to resolve this.');\n        }\n        var dimensions = size;\n        return {\n          uri: imagePathAndDimensions,\n          width: dimensions,\n          height: dimensions,\n          scale: PixelRatio.get()\n        };\n      } else {\n        var uri = imagePathAndDimensions.uri,\n          width = imagePathAndDimensions.width,\n          height = imagePathAndDimensions.height;\n        return {\n          uri: uri,\n          width: width,\n          height: height,\n          scale: PixelRatio.get()\n        };\n      }\n    });\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }(), _Icon;\n}","map":{"version":3,"names":["Font","React","Text","PixelRatio","createIconSet","createIconButtonComponent","jsx","_jsx","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","_Icon","font","_defineProperty","RNVIconComponent","didWarn","_React$Component","Icon","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_mounted","state","fontIsLoaded","isLoaded","_inherits","_createClass","key","value","_componentDidMount","_asyncToGenerator","loadAsync","setState","componentDidMount","apply","componentWillUnmount","setNativeProps","props","_icon","render","_this2","__DEV__","name","console","warn","_objectSpread","ref","view","Component","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont","getImageSource","_ref","size","color","renderToImageAsync","imagePathAndDimensions","String","fromCodePoint","fontFamily","dimensions","uri","width","height","scale","get","_x","_x2","_x3"],"sources":["D:\\halobuzz by cursor\\mobile\\node_modules\\@expo\\vector-icons\\src\\createIconSet.tsx"],"sourcesContent":["import * as Font from 'expo-font';\nimport React, { ComponentClass } from 'react';\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n  ColorValue,\n  PixelRatio,\n} from 'react-native';\n\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './vendor/react-native-vector-icons/lib/create-icon-set';\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport type ImageSource = { uri: string; width: number; height: number; scale: number };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  getImageSource: (name: G, size: number, color: ColorValue) => Promise<ImageSource | null>;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  let didWarn = false;\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n    static getImageSource = async (\n      name: G,\n      size: number,\n      color: ColorValue\n    ): Promise<ImageSource | null> => {\n      if (__DEV__ && !(name in glyphMap)) {\n        console.warn(`\"${name}\" is not a valid icon name for family \"${fontName}\"`);\n        return null;\n      }\n      if (typeof Font.renderToImageAsync !== 'function') {\n        console.warn(`Font.renderToImageAsync is not available. Please update expo-font.`);\n        return null;\n      }\n      await Font.loadAsync(font);\n      const imagePathAndDimensions = await Font.renderToImageAsync(\n        String.fromCodePoint(glyphMap[name] as number),\n        {\n          fontFamily: fontName,\n          color: color as string,\n          size,\n        }\n      );\n      if (typeof imagePathAndDimensions === 'string') {\n        if (__DEV__ && !didWarn) {\n          didWarn = true;\n          console.warn(\n            '@expo/vector-icons: Font.renderToImageAsync() did not return image dimensions, because an outdated version of expo-font was used. The reported width and height are estimates, instead of real image dimension. Update expo-font to resolve this.'\n          );\n        }\n        const dimensions = size;\n        return {\n          uri: imagePathAndDimensions,\n          width: dimensions,\n          height: dimensions,\n          scale: PixelRatio.get(),\n        };\n      } else {\n        const { uri, width, height } = imagePathAndDimensions;\n        return { uri, width, height, scale: PixelRatio.get() };\n      }\n    };\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        /* eslint-disable react/no-did-mount-set-state */\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}