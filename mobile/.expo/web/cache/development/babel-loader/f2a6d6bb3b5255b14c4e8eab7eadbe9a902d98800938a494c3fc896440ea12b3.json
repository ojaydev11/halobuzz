{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nvar NotificationService = function () {\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n    this.expoPushToken = null;\n  }\n  return _createClass(NotificationService, [{\n    key: \"initializePushNotifications\",\n    value: function () {\n      var _initializePushNotifications = _asyncToGenerator(function* () {\n        try {\n          Notifications.setNotificationHandler({\n            handleNotification: function () {\n              var _handleNotification = _asyncToGenerator(function* () {\n                return {\n                  shouldShowAlert: true,\n                  shouldPlaySound: true,\n                  shouldSetBadge: true\n                };\n              });\n              function handleNotification() {\n                return _handleNotification.apply(this, arguments);\n              }\n              return handleNotification;\n            }()\n          });\n          var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n            existingStatus = _yield$Notifications$.status;\n          var finalStatus = existingStatus;\n          if (existingStatus !== 'granted') {\n            var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n              status = _yield$Notifications$2.status;\n            finalStatus = status;\n          }\n          if (finalStatus !== 'granted') {\n            console.log('Failed to get push token for push notification!');\n            return;\n          }\n          if (Device.isDevice) {\n            var token = yield Notifications.getExpoPushTokenAsync({\n              projectId: 'your-project-id'\n            });\n            this.expoPushToken = token.data;\n            console.log('Expo push token:', token.data);\n          } else {\n            console.log('Must use physical device for Push Notifications');\n          }\n          this.setupNotificationListeners();\n        } catch (error) {\n          console.error('Failed to initialize push notifications:', error);\n        }\n      });\n      function initializePushNotifications() {\n        return _initializePushNotifications.apply(this, arguments);\n      }\n      return initializePushNotifications;\n    }()\n  }, {\n    key: \"setupNotificationListeners\",\n    value: function setupNotificationListeners() {\n      var _this = this;\n      var notificationListener = Notifications.addNotificationReceivedListener(function (notification) {\n        console.log('Notification received:', notification);\n        _this.handleNotificationReceived(notification);\n      });\n      var responseListener = Notifications.addNotificationResponseReceivedListener(function (response) {\n        console.log('Notification response:', response);\n        _this.handleNotificationResponse(response);\n      });\n      return function () {\n        Notifications.removeNotificationSubscription(notificationListener);\n        Notifications.removeNotificationSubscription(responseListener);\n      };\n    }\n  }, {\n    key: \"handleNotificationReceived\",\n    value: function handleNotificationReceived(notification) {\n      var _notification$request = notification.request.content,\n        title = _notification$request.title,\n        body = _notification$request.body,\n        data = _notification$request.data;\n      switch (data == null ? void 0 : data.type) {\n        case 'live_stream_started':\n          this.handleLiveStreamNotification(data);\n          break;\n        case 'new_message':\n          this.handleMessageNotification(data);\n          break;\n        case 'gift_received':\n          this.handleGiftNotification(data);\n          break;\n        case 'battle_invite':\n          this.handleBattleNotification(data);\n          break;\n        case 'game_result':\n          this.handleGameNotification(data);\n          break;\n        case 'og_tier_upgrade':\n          this.handleOGTierNotification(data);\n          break;\n        default:\n          console.log('Unknown notification type:', data == null ? void 0 : data.type);\n      }\n    }\n  }, {\n    key: \"handleNotificationResponse\",\n    value: function handleNotificationResponse(response) {\n      var data = response.notification.request.content.data;\n      switch (data == null ? void 0 : data.type) {\n        case 'live_stream_started':\n          break;\n        case 'new_message':\n          break;\n        case 'gift_received':\n          break;\n        case 'battle_invite':\n          break;\n        case 'game_result':\n          break;\n        case 'og_tier_upgrade':\n          break;\n      }\n    }\n  }, {\n    key: \"handleLiveStreamNotification\",\n    value: function handleLiveStreamNotification(data) {\n      console.log('Live stream notification:', data);\n    }\n  }, {\n    key: \"handleMessageNotification\",\n    value: function handleMessageNotification(data) {\n      console.log('Message notification:', data);\n    }\n  }, {\n    key: \"handleGiftNotification\",\n    value: function handleGiftNotification(data) {\n      console.log('Gift notification:', data);\n    }\n  }, {\n    key: \"handleBattleNotification\",\n    value: function handleBattleNotification(data) {\n      console.log('Battle notification:', data);\n    }\n  }, {\n    key: \"handleGameNotification\",\n    value: function handleGameNotification(data) {\n      console.log('Game notification:', data);\n    }\n  }, {\n    key: \"handleOGTierNotification\",\n    value: function handleOGTierNotification(data) {\n      console.log('OG tier notification:', data);\n    }\n  }, {\n    key: \"sendLocalNotification\",\n    value: function () {\n      var _sendLocalNotification = _asyncToGenerator(function* (title, body, data) {\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: title,\n            body: body,\n            data: data,\n            sound: true\n          },\n          trigger: null\n        });\n      });\n      function sendLocalNotification(_x, _x2, _x3) {\n        return _sendLocalNotification.apply(this, arguments);\n      }\n      return sendLocalNotification;\n    }()\n  }, {\n    key: \"scheduleNotification\",\n    value: function () {\n      var _scheduleNotification = _asyncToGenerator(function* (title, body, trigger, data) {\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: title,\n            body: body,\n            data: data,\n            sound: true\n          },\n          trigger: trigger\n        });\n      });\n      function scheduleNotification(_x4, _x5, _x6, _x7) {\n        return _scheduleNotification.apply(this, arguments);\n      }\n      return scheduleNotification;\n    }()\n  }, {\n    key: \"cancelAllNotifications\",\n    value: function () {\n      var _cancelAllNotifications = _asyncToGenerator(function* () {\n        yield Notifications.cancelAllScheduledNotificationsAsync();\n      });\n      function cancelAllNotifications() {\n        return _cancelAllNotifications.apply(this, arguments);\n      }\n      return cancelAllNotifications;\n    }()\n  }, {\n    key: \"getBadgeCount\",\n    value: function () {\n      var _getBadgeCount = _asyncToGenerator(function* () {\n        return yield Notifications.getBadgeCountAsync();\n      });\n      function getBadgeCount() {\n        return _getBadgeCount.apply(this, arguments);\n      }\n      return getBadgeCount;\n    }()\n  }, {\n    key: \"setBadgeCount\",\n    value: function () {\n      var _setBadgeCount = _asyncToGenerator(function* (count) {\n        yield Notifications.setBadgeCountAsync(count);\n      });\n      function setBadgeCount(_x8) {\n        return _setBadgeCount.apply(this, arguments);\n      }\n      return setBadgeCount;\n    }()\n  }, {\n    key: \"getPushToken\",\n    value: function getPushToken() {\n      return this.expoPushToken;\n    }\n  }, {\n    key: \"registerForNotifications\",\n    value: function () {\n      var _registerForNotifications = _asyncToGenerator(function* (types) {\n        console.log('Registering for notification types:', types);\n      });\n      function registerForNotifications(_x9) {\n        return _registerForNotifications.apply(this, arguments);\n      }\n      return registerForNotifications;\n    }()\n  }, {\n    key: \"unregisterFromNotifications\",\n    value: function () {\n      var _unregisterFromNotifications = _asyncToGenerator(function* () {\n        console.log('Unregistering from notifications');\n      });\n      function unregisterFromNotifications() {\n        return _unregisterFromNotifications.apply(this, arguments);\n      }\n      return unregisterFromNotifications;\n    }()\n  }]);\n}();\nexport var notificationService = new NotificationService();\nexport var initializePushNotifications = function () {\n  var _ref = _asyncToGenerator(function* () {\n    yield notificationService.initializePushNotifications();\n  });\n  return function initializePushNotifications() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Notifications","Device","NotificationService","_classCallCheck","expoPushToken","_createClass","key","value","_initializePushNotifications","_asyncToGenerator","setNotificationHandler","handleNotification","_handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","console","log","isDevice","token","getExpoPushTokenAsync","projectId","data","setupNotificationListeners","error","initializePushNotifications","_this","notificationListener","addNotificationReceivedListener","notification","handleNotificationReceived","responseListener","addNotificationResponseReceivedListener","response","handleNotificationResponse","removeNotificationSubscription","_notification$request","request","content","title","body","type","handleLiveStreamNotification","handleMessageNotification","handleGiftNotification","handleBattleNotification","handleGameNotification","handleOGTierNotification","_sendLocalNotification","scheduleNotificationAsync","sound","trigger","sendLocalNotification","_x","_x2","_x3","_scheduleNotification","scheduleNotification","_x4","_x5","_x6","_x7","_cancelAllNotifications","cancelAllScheduledNotificationsAsync","cancelAllNotifications","_getBadgeCount","getBadgeCountAsync","getBadgeCount","_setBadgeCount","count","setBadgeCountAsync","setBadgeCount","_x8","getPushToken","_registerForNotifications","types","registerForNotifications","_x9","_unregisterFromNotifications","unregisterFromNotifications","notificationService","_ref"],"sources":["D:/halobuzz by cursor/mobile/src/services/notificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport * as Device from 'expo-device';\r\nimport { Platform } from 'react-native';\r\n\r\nclass NotificationService {\r\n  private expoPushToken: string | null = null;\r\n\r\n  async initializePushNotifications() {\r\n    try {\r\n      // Configure notification behavior\r\n      Notifications.setNotificationHandler({\r\n        handleNotification: async () => ({\r\n          shouldShowAlert: true,\r\n          shouldPlaySound: true,\r\n          shouldSetBadge: true,\r\n        }),\r\n      });\r\n\r\n      // Request permissions\r\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n      let finalStatus = existingStatus;\r\n\r\n      if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        finalStatus = status;\r\n      }\r\n\r\n      if (finalStatus !== 'granted') {\r\n        console.log('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n\r\n      // Get push token\r\n      if (Device.isDevice) {\r\n        const token = await Notifications.getExpoPushTokenAsync({\r\n          projectId: 'your-project-id', // Replace with your Expo project ID\r\n        });\r\n        this.expoPushToken = token.data;\r\n        console.log('Expo push token:', token.data);\r\n      } else {\r\n        console.log('Must use physical device for Push Notifications');\r\n      }\r\n\r\n      // Set up notification listeners\r\n      this.setupNotificationListeners();\r\n\r\n    } catch (error) {\r\n      console.error('Failed to initialize push notifications:', error);\r\n    }\r\n  }\r\n\r\n  private setupNotificationListeners() {\r\n    // Handle notification received while app is running\r\n    const notificationListener = Notifications.addNotificationReceivedListener(notification => {\r\n      console.log('Notification received:', notification);\r\n      this.handleNotificationReceived(notification);\r\n    });\r\n\r\n    // Handle notification response (user tapped notification)\r\n    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {\r\n      console.log('Notification response:', response);\r\n      this.handleNotificationResponse(response);\r\n    });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(notificationListener);\r\n      Notifications.removeNotificationSubscription(responseListener);\r\n    };\r\n  }\r\n\r\n  private handleNotificationReceived(notification: Notifications.Notification) {\r\n    const { title, body, data } = notification.request.content;\r\n    \r\n    // Handle different notification types\r\n    switch (data?.type) {\r\n      case 'live_stream_started':\r\n        this.handleLiveStreamNotification(data);\r\n        break;\r\n      case 'new_message':\r\n        this.handleMessageNotification(data);\r\n        break;\r\n      case 'gift_received':\r\n        this.handleGiftNotification(data);\r\n        break;\r\n      case 'battle_invite':\r\n        this.handleBattleNotification(data);\r\n        break;\r\n      case 'game_result':\r\n        this.handleGameNotification(data);\r\n        break;\r\n      case 'og_tier_upgrade':\r\n        this.handleOGTierNotification(data);\r\n        break;\r\n      default:\r\n        console.log('Unknown notification type:', data?.type);\r\n    }\r\n  }\r\n\r\n  private handleNotificationResponse(response: Notifications.NotificationResponse) {\r\n    const { data } = response.notification.request.content;\r\n    \r\n    // Navigate based on notification type\r\n    switch (data?.type) {\r\n      case 'live_stream_started':\r\n        // Navigate to live stream\r\n        break;\r\n      case 'new_message':\r\n        // Navigate to inbox\r\n        break;\r\n      case 'gift_received':\r\n        // Navigate to profile/wallet\r\n        break;\r\n      case 'battle_invite':\r\n        // Navigate to battle\r\n        break;\r\n      case 'game_result':\r\n        // Navigate to game results\r\n        break;\r\n      case 'og_tier_upgrade':\r\n        // Navigate to OG store\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleLiveStreamNotification(data: any) {\r\n    // Handle live stream notifications\r\n    console.log('Live stream notification:', data);\r\n  }\r\n\r\n  private handleMessageNotification(data: any) {\r\n    // Handle message notifications\r\n    console.log('Message notification:', data);\r\n  }\r\n\r\n  private handleGiftNotification(data: any) {\r\n    // Handle gift notifications\r\n    console.log('Gift notification:', data);\r\n  }\r\n\r\n  private handleBattleNotification(data: any) {\r\n    // Handle battle notifications\r\n    console.log('Battle notification:', data);\r\n  }\r\n\r\n  private handleGameNotification(data: any) {\r\n    // Handle game notifications\r\n    console.log('Game notification:', data);\r\n  }\r\n\r\n  private handleOGTierNotification(data: any) {\r\n    // Handle OG tier notifications\r\n    console.log('OG tier notification:', data);\r\n  }\r\n\r\n  // Send local notification\r\n  async sendLocalNotification(title: string, body: string, data?: any) {\r\n    await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title,\r\n        body,\r\n        data,\r\n        sound: true,\r\n      },\r\n      trigger: null, // Send immediately\r\n    });\r\n  }\r\n\r\n  // Schedule notification\r\n  async scheduleNotification(title: string, body: string, trigger: any, data?: any) {\r\n    await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title,\r\n        body,\r\n        data,\r\n        sound: true,\r\n      },\r\n      trigger,\r\n    });\r\n  }\r\n\r\n  // Cancel all notifications\r\n  async cancelAllNotifications() {\r\n    await Notifications.cancelAllScheduledNotificationsAsync();\r\n  }\r\n\r\n  // Get badge count\r\n  async getBadgeCount(): Promise<number> {\r\n    return await Notifications.getBadgeCountAsync();\r\n  }\r\n\r\n  // Set badge count\r\n  async setBadgeCount(count: number) {\r\n    await Notifications.setBadgeCountAsync(count);\r\n  }\r\n\r\n  // Get push token\r\n  getPushToken(): string | null {\r\n    return this.expoPushToken;\r\n  }\r\n\r\n  // Register for specific notification types\r\n  async registerForNotifications(types: string[]) {\r\n    // This would typically involve calling your backend API\r\n    // to register the user for specific notification types\r\n    console.log('Registering for notification types:', types);\r\n  }\r\n\r\n  // Unregister from notifications\r\n  async unregisterFromNotifications() {\r\n    // This would typically involve calling your backend API\r\n    // to unregister the user from notifications\r\n    console.log('Unregistering from notifications');\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();\r\n\r\nexport const initializePushNotifications = async () => {\r\n  await notificationService.initializePushNotifications();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}