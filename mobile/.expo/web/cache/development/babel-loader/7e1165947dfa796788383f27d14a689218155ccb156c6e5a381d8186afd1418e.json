{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nvar API_BASE_URL = 'http://localhost:3001/api';\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n    this.token = null;\n  }\n  return _createClass(AuthService, [{\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator(function* (credentials) {\n        try {\n          var response = yield axios.post(`${API_BASE_URL}/auth/login`, credentials);\n          var _response$data = response.data,\n            user = _response$data.user,\n            token = _response$data.token;\n          yield this.storeToken(token);\n          this.token = token;\n          return {\n            user: user,\n            token: token\n          };\n        } catch (error) {\n          console.error('Login error:', error);\n          throw new Error('Login failed. Please check your credentials.');\n        }\n      });\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator(function* (userData) {\n        try {\n          var response = yield axios.post(`${API_BASE_URL}/auth/register`, userData);\n          var _response$data2 = response.data,\n            user = _response$data2.user,\n            token = _response$data2.token;\n          yield this.storeToken(token);\n          this.token = token;\n          return {\n            user: user,\n            token: token\n          };\n        } catch (error) {\n          console.error('Registration error:', error);\n          throw new Error('Registration failed. Please try again.');\n        }\n      });\n      function register(_x2) {\n        return _register.apply(this, arguments);\n      }\n      return register;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(function* () {\n        try {\n          if (this.token) {\n            yield axios.post(`${API_BASE_URL}/auth/logout`, {}, {\n              headers: {\n                Authorization: `Bearer ${this.token}`\n              }\n            });\n          }\n        } catch (error) {\n          console.error('Logout error:', error);\n        } finally {\n          yield this.removeToken();\n          this.token = null;\n        }\n      });\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n      return logout;\n    }()\n  }, {\n    key: \"checkAuthStatus\",\n    value: function () {\n      var _checkAuthStatus = _asyncToGenerator(function* () {\n        try {\n          var token = yield this.getStoredToken();\n          if (!token) {\n            throw new Error('No token found');\n          }\n          var response = yield axios.get(`${API_BASE_URL}/auth/me`, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          var user = response.data.user;\n          this.token = token;\n          return {\n            user: user,\n            token: token\n          };\n        } catch (error) {\n          console.error('Auth status check error:', error);\n          yield this.removeToken();\n          throw new Error('Authentication failed');\n        }\n      });\n      function checkAuthStatus() {\n        return _checkAuthStatus.apply(this, arguments);\n      }\n      return checkAuthStatus;\n    }()\n  }, {\n    key: \"refreshToken\",\n    value: function () {\n      var _refreshToken = _asyncToGenerator(function* () {\n        try {\n          var token = yield this.getStoredToken();\n          if (!token) {\n            throw new Error('No token found');\n          }\n          var response = yield axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          var newToken = response.data.token;\n          yield this.storeToken(newToken);\n          this.token = newToken;\n          return newToken;\n        } catch (error) {\n          console.error('Token refresh error:', error);\n          yield this.removeToken();\n          throw new Error('Token refresh failed');\n        }\n      });\n      function refreshToken() {\n        return _refreshToken.apply(this, arguments);\n      }\n      return refreshToken;\n    }()\n  }, {\n    key: \"updateProfile\",\n    value: function () {\n      var _updateProfile = _asyncToGenerator(function* (profileData) {\n        try {\n          var token = yield this.getStoredToken();\n          if (!token) {\n            throw new Error('No token found');\n          }\n          var response = yield axios.put(`${API_BASE_URL}/auth/profile`, profileData, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          return response.data.user;\n        } catch (error) {\n          console.error('Profile update error:', error);\n          throw new Error('Profile update failed');\n        }\n      });\n      function updateProfile(_x3) {\n        return _updateProfile.apply(this, arguments);\n      }\n      return updateProfile;\n    }()\n  }, {\n    key: \"changePassword\",\n    value: function () {\n      var _changePassword = _asyncToGenerator(function* (currentPassword, newPassword) {\n        try {\n          var token = yield this.getStoredToken();\n          if (!token) {\n            throw new Error('No token found');\n          }\n          yield axios.put(`${API_BASE_URL}/auth/password`, {\n            currentPassword: currentPassword,\n            newPassword: newPassword\n          }, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        } catch (error) {\n          console.error('Password change error:', error);\n          throw new Error('Password change failed');\n        }\n      });\n      function changePassword(_x4, _x5) {\n        return _changePassword.apply(this, arguments);\n      }\n      return changePassword;\n    }()\n  }, {\n    key: \"forgotPassword\",\n    value: function () {\n      var _forgotPassword = _asyncToGenerator(function* (email) {\n        try {\n          yield axios.post(`${API_BASE_URL}/auth/forgot-password`, {\n            email: email\n          });\n        } catch (error) {\n          console.error('Forgot password error:', error);\n          throw new Error('Password reset request failed');\n        }\n      });\n      function forgotPassword(_x6) {\n        return _forgotPassword.apply(this, arguments);\n      }\n      return forgotPassword;\n    }()\n  }, {\n    key: \"resetPassword\",\n    value: function () {\n      var _resetPassword = _asyncToGenerator(function* (token, newPassword) {\n        try {\n          yield axios.post(`${API_BASE_URL}/auth/reset-password`, {\n            token: token,\n            newPassword: newPassword\n          });\n        } catch (error) {\n          console.error('Password reset error:', error);\n          throw new Error('Password reset failed');\n        }\n      });\n      function resetPassword(_x7, _x8) {\n        return _resetPassword.apply(this, arguments);\n      }\n      return resetPassword;\n    }()\n  }, {\n    key: \"verifyEmail\",\n    value: function () {\n      var _verifyEmail = _asyncToGenerator(function* (token) {\n        try {\n          yield axios.post(`${API_BASE_URL}/auth/verify-email`, {\n            token: token\n          });\n        } catch (error) {\n          console.error('Email verification error:', error);\n          throw new Error('Email verification failed');\n        }\n      });\n      function verifyEmail(_x9) {\n        return _verifyEmail.apply(this, arguments);\n      }\n      return verifyEmail;\n    }()\n  }, {\n    key: \"resendVerificationEmail\",\n    value: function () {\n      var _resendVerificationEmail = _asyncToGenerator(function* (email) {\n        try {\n          yield axios.post(`${API_BASE_URL}/auth/resend-verification`, {\n            email: email\n          });\n        } catch (error) {\n          console.error('Resend verification error:', error);\n          throw new Error('Verification email resend failed');\n        }\n      });\n      function resendVerificationEmail(_x0) {\n        return _resendVerificationEmail.apply(this, arguments);\n      }\n      return resendVerificationEmail;\n    }()\n  }, {\n    key: \"storeToken\",\n    value: function () {\n      var _storeToken = _asyncToGenerator(function* (token) {\n        try {\n          yield SecureStore.setItemAsync('auth_token', token);\n        } catch (error) {\n          console.error('Token storage error:', error);\n        }\n      });\n      function storeToken(_x1) {\n        return _storeToken.apply(this, arguments);\n      }\n      return storeToken;\n    }()\n  }, {\n    key: \"getStoredToken\",\n    value: function () {\n      var _getStoredToken = _asyncToGenerator(function* () {\n        try {\n          return yield SecureStore.getItemAsync('auth_token');\n        } catch (error) {\n          console.error('Token retrieval error:', error);\n          return null;\n        }\n      });\n      function getStoredToken() {\n        return _getStoredToken.apply(this, arguments);\n      }\n      return getStoredToken;\n    }()\n  }, {\n    key: \"removeToken\",\n    value: function () {\n      var _removeToken = _asyncToGenerator(function* () {\n        try {\n          yield SecureStore.deleteItemAsync('auth_token');\n        } catch (error) {\n          console.error('Token removal error:', error);\n        }\n      });\n      function removeToken() {\n        return _removeToken.apply(this, arguments);\n      }\n      return removeToken;\n    }()\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return this.token;\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      return !!this.token;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors() {\n      var _this = this;\n      axios.interceptors.request.use(function () {\n        var _ref = _asyncToGenerator(function* (config) {\n          var token = _this.token || (yield _this.getStoredToken());\n          if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n          }\n          return config;\n        });\n        return function (_x10) {\n          return _ref.apply(this, arguments);\n        };\n      }(), function (error) {\n        return Promise.reject(error);\n      });\n      axios.interceptors.response.use(function (response) {\n        return response;\n      }, function () {\n        var _ref2 = _asyncToGenerator(function* (error) {\n          var _error$response;\n          var originalRequest = error.config;\n          if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n            try {\n              var newToken = yield _this.refreshToken();\n              originalRequest.headers.Authorization = `Bearer ${newToken}`;\n              return axios(originalRequest);\n            } catch (refreshError) {\n              yield _this.logout();\n              throw refreshError;\n            }\n          }\n          return Promise.reject(error);\n        });\n        return function (_x11) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n}();\nexport var authService = new AuthService();\nauthService.setupAxiosInterceptors();","map":{"version":3,"names":["axios","SecureStore","API_BASE_URL","AuthService","_classCallCheck","token","_createClass","key","value","_login","_asyncToGenerator","credentials","response","post","_response$data","data","user","storeToken","error","console","Error","login","_x","apply","arguments","_register","userData","_response$data2","register","_x2","_logout","headers","Authorization","removeToken","logout","_checkAuthStatus","getStoredToken","get","checkAuthStatus","_refreshToken","newToken","refreshToken","_updateProfile","profileData","put","updateProfile","_x3","_changePassword","currentPassword","newPassword","changePassword","_x4","_x5","_forgotPassword","email","forgotPassword","_x6","_resetPassword","resetPassword","_x7","_x8","_verifyEmail","verifyEmail","_x9","_resendVerificationEmail","resendVerificationEmail","_x0","_storeToken","setItemAsync","_x1","_getStoredToken","getItemAsync","_removeToken","deleteItemAsync","getToken","isAuthenticated","setupAxiosInterceptors","_this","interceptors","request","use","_ref","config","_x10","Promise","reject","_ref2","_error$response","originalRequest","status","_retry","refreshError","_x11","authService"],"sources":["D:/halobuzz by cursor/mobile/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport * as SecureStore from 'expo-secure-store';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface RegisterData {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  phone?: string;\r\n  country: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  user: {\r\n    id: string;\r\n    username: string;\r\n    email: string;\r\n    phone: string | null;\r\n    avatar: string | null;\r\n    ogTier: number;\r\n    isVerified: boolean;\r\n  };\r\n  token: string;\r\n}\r\n\r\nclass AuthService {\r\n  private token: string | null = null;\r\n\r\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);\r\n      const { user, token } = response.data;\r\n      \r\n      await this.storeToken(token);\r\n      this.token = token;\r\n      \r\n      return { user, token };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw new Error('Login failed. Please check your credentials.');\r\n    }\r\n  }\r\n\r\n  async register(userData: RegisterData): Promise<AuthResponse> {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/register`, userData);\r\n      const { user, token } = response.data;\r\n      \r\n      await this.storeToken(token);\r\n      this.token = token;\r\n      \r\n      return { user, token };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw new Error('Registration failed. Please try again.');\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      if (this.token) {\r\n        await axios.post(`${API_BASE_URL}/auth/logout`, {}, {\r\n          headers: { Authorization: `Bearer ${this.token}` }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      await this.removeToken();\r\n      this.token = null;\r\n    }\r\n  }\r\n\r\n  async checkAuthStatus(): Promise<AuthResponse> {\r\n    try {\r\n      const token = await this.getStoredToken();\r\n      if (!token) {\r\n        throw new Error('No token found');\r\n      }\r\n\r\n      const response = await axios.get(`${API_BASE_URL}/auth/me`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      const { user } = response.data;\r\n      this.token = token;\r\n      \r\n      return { user, token };\r\n    } catch (error) {\r\n      console.error('Auth status check error:', error);\r\n      await this.removeToken();\r\n      throw new Error('Authentication failed');\r\n    }\r\n  }\r\n\r\n  async refreshToken(): Promise<string> {\r\n    try {\r\n      const token = await this.getStoredToken();\r\n      if (!token) {\r\n        throw new Error('No token found');\r\n      }\r\n\r\n      const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      const { token: newToken } = response.data;\r\n      await this.storeToken(newToken);\r\n      this.token = newToken;\r\n      \r\n      return newToken;\r\n    } catch (error) {\r\n      console.error('Token refresh error:', error);\r\n      await this.removeToken();\r\n      throw new Error('Token refresh failed');\r\n    }\r\n  }\r\n\r\n  async updateProfile(profileData: Partial<AuthResponse['user']>): Promise<AuthResponse['user']> {\r\n    try {\r\n      const token = await this.getStoredToken();\r\n      if (!token) {\r\n        throw new Error('No token found');\r\n      }\r\n\r\n      const response = await axios.put(`${API_BASE_URL}/auth/profile`, profileData, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      \r\n      return response.data.user;\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      throw new Error('Profile update failed');\r\n    }\r\n  }\r\n\r\n  async changePassword(currentPassword: string, newPassword: string): Promise<void> {\r\n    try {\r\n      const token = await this.getStoredToken();\r\n      if (!token) {\r\n        throw new Error('No token found');\r\n      }\r\n\r\n      await axios.put(`${API_BASE_URL}/auth/password`, {\r\n        currentPassword,\r\n        newPassword\r\n      }, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n    } catch (error) {\r\n      console.error('Password change error:', error);\r\n      throw new Error('Password change failed');\r\n    }\r\n  }\r\n\r\n  async forgotPassword(email: string): Promise<void> {\r\n    try {\r\n      await axios.post(`${API_BASE_URL}/auth/forgot-password`, { email });\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      throw new Error('Password reset request failed');\r\n    }\r\n  }\r\n\r\n  async resetPassword(token: string, newPassword: string): Promise<void> {\r\n    try {\r\n      await axios.post(`${API_BASE_URL}/auth/reset-password`, {\r\n        token,\r\n        newPassword\r\n      });\r\n    } catch (error) {\r\n      console.error('Password reset error:', error);\r\n      throw new Error('Password reset failed');\r\n    }\r\n  }\r\n\r\n  async verifyEmail(token: string): Promise<void> {\r\n    try {\r\n      await axios.post(`${API_BASE_URL}/auth/verify-email`, { token });\r\n    } catch (error) {\r\n      console.error('Email verification error:', error);\r\n      throw new Error('Email verification failed');\r\n    }\r\n  }\r\n\r\n  async resendVerificationEmail(email: string): Promise<void> {\r\n    try {\r\n      await axios.post(`${API_BASE_URL}/auth/resend-verification`, { email });\r\n    } catch (error) {\r\n      console.error('Resend verification error:', error);\r\n      throw new Error('Verification email resend failed');\r\n    }\r\n  }\r\n\r\n  // Token management\r\n  private async storeToken(token: string): Promise<void> {\r\n    try {\r\n      await SecureStore.setItemAsync('auth_token', token);\r\n    } catch (error) {\r\n      console.error('Token storage error:', error);\r\n    }\r\n  }\r\n\r\n  private async getStoredToken(): Promise<string | null> {\r\n    try {\r\n      return await SecureStore.getItemAsync('auth_token');\r\n    } catch (error) {\r\n      console.error('Token retrieval error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async removeToken(): Promise<void> {\r\n    try {\r\n      await SecureStore.deleteItemAsync('auth_token');\r\n    } catch (error) {\r\n      console.error('Token removal error:', error);\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token;\r\n  }\r\n\r\n  // API request interceptor\r\n  setupAxiosInterceptors() {\r\n    axios.interceptors.request.use(\r\n      async (config) => {\r\n        const token = this.token || await this.getStoredToken();\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n        \r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n          \r\n          try {\r\n            const newToken = await this.refreshToken();\r\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n            return axios(originalRequest);\r\n          } catch (refreshError) {\r\n            await this.logout();\r\n            throw refreshError;\r\n          }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\n\r\n// Setup axios interceptors\r\nauthService.setupAxiosInterceptors();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}